// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class CountdownGriefingEscrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CountdownGriefingEscrow entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CountdownGriefingEscrow entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CountdownGriefingEscrow", id.toString(), this);
  }

  static load(id: string): CountdownGriefingEscrow | null {
    return store.get(
      "CountdownGriefingEscrow",
      id
    ) as CountdownGriefingEscrow | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get creator(): Bytes | null {
    let value = this.get("creator");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set creator(value: Bytes | null) {
    if (value === null) {
      this.unset("creator");
    } else {
      this.set("creator", Value.fromBytes(value as Bytes));
    }
  }

  get operator(): Bytes | null {
    let value = this.get("operator");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set operator(value: Bytes | null) {
    if (value === null) {
      this.unset("operator");
    } else {
      this.set("operator", Value.fromBytes(value as Bytes));
    }
  }

  get buyer(): Bytes | null {
    let value = this.get("buyer");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set buyer(value: Bytes | null) {
    if (value === null) {
      this.unset("buyer");
    } else {
      this.set("buyer", Value.fromBytes(value as Bytes));
    }
  }

  get seller(): Bytes | null {
    let value = this.get("seller");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set seller(value: Bytes | null) {
    if (value === null) {
      this.unset("seller");
    } else {
      this.set("seller", Value.fromBytes(value as Bytes));
    }
  }

  get paymentAmount(): BigInt | null {
    let value = this.get("paymentAmount");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set paymentAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("paymentAmount");
    } else {
      this.set("paymentAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get stakeAmount(): BigInt | null {
    let value = this.get("stakeAmount");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set stakeAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("stakeAmount");
    } else {
      this.set("stakeAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get countdownLength(): BigInt | null {
    let value = this.get("countdownLength");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set countdownLength(value: BigInt | null) {
    if (value === null) {
      this.unset("countdownLength");
    } else {
      this.set("countdownLength", Value.fromBigInt(value as BigInt));
    }
  }

  get agreementParams(): Bytes | null {
    let value = this.get("agreementParams");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set agreementParams(value: Bytes | null) {
    if (value === null) {
      this.unset("agreementParams");
    } else {
      this.set("agreementParams", Value.fromBytes(value as Bytes));
    }
  }

  get deadline(): BigInt | null {
    let value = this.get("deadline");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set deadline(value: BigInt | null) {
    if (value === null) {
      this.unset("deadline");
    } else {
      this.set("deadline", Value.fromBigInt(value as BigInt));
    }
  }

  get data(): Bytes | null {
    let value = this.get("data");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set data(value: Bytes | null) {
    if (value === null) {
      this.unset("data");
    } else {
      this.set("data", Value.fromBytes(value as Bytes));
    }
  }

  get dataB58(): string | null {
    let value = this.get("dataB58");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set dataB58(value: string | null) {
    if (value === null) {
      this.unset("dataB58");
    } else {
      this.set("dataB58", Value.fromString(value as string));
    }
  }

  get dataSubmitted(): boolean {
    let value = this.get("dataSubmitted");
    return value.toBoolean();
  }

  set dataSubmitted(value: boolean) {
    this.set("dataSubmitted", Value.fromBoolean(value));
  }

  get paymentDeposited(): boolean {
    let value = this.get("paymentDeposited");
    return value.toBoolean();
  }

  set paymentDeposited(value: boolean) {
    this.set("paymentDeposited", Value.fromBoolean(value));
  }

  get stakeDeposited(): boolean {
    let value = this.get("stakeDeposited");
    return value.toBoolean();
  }

  set stakeDeposited(value: boolean) {
    this.set("stakeDeposited", Value.fromBoolean(value));
  }

  get finalized(): boolean {
    let value = this.get("finalized");
    return value.toBoolean();
  }

  set finalized(value: boolean) {
    this.set("finalized", Value.fromBoolean(value));
  }

  get cancelled(): boolean {
    let value = this.get("cancelled");
    return value.toBoolean();
  }

  set cancelled(value: boolean) {
    this.set("cancelled", Value.fromBoolean(value));
  }

  get metadata(): Bytes | null {
    let value = this.get("metadata");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set metadata(value: Bytes | null) {
    if (value === null) {
      this.unset("metadata");
    } else {
      this.set("metadata", Value.fromBytes(value as Bytes));
    }
  }

  get metadataB58(): string | null {
    let value = this.get("metadataB58");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set metadataB58(value: string | null) {
    if (value === null) {
      this.unset("metadataB58");
    } else {
      this.set("metadataB58", Value.fromString(value as string));
    }
  }

  get countdownGriefingAgreement(): string | null {
    let value = this.get("countdownGriefingAgreement");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set countdownGriefingAgreement(value: string | null) {
    if (value === null) {
      this.unset("countdownGriefingAgreement");
    } else {
      this.set("countdownGriefingAgreement", Value.fromString(value as string));
    }
  }

  get initMetadata(): Bytes | null {
    let value = this.get("initMetadata");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set initMetadata(value: Bytes | null) {
    if (value === null) {
      this.unset("initMetadata");
    } else {
      this.set("initMetadata", Value.fromBytes(value as Bytes));
    }
  }

  get initMetadataB58(): string | null {
    let value = this.get("initMetadataB58");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set initMetadataB58(value: string | null) {
    if (value === null) {
      this.unset("initMetadataB58");
    } else {
      this.set("initMetadataB58", Value.fromString(value as string));
    }
  }

  get initCallData(): Bytes | null {
    let value = this.get("initCallData");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set initCallData(value: Bytes | null) {
    if (value === null) {
      this.unset("initCallData");
    } else {
      this.set("initCallData", Value.fromBytes(value as Bytes));
    }
  }

  get createdTimestamp(): BigInt | null {
    let value = this.get("createdTimestamp");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set createdTimestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("createdTimestamp");
    } else {
      this.set("createdTimestamp", Value.fromBigInt(value as BigInt));
    }
  }
}

export class InstanceCreatedCountdownGriefingEscrowFactory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save InstanceCreatedCountdownGriefingEscrowFactory entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save InstanceCreatedCountdownGriefingEscrowFactory entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set(
      "InstanceCreatedCountdownGriefingEscrowFactory",
      id.toString(),
      this
    );
  }

  static load(
    id: string
  ): InstanceCreatedCountdownGriefingEscrowFactory | null {
    return store.get(
      "InstanceCreatedCountdownGriefingEscrowFactory",
      id
    ) as InstanceCreatedCountdownGriefingEscrowFactory | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get instance(): Bytes {
    let value = this.get("instance");
    return value.toBytes();
  }

  set instance(value: Bytes) {
    this.set("instance", Value.fromBytes(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get callData(): Bytes {
    let value = this.get("callData");
    return value.toBytes();
  }

  set callData(value: Bytes) {
    this.set("callData", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }
}

export class CancelledCountdownGriefingEscrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CancelledCountdownGriefingEscrow entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CancelledCountdownGriefingEscrow entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CancelledCountdownGriefingEscrow", id.toString(), this);
  }

  static load(id: string): CancelledCountdownGriefingEscrow | null {
    return store.get(
      "CancelledCountdownGriefingEscrow",
      id
    ) as CancelledCountdownGriefingEscrow | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }
}

export class DataSubmittedCountdownGriefingEscrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save DataSubmittedCountdownGriefingEscrow entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DataSubmittedCountdownGriefingEscrow entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DataSubmittedCountdownGriefingEscrow", id.toString(), this);
  }

  static load(id: string): DataSubmittedCountdownGriefingEscrow | null {
    return store.get(
      "DataSubmittedCountdownGriefingEscrow",
      id
    ) as DataSubmittedCountdownGriefingEscrow | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get data(): Bytes {
    let value = this.get("data");
    return value.toBytes();
  }

  set data(value: Bytes) {
    this.set("data", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }
}

export class DeadlineSetCountdownGriefingEscrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save DeadlineSetCountdownGriefingEscrow entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DeadlineSetCountdownGriefingEscrow entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DeadlineSetCountdownGriefingEscrow", id.toString(), this);
  }

  static load(id: string): DeadlineSetCountdownGriefingEscrow | null {
    return store.get(
      "DeadlineSetCountdownGriefingEscrow",
      id
    ) as DeadlineSetCountdownGriefingEscrow | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get deadline(): BigInt {
    let value = this.get("deadline");
    return value.toBigInt();
  }

  set deadline(value: BigInt) {
    this.set("deadline", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }
}

export class FinalizedCountdownGriefingEscrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save FinalizedCountdownGriefingEscrow entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save FinalizedCountdownGriefingEscrow entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("FinalizedCountdownGriefingEscrow", id.toString(), this);
  }

  static load(id: string): FinalizedCountdownGriefingEscrow | null {
    return store.get(
      "FinalizedCountdownGriefingEscrow",
      id
    ) as FinalizedCountdownGriefingEscrow | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get agreement(): Bytes {
    let value = this.get("agreement");
    return value.toBytes();
  }

  set agreement(value: Bytes) {
    this.set("agreement", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }
}

export class InitializedCountdownGriefingEscrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save InitializedCountdownGriefingEscrow entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save InitializedCountdownGriefingEscrow entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("InitializedCountdownGriefingEscrow", id.toString(), this);
  }

  static load(id: string): InitializedCountdownGriefingEscrow | null {
    return store.get(
      "InitializedCountdownGriefingEscrow",
      id
    ) as InitializedCountdownGriefingEscrow | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get operator(): Bytes {
    let value = this.get("operator");
    return value.toBytes();
  }

  set operator(value: Bytes) {
    this.set("operator", Value.fromBytes(value));
  }

  get buyer(): Bytes {
    let value = this.get("buyer");
    return value.toBytes();
  }

  set buyer(value: Bytes) {
    this.set("buyer", Value.fromBytes(value));
  }

  get seller(): Bytes {
    let value = this.get("seller");
    return value.toBytes();
  }

  set seller(value: Bytes) {
    this.set("seller", Value.fromBytes(value));
  }

  get paymentAmount(): BigInt {
    let value = this.get("paymentAmount");
    return value.toBigInt();
  }

  set paymentAmount(value: BigInt) {
    this.set("paymentAmount", Value.fromBigInt(value));
  }

  get stakeAmount(): BigInt {
    let value = this.get("stakeAmount");
    return value.toBigInt();
  }

  set stakeAmount(value: BigInt) {
    this.set("stakeAmount", Value.fromBigInt(value));
  }

  get countdownLength(): BigInt {
    let value = this.get("countdownLength");
    return value.toBigInt();
  }

  set countdownLength(value: BigInt) {
    this.set("countdownLength", Value.fromBigInt(value));
  }

  get metadata(): Bytes {
    let value = this.get("metadata");
    return value.toBytes();
  }

  set metadata(value: Bytes) {
    this.set("metadata", Value.fromBytes(value));
  }

  get metadataB58(): string {
    let value = this.get("metadataB58");
    return value.toString();
  }

  set metadataB58(value: string) {
    this.set("metadataB58", Value.fromString(value));
  }

  get agreementParams(): Bytes {
    let value = this.get("agreementParams");
    return value.toBytes();
  }

  set agreementParams(value: Bytes) {
    this.set("agreementParams", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }
}

export class MetadataSetCountdownGriefingEscrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save MetadataSetCountdownGriefingEscrow entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MetadataSetCountdownGriefingEscrow entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MetadataSetCountdownGriefingEscrow", id.toString(), this);
  }

  static load(id: string): MetadataSetCountdownGriefingEscrow | null {
    return store.get(
      "MetadataSetCountdownGriefingEscrow",
      id
    ) as MetadataSetCountdownGriefingEscrow | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get metadata(): Bytes {
    let value = this.get("metadata");
    return value.toBytes();
  }

  set metadata(value: Bytes) {
    this.set("metadata", Value.fromBytes(value));
  }

  get metadataB58(): string {
    let value = this.get("metadataB58");
    return value.toString();
  }

  set metadataB58(value: string) {
    this.set("metadataB58", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }
}

export class OperatorUpdatedCountdownGriefingEscrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save OperatorUpdatedCountdownGriefingEscrow entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save OperatorUpdatedCountdownGriefingEscrow entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("OperatorUpdatedCountdownGriefingEscrow", id.toString(), this);
  }

  static load(id: string): OperatorUpdatedCountdownGriefingEscrow | null {
    return store.get(
      "OperatorUpdatedCountdownGriefingEscrow",
      id
    ) as OperatorUpdatedCountdownGriefingEscrow | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get operator(): Bytes {
    let value = this.get("operator");
    return value.toBytes();
  }

  set operator(value: Bytes) {
    this.set("operator", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }
}

export class PaymentDepositedCountdownGriefingEscrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save PaymentDepositedCountdownGriefingEscrow entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PaymentDepositedCountdownGriefingEscrow entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PaymentDepositedCountdownGriefingEscrow", id.toString(), this);
  }

  static load(id: string): PaymentDepositedCountdownGriefingEscrow | null {
    return store.get(
      "PaymentDepositedCountdownGriefingEscrow",
      id
    ) as PaymentDepositedCountdownGriefingEscrow | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get buyer(): Bytes {
    let value = this.get("buyer");
    return value.toBytes();
  }

  set buyer(value: Bytes) {
    this.set("buyer", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }
}

export class StakeDepositedCountdownGriefingEscrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save StakeDepositedCountdownGriefingEscrow entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save StakeDepositedCountdownGriefingEscrow entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("StakeDepositedCountdownGriefingEscrow", id.toString(), this);
  }

  static load(id: string): StakeDepositedCountdownGriefingEscrow | null {
    return store.get(
      "StakeDepositedCountdownGriefingEscrow",
      id
    ) as StakeDepositedCountdownGriefingEscrow | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get seller(): Bytes {
    let value = this.get("seller");
    return value.toBytes();
  }

  set seller(value: Bytes) {
    this.set("seller", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }
}

export class CountdownGriefing extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CountdownGriefing entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CountdownGriefing entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CountdownGriefing", id.toString(), this);
  }

  static load(id: string): CountdownGriefing | null {
    return store.get("CountdownGriefing", id) as CountdownGriefing | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get creator(): Bytes | null {
    let value = this.get("creator");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set creator(value: Bytes | null) {
    if (value === null) {
      this.unset("creator");
    } else {
      this.set("creator", Value.fromBytes(value as Bytes));
    }
  }

  get operator(): Bytes | null {
    let value = this.get("operator");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set operator(value: Bytes | null) {
    if (value === null) {
      this.unset("operator");
    } else {
      this.set("operator", Value.fromBytes(value as Bytes));
    }
  }

  get staker(): Bytes | null {
    let value = this.get("staker");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set staker(value: Bytes | null) {
    if (value === null) {
      this.unset("staker");
    } else {
      this.set("staker", Value.fromBytes(value as Bytes));
    }
  }

  get currentStake(): BigInt | null {
    let value = this.get("currentStake");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set currentStake(value: BigInt | null) {
    if (value === null) {
      this.unset("currentStake");
    } else {
      this.set("currentStake", Value.fromBigInt(value as BigInt));
    }
  }

  get totalBurned(): BigInt | null {
    let value = this.get("totalBurned");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalBurned(value: BigInt | null) {
    if (value === null) {
      this.unset("totalBurned");
    } else {
      this.set("totalBurned", Value.fromBigInt(value as BigInt));
    }
  }

  get totalTaken(): BigInt | null {
    let value = this.get("totalTaken");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalTaken(value: BigInt | null) {
    if (value === null) {
      this.unset("totalTaken");
    } else {
      this.set("totalTaken", Value.fromBigInt(value as BigInt));
    }
  }

  get counterparty(): Bytes | null {
    let value = this.get("counterparty");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set counterparty(value: Bytes | null) {
    if (value === null) {
      this.unset("counterparty");
    } else {
      this.set("counterparty", Value.fromBytes(value as Bytes));
    }
  }

  get ratio(): BigInt | null {
    let value = this.get("ratio");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ratio(value: BigInt | null) {
    if (value === null) {
      this.unset("ratio");
    } else {
      this.set("ratio", Value.fromBigInt(value as BigInt));
    }
  }

  get ratioType(): i32 {
    let value = this.get("ratioType");
    return value.toI32();
  }

  set ratioType(value: i32) {
    this.set("ratioType", Value.fromI32(value));
  }

  get countdownLength(): BigInt | null {
    let value = this.get("countdownLength");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set countdownLength(value: BigInt | null) {
    if (value === null) {
      this.unset("countdownLength");
    } else {
      this.set("countdownLength", Value.fromBigInt(value as BigInt));
    }
  }

  get deadline(): BigInt | null {
    let value = this.get("deadline");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set deadline(value: BigInt | null) {
    if (value === null) {
      this.unset("deadline");
    } else {
      this.set("deadline", Value.fromBigInt(value as BigInt));
    }
  }

  get metadata(): Bytes | null {
    let value = this.get("metadata");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set metadata(value: Bytes | null) {
    if (value === null) {
      this.unset("metadata");
    } else {
      this.set("metadata", Value.fromBytes(value as Bytes));
    }
  }

  get metadataB58(): string | null {
    let value = this.get("metadataB58");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set metadataB58(value: string | null) {
    if (value === null) {
      this.unset("metadataB58");
    } else {
      this.set("metadataB58", Value.fromString(value as string));
    }
  }

  get initMetadata(): Bytes | null {
    let value = this.get("initMetadata");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set initMetadata(value: Bytes | null) {
    if (value === null) {
      this.unset("initMetadata");
    } else {
      this.set("initMetadata", Value.fromBytes(value as Bytes));
    }
  }

  get initMetadataB58(): string | null {
    let value = this.get("initMetadataB58");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set initMetadataB58(value: string | null) {
    if (value === null) {
      this.unset("initMetadataB58");
    } else {
      this.set("initMetadataB58", Value.fromString(value as string));
    }
  }

  get initCallData(): Bytes | null {
    let value = this.get("initCallData");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set initCallData(value: Bytes | null) {
    if (value === null) {
      this.unset("initCallData");
    } else {
      this.set("initCallData", Value.fromBytes(value as Bytes));
    }
  }

  get createdTimestamp(): BigInt | null {
    let value = this.get("createdTimestamp");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set createdTimestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("createdTimestamp");
    } else {
      this.set("createdTimestamp", Value.fromBigInt(value as BigInt));
    }
  }
}

export class InstanceCreatedCountdownGriefingFactory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save InstanceCreatedCountdownGriefingFactory entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save InstanceCreatedCountdownGriefingFactory entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("InstanceCreatedCountdownGriefingFactory", id.toString(), this);
  }

  static load(id: string): InstanceCreatedCountdownGriefingFactory | null {
    return store.get(
      "InstanceCreatedCountdownGriefingFactory",
      id
    ) as InstanceCreatedCountdownGriefingFactory | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get instance(): Bytes {
    let value = this.get("instance");
    return value.toBytes();
  }

  set instance(value: Bytes) {
    this.set("instance", Value.fromBytes(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get callData(): Bytes {
    let value = this.get("callData");
    return value.toBytes();
  }

  set callData(value: Bytes) {
    this.set("callData", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }
}

export class InitializedCountdownGriefing extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save InitializedCountdownGriefing entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save InitializedCountdownGriefing entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("InitializedCountdownGriefing", id.toString(), this);
  }

  static load(id: string): InitializedCountdownGriefing | null {
    return store.get(
      "InitializedCountdownGriefing",
      id
    ) as InitializedCountdownGriefing | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get operator(): Bytes {
    let value = this.get("operator");
    return value.toBytes();
  }

  set operator(value: Bytes) {
    this.set("operator", Value.fromBytes(value));
  }

  get staker(): Bytes {
    let value = this.get("staker");
    return value.toBytes();
  }

  set staker(value: Bytes) {
    this.set("staker", Value.fromBytes(value));
  }

  get counterparty(): Bytes {
    let value = this.get("counterparty");
    return value.toBytes();
  }

  set counterparty(value: Bytes) {
    this.set("counterparty", Value.fromBytes(value));
  }

  get ratio(): BigInt {
    let value = this.get("ratio");
    return value.toBigInt();
  }

  set ratio(value: BigInt) {
    this.set("ratio", Value.fromBigInt(value));
  }

  get ratioType(): i32 {
    let value = this.get("ratioType");
    return value.toI32();
  }

  set ratioType(value: i32) {
    this.set("ratioType", Value.fromI32(value));
  }

  get countdownLength(): BigInt {
    let value = this.get("countdownLength");
    return value.toBigInt();
  }

  set countdownLength(value: BigInt) {
    this.set("countdownLength", Value.fromBigInt(value));
  }

  get metadata(): Bytes {
    let value = this.get("metadata");
    return value.toBytes();
  }

  set metadata(value: Bytes) {
    this.set("metadata", Value.fromBytes(value));
  }

  get metadataB58(): string {
    let value = this.get("metadataB58");
    return value.toString();
  }

  set metadataB58(value: string) {
    this.set("metadataB58", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }
}

export class RatioSetCountdownGriefing extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save RatioSetCountdownGriefing entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RatioSetCountdownGriefing entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RatioSetCountdownGriefing", id.toString(), this);
  }

  static load(id: string): RatioSetCountdownGriefing | null {
    return store.get(
      "RatioSetCountdownGriefing",
      id
    ) as RatioSetCountdownGriefing | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get staker(): Bytes {
    let value = this.get("staker");
    return value.toBytes();
  }

  set staker(value: Bytes) {
    this.set("staker", Value.fromBytes(value));
  }

  get ratio(): BigInt {
    let value = this.get("ratio");
    return value.toBigInt();
  }

  set ratio(value: BigInt) {
    this.set("ratio", Value.fromBigInt(value));
  }

  get ratioType(): i32 {
    let value = this.get("ratioType");
    return value.toI32();
  }

  set ratioType(value: i32) {
    this.set("ratioType", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }
}

export class GriefedCountdownGriefing extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save GriefedCountdownGriefing entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save GriefedCountdownGriefing entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("GriefedCountdownGriefing", id.toString(), this);
  }

  static load(id: string): GriefedCountdownGriefing | null {
    return store.get(
      "GriefedCountdownGriefing",
      id
    ) as GriefedCountdownGriefing | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get punisher(): Bytes {
    let value = this.get("punisher");
    return value.toBytes();
  }

  set punisher(value: Bytes) {
    this.set("punisher", Value.fromBytes(value));
  }

  get staker(): Bytes {
    let value = this.get("staker");
    return value.toBytes();
  }

  set staker(value: Bytes) {
    this.set("staker", Value.fromBytes(value));
  }

  get punishment(): BigInt {
    let value = this.get("punishment");
    return value.toBigInt();
  }

  set punishment(value: BigInt) {
    this.set("punishment", Value.fromBigInt(value));
  }

  get cost(): BigInt {
    let value = this.get("cost");
    return value.toBigInt();
  }

  set cost(value: BigInt) {
    this.set("cost", Value.fromBigInt(value));
  }

  get message(): Bytes {
    let value = this.get("message");
    return value.toBytes();
  }

  set message(value: Bytes) {
    this.set("message", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }
}

export class LengthSetCountdownGriefing extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save LengthSetCountdownGriefing entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LengthSetCountdownGriefing entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LengthSetCountdownGriefing", id.toString(), this);
  }

  static load(id: string): LengthSetCountdownGriefing | null {
    return store.get(
      "LengthSetCountdownGriefing",
      id
    ) as LengthSetCountdownGriefing | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get length(): BigInt {
    let value = this.get("length");
    return value.toBigInt();
  }

  set length(value: BigInt) {
    this.set("length", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }
}

export class OperatorUpdatedCountdownGriefing extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save OperatorUpdatedCountdownGriefing entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save OperatorUpdatedCountdownGriefing entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("OperatorUpdatedCountdownGriefing", id.toString(), this);
  }

  static load(id: string): OperatorUpdatedCountdownGriefing | null {
    return store.get(
      "OperatorUpdatedCountdownGriefing",
      id
    ) as OperatorUpdatedCountdownGriefing | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get operator(): Bytes {
    let value = this.get("operator");
    return value.toBytes();
  }

  set operator(value: Bytes) {
    this.set("operator", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }
}

export class MetadataSetCountdownGriefing extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save MetadataSetCountdownGriefing entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MetadataSetCountdownGriefing entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MetadataSetCountdownGriefing", id.toString(), this);
  }

  static load(id: string): MetadataSetCountdownGriefing | null {
    return store.get(
      "MetadataSetCountdownGriefing",
      id
    ) as MetadataSetCountdownGriefing | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get metadata(): Bytes {
    let value = this.get("metadata");
    return value.toBytes();
  }

  set metadata(value: Bytes) {
    this.set("metadata", Value.fromBytes(value));
  }

  get metadataB58(): string {
    let value = this.get("metadataB58");
    return value.toString();
  }

  set metadataB58(value: string) {
    this.set("metadataB58", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }
}

export class StakeAddedCountdownGriefing extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save StakeAddedCountdownGriefing entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save StakeAddedCountdownGriefing entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("StakeAddedCountdownGriefing", id.toString(), this);
  }

  static load(id: string): StakeAddedCountdownGriefing | null {
    return store.get(
      "StakeAddedCountdownGriefing",
      id
    ) as StakeAddedCountdownGriefing | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get staker(): Bytes {
    let value = this.get("staker");
    return value.toBytes();
  }

  set staker(value: Bytes) {
    this.set("staker", Value.fromBytes(value));
  }

  get funder(): Bytes {
    let value = this.get("funder");
    return value.toBytes();
  }

  set funder(value: Bytes) {
    this.set("funder", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }
}

export class StakeTakenCountdownGriefing extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save StakeTakenCountdownGriefing entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save StakeTakenCountdownGriefing entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("StakeTakenCountdownGriefing", id.toString(), this);
  }

  static load(id: string): StakeTakenCountdownGriefing | null {
    return store.get(
      "StakeTakenCountdownGriefing",
      id
    ) as StakeTakenCountdownGriefing | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get staker(): Bytes {
    let value = this.get("staker");
    return value.toBytes();
  }

  set staker(value: Bytes) {
    this.set("staker", Value.fromBytes(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    return value.toBytes();
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }
}

export class StakeBurnedCountdownGriefing extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save StakeBurnedCountdownGriefing entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save StakeBurnedCountdownGriefing entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("StakeBurnedCountdownGriefing", id.toString(), this);
  }

  static load(id: string): StakeBurnedCountdownGriefing | null {
    return store.get(
      "StakeBurnedCountdownGriefing",
      id
    ) as StakeBurnedCountdownGriefing | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get staker(): Bytes {
    let value = this.get("staker");
    return value.toBytes();
  }

  set staker(value: Bytes) {
    this.set("staker", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }
}

export class DeadlineSetCountdownGriefing extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save DeadlineSetCountdownGriefing entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DeadlineSetCountdownGriefing entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DeadlineSetCountdownGriefing", id.toString(), this);
  }

  static load(id: string): DeadlineSetCountdownGriefing | null {
    return store.get(
      "DeadlineSetCountdownGriefing",
      id
    ) as DeadlineSetCountdownGriefing | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get deadline(): BigInt {
    let value = this.get("deadline");
    return value.toBigInt();
  }

  set deadline(value: BigInt) {
    this.set("deadline", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }
}

export class SimpleGriefing extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SimpleGriefing entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SimpleGriefing entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SimpleGriefing", id.toString(), this);
  }

  static load(id: string): SimpleGriefing | null {
    return store.get("SimpleGriefing", id) as SimpleGriefing | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get creator(): Bytes | null {
    let value = this.get("creator");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set creator(value: Bytes | null) {
    if (value === null) {
      this.unset("creator");
    } else {
      this.set("creator", Value.fromBytes(value as Bytes));
    }
  }

  get operator(): Bytes | null {
    let value = this.get("operator");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set operator(value: Bytes | null) {
    if (value === null) {
      this.unset("operator");
    } else {
      this.set("operator", Value.fromBytes(value as Bytes));
    }
  }

  get staker(): Bytes | null {
    let value = this.get("staker");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set staker(value: Bytes | null) {
    if (value === null) {
      this.unset("staker");
    } else {
      this.set("staker", Value.fromBytes(value as Bytes));
    }
  }

  get currentStake(): BigInt | null {
    let value = this.get("currentStake");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set currentStake(value: BigInt | null) {
    if (value === null) {
      this.unset("currentStake");
    } else {
      this.set("currentStake", Value.fromBigInt(value as BigInt));
    }
  }

  get totalBurned(): BigInt | null {
    let value = this.get("totalBurned");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalBurned(value: BigInt | null) {
    if (value === null) {
      this.unset("totalBurned");
    } else {
      this.set("totalBurned", Value.fromBigInt(value as BigInt));
    }
  }

  get totalTaken(): BigInt | null {
    let value = this.get("totalTaken");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalTaken(value: BigInt | null) {
    if (value === null) {
      this.unset("totalTaken");
    } else {
      this.set("totalTaken", Value.fromBigInt(value as BigInt));
    }
  }

  get counterparty(): Bytes | null {
    let value = this.get("counterparty");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set counterparty(value: Bytes | null) {
    if (value === null) {
      this.unset("counterparty");
    } else {
      this.set("counterparty", Value.fromBytes(value as Bytes));
    }
  }

  get ratio(): BigInt | null {
    let value = this.get("ratio");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ratio(value: BigInt | null) {
    if (value === null) {
      this.unset("ratio");
    } else {
      this.set("ratio", Value.fromBigInt(value as BigInt));
    }
  }

  get ratioType(): i32 {
    let value = this.get("ratioType");
    return value.toI32();
  }

  set ratioType(value: i32) {
    this.set("ratioType", Value.fromI32(value));
  }

  get metadata(): Bytes | null {
    let value = this.get("metadata");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set metadata(value: Bytes | null) {
    if (value === null) {
      this.unset("metadata");
    } else {
      this.set("metadata", Value.fromBytes(value as Bytes));
    }
  }

  get metadataB58(): string | null {
    let value = this.get("metadataB58");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set metadataB58(value: string | null) {
    if (value === null) {
      this.unset("metadataB58");
    } else {
      this.set("metadataB58", Value.fromString(value as string));
    }
  }

  get initMetadata(): Bytes | null {
    let value = this.get("initMetadata");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set initMetadata(value: Bytes | null) {
    if (value === null) {
      this.unset("initMetadata");
    } else {
      this.set("initMetadata", Value.fromBytes(value as Bytes));
    }
  }

  get initMetadataB58(): string | null {
    let value = this.get("initMetadataB58");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set initMetadataB58(value: string | null) {
    if (value === null) {
      this.unset("initMetadataB58");
    } else {
      this.set("initMetadataB58", Value.fromString(value as string));
    }
  }

  get initCallData(): Bytes | null {
    let value = this.get("initCallData");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set initCallData(value: Bytes | null) {
    if (value === null) {
      this.unset("initCallData");
    } else {
      this.set("initCallData", Value.fromBytes(value as Bytes));
    }
  }

  get createdTimestamp(): BigInt | null {
    let value = this.get("createdTimestamp");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set createdTimestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("createdTimestamp");
    } else {
      this.set("createdTimestamp", Value.fromBigInt(value as BigInt));
    }
  }
}

export class InstanceCreatedSimpleGriefingFactory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save InstanceCreatedSimpleGriefingFactory entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save InstanceCreatedSimpleGriefingFactory entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("InstanceCreatedSimpleGriefingFactory", id.toString(), this);
  }

  static load(id: string): InstanceCreatedSimpleGriefingFactory | null {
    return store.get(
      "InstanceCreatedSimpleGriefingFactory",
      id
    ) as InstanceCreatedSimpleGriefingFactory | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get instance(): Bytes {
    let value = this.get("instance");
    return value.toBytes();
  }

  set instance(value: Bytes) {
    this.set("instance", Value.fromBytes(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get callData(): Bytes {
    let value = this.get("callData");
    return value.toBytes();
  }

  set callData(value: Bytes) {
    this.set("callData", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }
}

export class GriefedSimpleGriefing extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save GriefedSimpleGriefing entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save GriefedSimpleGriefing entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("GriefedSimpleGriefing", id.toString(), this);
  }

  static load(id: string): GriefedSimpleGriefing | null {
    return store.get(
      "GriefedSimpleGriefing",
      id
    ) as GriefedSimpleGriefing | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get punisher(): Bytes {
    let value = this.get("punisher");
    return value.toBytes();
  }

  set punisher(value: Bytes) {
    this.set("punisher", Value.fromBytes(value));
  }

  get staker(): Bytes {
    let value = this.get("staker");
    return value.toBytes();
  }

  set staker(value: Bytes) {
    this.set("staker", Value.fromBytes(value));
  }

  get punishment(): BigInt {
    let value = this.get("punishment");
    return value.toBigInt();
  }

  set punishment(value: BigInt) {
    this.set("punishment", Value.fromBigInt(value));
  }

  get cost(): BigInt {
    let value = this.get("cost");
    return value.toBigInt();
  }

  set cost(value: BigInt) {
    this.set("cost", Value.fromBigInt(value));
  }

  get message(): Bytes {
    let value = this.get("message");
    return value.toBytes();
  }

  set message(value: Bytes) {
    this.set("message", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }
}

export class InitializedSimpleGriefing extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save InitializedSimpleGriefing entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save InitializedSimpleGriefing entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("InitializedSimpleGriefing", id.toString(), this);
  }

  static load(id: string): InitializedSimpleGriefing | null {
    return store.get(
      "InitializedSimpleGriefing",
      id
    ) as InitializedSimpleGriefing | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get operator(): Bytes {
    let value = this.get("operator");
    return value.toBytes();
  }

  set operator(value: Bytes) {
    this.set("operator", Value.fromBytes(value));
  }

  get staker(): Bytes {
    let value = this.get("staker");
    return value.toBytes();
  }

  set staker(value: Bytes) {
    this.set("staker", Value.fromBytes(value));
  }

  get counterparty(): Bytes {
    let value = this.get("counterparty");
    return value.toBytes();
  }

  set counterparty(value: Bytes) {
    this.set("counterparty", Value.fromBytes(value));
  }

  get ratio(): BigInt {
    let value = this.get("ratio");
    return value.toBigInt();
  }

  set ratio(value: BigInt) {
    this.set("ratio", Value.fromBigInt(value));
  }

  get ratioType(): i32 {
    let value = this.get("ratioType");
    return value.toI32();
  }

  set ratioType(value: i32) {
    this.set("ratioType", Value.fromI32(value));
  }

  get metadata(): Bytes {
    let value = this.get("metadata");
    return value.toBytes();
  }

  set metadata(value: Bytes) {
    this.set("metadata", Value.fromBytes(value));
  }

  get metadataB58(): string {
    let value = this.get("metadataB58");
    return value.toString();
  }

  set metadataB58(value: string) {
    this.set("metadataB58", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }
}

export class MetadataSetSimpleGriefing extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save MetadataSetSimpleGriefing entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MetadataSetSimpleGriefing entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MetadataSetSimpleGriefing", id.toString(), this);
  }

  static load(id: string): MetadataSetSimpleGriefing | null {
    return store.get(
      "MetadataSetSimpleGriefing",
      id
    ) as MetadataSetSimpleGriefing | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get metadata(): Bytes {
    let value = this.get("metadata");
    return value.toBytes();
  }

  set metadata(value: Bytes) {
    this.set("metadata", Value.fromBytes(value));
  }

  get metadataB58(): string {
    let value = this.get("metadataB58");
    return value.toString();
  }

  set metadataB58(value: string) {
    this.set("metadataB58", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }
}

export class OperatorUpdatedSimpleGriefing extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save OperatorUpdatedSimpleGriefing entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save OperatorUpdatedSimpleGriefing entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("OperatorUpdatedSimpleGriefing", id.toString(), this);
  }

  static load(id: string): OperatorUpdatedSimpleGriefing | null {
    return store.get(
      "OperatorUpdatedSimpleGriefing",
      id
    ) as OperatorUpdatedSimpleGriefing | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get operator(): Bytes {
    let value = this.get("operator");
    return value.toBytes();
  }

  set operator(value: Bytes) {
    this.set("operator", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }
}

export class RatioSetSimpleGriefing extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save RatioSetSimpleGriefing entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RatioSetSimpleGriefing entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RatioSetSimpleGriefing", id.toString(), this);
  }

  static load(id: string): RatioSetSimpleGriefing | null {
    return store.get(
      "RatioSetSimpleGriefing",
      id
    ) as RatioSetSimpleGriefing | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get staker(): Bytes {
    let value = this.get("staker");
    return value.toBytes();
  }

  set staker(value: Bytes) {
    this.set("staker", Value.fromBytes(value));
  }

  get ratio(): BigInt {
    let value = this.get("ratio");
    return value.toBigInt();
  }

  set ratio(value: BigInt) {
    this.set("ratio", Value.fromBigInt(value));
  }

  get ratioType(): i32 {
    let value = this.get("ratioType");
    return value.toI32();
  }

  set ratioType(value: i32) {
    this.set("ratioType", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }
}

export class StakeAddedSimpleGriefing extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save StakeAddedSimpleGriefing entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save StakeAddedSimpleGriefing entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("StakeAddedSimpleGriefing", id.toString(), this);
  }

  static load(id: string): StakeAddedSimpleGriefing | null {
    return store.get(
      "StakeAddedSimpleGriefing",
      id
    ) as StakeAddedSimpleGriefing | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get staker(): Bytes {
    let value = this.get("staker");
    return value.toBytes();
  }

  set staker(value: Bytes) {
    this.set("staker", Value.fromBytes(value));
  }

  get funder(): Bytes {
    let value = this.get("funder");
    return value.toBytes();
  }

  set funder(value: Bytes) {
    this.set("funder", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }
}

export class StakeBurnedSimpleGriefing extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save StakeBurnedSimpleGriefing entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save StakeBurnedSimpleGriefing entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("StakeBurnedSimpleGriefing", id.toString(), this);
  }

  static load(id: string): StakeBurnedSimpleGriefing | null {
    return store.get(
      "StakeBurnedSimpleGriefing",
      id
    ) as StakeBurnedSimpleGriefing | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get staker(): Bytes {
    let value = this.get("staker");
    return value.toBytes();
  }

  set staker(value: Bytes) {
    this.set("staker", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }
}

export class StakeTakenSimpleGriefing extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save StakeTakenSimpleGriefing entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save StakeTakenSimpleGriefing entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("StakeTakenSimpleGriefing", id.toString(), this);
  }

  static load(id: string): StakeTakenSimpleGriefing | null {
    return store.get(
      "StakeTakenSimpleGriefing",
      id
    ) as StakeTakenSimpleGriefing | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get staker(): Bytes {
    let value = this.get("staker");
    return value.toBytes();
  }

  set staker(value: Bytes) {
    this.set("staker", Value.fromBytes(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    return value.toBytes();
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }
}

export class Feed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Feed entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Feed entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Feed", id.toString(), this);
  }

  static load(id: string): Feed | null {
    return store.get("Feed", id) as Feed | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get creator(): Bytes | null {
    let value = this.get("creator");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set creator(value: Bytes | null) {
    if (value === null) {
      this.unset("creator");
    } else {
      this.set("creator", Value.fromBytes(value as Bytes));
    }
  }

  get operator(): Bytes | null {
    let value = this.get("operator");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set operator(value: Bytes | null) {
    if (value === null) {
      this.unset("operator");
    } else {
      this.set("operator", Value.fromBytes(value as Bytes));
    }
  }

  get metadata(): Bytes | null {
    let value = this.get("metadata");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set metadata(value: Bytes | null) {
    if (value === null) {
      this.unset("metadata");
    } else {
      this.set("metadata", Value.fromBytes(value as Bytes));
    }
  }

  get metadataB58(): string | null {
    let value = this.get("metadataB58");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set metadataB58(value: string | null) {
    if (value === null) {
      this.unset("metadataB58");
    } else {
      this.set("metadataB58", Value.fromString(value as string));
    }
  }

  get hashes(): Array<Bytes> | null {
    let value = this.get("hashes");
    if (value === null) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set hashes(value: Array<Bytes> | null) {
    if (value === null) {
      this.unset("hashes");
    } else {
      this.set("hashes", Value.fromBytesArray(value as Array<Bytes>));
    }
  }

  get initMetadata(): Bytes | null {
    let value = this.get("initMetadata");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set initMetadata(value: Bytes | null) {
    if (value === null) {
      this.unset("initMetadata");
    } else {
      this.set("initMetadata", Value.fromBytes(value as Bytes));
    }
  }

  get initMetadataB58(): string | null {
    let value = this.get("initMetadataB58");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set initMetadataB58(value: string | null) {
    if (value === null) {
      this.unset("initMetadataB58");
    } else {
      this.set("initMetadataB58", Value.fromString(value as string));
    }
  }

  get initCallData(): Bytes | null {
    let value = this.get("initCallData");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set initCallData(value: Bytes | null) {
    if (value === null) {
      this.unset("initCallData");
    } else {
      this.set("initCallData", Value.fromBytes(value as Bytes));
    }
  }

  get createdTimestamp(): BigInt | null {
    let value = this.get("createdTimestamp");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set createdTimestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("createdTimestamp");
    } else {
      this.set("createdTimestamp", Value.fromBigInt(value as BigInt));
    }
  }
}

export class InstanceCreatedFeedFactory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save InstanceCreatedFeedFactory entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save InstanceCreatedFeedFactory entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("InstanceCreatedFeedFactory", id.toString(), this);
  }

  static load(id: string): InstanceCreatedFeedFactory | null {
    return store.get(
      "InstanceCreatedFeedFactory",
      id
    ) as InstanceCreatedFeedFactory | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get instance(): Bytes {
    let value = this.get("instance");
    return value.toBytes();
  }

  set instance(value: Bytes) {
    this.set("instance", Value.fromBytes(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get callData(): Bytes {
    let value = this.get("callData");
    return value.toBytes();
  }

  set callData(value: Bytes) {
    this.set("callData", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }
}

export class InitializedFeed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save InitializedFeed entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save InitializedFeed entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("InitializedFeed", id.toString(), this);
  }

  static load(id: string): InitializedFeed | null {
    return store.get("InitializedFeed", id) as InitializedFeed | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get operator(): Bytes {
    let value = this.get("operator");
    return value.toBytes();
  }

  set operator(value: Bytes) {
    this.set("operator", Value.fromBytes(value));
  }

  get proofHash(): Bytes {
    let value = this.get("proofHash");
    return value.toBytes();
  }

  set proofHash(value: Bytes) {
    this.set("proofHash", Value.fromBytes(value));
  }

  get metadata(): Bytes {
    let value = this.get("metadata");
    return value.toBytes();
  }

  set metadata(value: Bytes) {
    this.set("metadata", Value.fromBytes(value));
  }

  get metadataB58(): string {
    let value = this.get("metadataB58");
    return value.toString();
  }

  set metadataB58(value: string) {
    this.set("metadataB58", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }
}

export class HashSubmittedFeed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save HashSubmittedFeed entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save HashSubmittedFeed entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("HashSubmittedFeed", id.toString(), this);
  }

  static load(id: string): HashSubmittedFeed | null {
    return store.get("HashSubmittedFeed", id) as HashSubmittedFeed | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    return value.toBytes();
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }
}

export class OperatorUpdatedFeed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save OperatorUpdatedFeed entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save OperatorUpdatedFeed entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("OperatorUpdatedFeed", id.toString(), this);
  }

  static load(id: string): OperatorUpdatedFeed | null {
    return store.get("OperatorUpdatedFeed", id) as OperatorUpdatedFeed | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get operator(): Bytes {
    let value = this.get("operator");
    return value.toBytes();
  }

  set operator(value: Bytes) {
    this.set("operator", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }
}

export class MetadataSetFeed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MetadataSetFeed entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MetadataSetFeed entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MetadataSetFeed", id.toString(), this);
  }

  static load(id: string): MetadataSetFeed | null {
    return store.get("MetadataSetFeed", id) as MetadataSetFeed | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get metadata(): Bytes {
    let value = this.get("metadata");
    return value.toBytes();
  }

  set metadata(value: Bytes) {
    this.set("metadata", Value.fromBytes(value));
  }

  get metadataB58(): string {
    let value = this.get("metadataB58");
    return value.toString();
  }

  set metadataB58(value: string) {
    this.set("metadataB58", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }
}
