// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class Cancelled extends EthereumEvent {
  get params(): Cancelled__Params {
    return new Cancelled__Params(this);
  }
}

export class Cancelled__Params {
  _event: Cancelled;

  constructor(event: Cancelled) {
    this._event = event;
  }
}

export class DataSubmitted extends EthereumEvent {
  get params(): DataSubmitted__Params {
    return new DataSubmitted__Params(this);
  }
}

export class DataSubmitted__Params {
  _event: DataSubmitted;

  constructor(event: DataSubmitted) {
    this._event = event;
  }

  get data(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class DeadlineSet extends EthereumEvent {
  get params(): DeadlineSet__Params {
    return new DeadlineSet__Params(this);
  }
}

export class DeadlineSet__Params {
  _event: DeadlineSet;

  constructor(event: DeadlineSet) {
    this._event = event;
  }

  get deadline(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class DepositDecreased extends EthereumEvent {
  get params(): DepositDecreased__Params {
    return new DepositDecreased__Params(this);
  }
}

export class DepositDecreased__Params {
  _event: DepositDecreased;

  constructor(event: DepositDecreased) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newDeposit(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DepositIncreased extends EthereumEvent {
  get params(): DepositIncreased__Params {
    return new DepositIncreased__Params(this);
  }
}

export class DepositIncreased__Params {
  _event: DepositIncreased;

  constructor(event: DepositIncreased) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newDeposit(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Finalized extends EthereumEvent {
  get params(): Finalized__Params {
    return new Finalized__Params(this);
  }
}

export class Finalized__Params {
  _event: Finalized;

  constructor(event: Finalized) {
    this._event = event;
  }

  get agreement(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Initialized extends EthereumEvent {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get buyer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get seller(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get paymentAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get stakeAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get countdownLength(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get metadata(): Bytes {
    return this._event.parameters[6].value.toBytes();
  }

  get agreementParams(): Bytes {
    return this._event.parameters[7].value.toBytes();
  }
}

export class LengthSet extends EthereumEvent {
  get params(): LengthSet__Params {
    return new LengthSet__Params(this);
  }
}

export class LengthSet__Params {
  _event: LengthSet;

  constructor(event: LengthSet) {
    this._event = event;
  }

  get length(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class MetadataSet extends EthereumEvent {
  get params(): MetadataSet__Params {
    return new MetadataSet__Params(this);
  }
}

export class MetadataSet__Params {
  _event: MetadataSet;

  constructor(event: MetadataSet) {
    this._event = event;
  }

  get metadata(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class OperatorUpdated extends EthereumEvent {
  get params(): OperatorUpdated__Params {
    return new OperatorUpdated__Params(this);
  }
}

export class OperatorUpdated__Params {
  _event: OperatorUpdated;

  constructor(event: OperatorUpdated) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PaymentDeposited extends EthereumEvent {
  get params(): PaymentDeposited__Params {
    return new PaymentDeposited__Params(this);
  }
}

export class PaymentDeposited__Params {
  _event: PaymentDeposited;

  constructor(event: PaymentDeposited) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StakeAdded extends EthereumEvent {
  get params(): StakeAdded__Params {
    return new StakeAdded__Params(this);
  }
}

export class StakeAdded__Params {
  _event: StakeAdded;

  constructor(event: StakeAdded) {
    this._event = event;
  }

  get staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get funder(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class StakeBurned extends EthereumEvent {
  get params(): StakeBurned__Params {
    return new StakeBurned__Params(this);
  }
}

export class StakeBurned__Params {
  _event: StakeBurned;

  constructor(event: StakeBurned) {
    this._event = event;
  }

  get staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StakeDeposited extends EthereumEvent {
  get params(): StakeDeposited__Params {
    return new StakeDeposited__Params(this);
  }
}

export class StakeDeposited__Params {
  _event: StakeDeposited;

  constructor(event: StakeDeposited) {
    this._event = event;
  }

  get seller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StakeTaken extends EthereumEvent {
  get params(): StakeTaken__Params {
    return new StakeTaken__Params(this);
  }
}

export class StakeTaken__Params {
  _event: StakeTaken;

  constructor(event: StakeTaken) {
    this._event = event;
  }

  get staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CountdownGriefingEscrow__getDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: i32;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: i32,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    map.set("value3", EthereumValue.fromI32(this.value3));
    map.set("value4", EthereumValue.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class CountdownGriefingEscrow extends SmartContract {
  static bind(address: Address): CountdownGriefingEscrow {
    return new CountdownGriefingEscrow("CountdownGriefingEscrow", address);
  }

  getBuyer(): Address {
    let result = super.call("getBuyer", []);

    return result[0].toAddress();
  }

  try_getBuyer(): CallResult<Address> {
    let result = super.tryCall("getBuyer", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getCountdownStatus(): i32 {
    let result = super.call("getCountdownStatus", []);

    return result[0].toI32();
  }

  try_getCountdownStatus(): CallResult<i32> {
    let result = super.tryCall("getCountdownStatus", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  getCreator(): Address {
    let result = super.call("getCreator", []);

    return result[0].toAddress();
  }

  try_getCreator(): CallResult<Address> {
    let result = super.tryCall("getCreator", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getData(): CountdownGriefingEscrow__getDataResult {
    let result = super.call("getData", []);

    return new CountdownGriefingEscrow__getDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toI32(),
      result[4].toBigInt()
    );
  }

  try_getData(): CallResult<CountdownGriefingEscrow__getDataResult> {
    let result = super.tryCall("getData", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new CountdownGriefingEscrow__getDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toI32(),
        value[4].toBigInt()
      )
    );
  }

  getDeadline(): BigInt {
    let result = super.call("getDeadline", []);

    return result[0].toBigInt();
  }

  try_getDeadline(): CallResult<BigInt> {
    let result = super.tryCall("getDeadline", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getDeadlineStatus(): i32 {
    let result = super.call("getDeadlineStatus", []);

    return result[0].toI32();
  }

  try_getDeadlineStatus(): CallResult<i32> {
    let result = super.tryCall("getDeadlineStatus", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  getDeposit(user: Address): BigInt {
    let result = super.call("getDeposit", [EthereumValue.fromAddress(user)]);

    return result[0].toBigInt();
  }

  try_getDeposit(user: Address): CallResult<BigInt> {
    let result = super.tryCall("getDeposit", [EthereumValue.fromAddress(user)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getEscrowStatus(): i32 {
    let result = super.call("getEscrowStatus", []);

    return result[0].toI32();
  }

  try_getEscrowStatus(): CallResult<i32> {
    let result = super.tryCall("getEscrowStatus", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  getFactory(): Address {
    let result = super.call("getFactory", []);

    return result[0].toAddress();
  }

  try_getFactory(): CallResult<Address> {
    let result = super.tryCall("getFactory", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getLength(): BigInt {
    let result = super.call("getLength", []);

    return result[0].toBigInt();
  }

  try_getLength(): CallResult<BigInt> {
    let result = super.tryCall("getLength", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getOperator(): Address {
    let result = super.call("getOperator", []);

    return result[0].toAddress();
  }

  try_getOperator(): CallResult<Address> {
    let result = super.tryCall("getOperator", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getSeller(): Address {
    let result = super.call("getSeller", []);

    return result[0].toAddress();
  }

  try_getSeller(): CallResult<Address> {
    let result = super.tryCall("getSeller", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getStake(staker: Address): BigInt {
    let result = super.call("getStake", [EthereumValue.fromAddress(staker)]);

    return result[0].toBigInt();
  }

  try_getStake(staker: Address): CallResult<BigInt> {
    let result = super.tryCall("getStake", [EthereumValue.fromAddress(staker)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getTimeRemaining(): BigInt {
    let result = super.call("getTimeRemaining", []);

    return result[0].toBigInt();
  }

  try_getTimeRemaining(): CallResult<BigInt> {
    let result = super.tryCall("getTimeRemaining", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getToken(): Address {
    let result = super.call("getToken", []);

    return result[0].toAddress();
  }

  try_getToken(): CallResult<Address> {
    let result = super.tryCall("getToken", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }
}

export class CancelCall extends EthereumCall {
  get inputs(): CancelCall__Inputs {
    return new CancelCall__Inputs(this);
  }

  get outputs(): CancelCall__Outputs {
    return new CancelCall__Outputs(this);
  }
}

export class CancelCall__Inputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }
}

export class CancelCall__Outputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }
}

export class DepositPaymentCall extends EthereumCall {
  get inputs(): DepositPaymentCall__Inputs {
    return new DepositPaymentCall__Inputs(this);
  }

  get outputs(): DepositPaymentCall__Outputs {
    return new DepositPaymentCall__Outputs(this);
  }
}

export class DepositPaymentCall__Inputs {
  _call: DepositPaymentCall;

  constructor(call: DepositPaymentCall) {
    this._call = call;
  }
}

export class DepositPaymentCall__Outputs {
  _call: DepositPaymentCall;

  constructor(call: DepositPaymentCall) {
    this._call = call;
  }
}

export class DepositStakeCall extends EthereumCall {
  get inputs(): DepositStakeCall__Inputs {
    return new DepositStakeCall__Inputs(this);
  }

  get outputs(): DepositStakeCall__Outputs {
    return new DepositStakeCall__Outputs(this);
  }
}

export class DepositStakeCall__Inputs {
  _call: DepositStakeCall;

  constructor(call: DepositStakeCall) {
    this._call = call;
  }
}

export class DepositStakeCall__Outputs {
  _call: DepositStakeCall;

  constructor(call: DepositStakeCall) {
    this._call = call;
  }
}

export class FinalizeCall extends EthereumCall {
  get inputs(): FinalizeCall__Inputs {
    return new FinalizeCall__Inputs(this);
  }

  get outputs(): FinalizeCall__Outputs {
    return new FinalizeCall__Outputs(this);
  }
}

export class FinalizeCall__Inputs {
  _call: FinalizeCall;

  constructor(call: FinalizeCall) {
    this._call = call;
  }
}

export class FinalizeCall__Outputs {
  _call: FinalizeCall;

  constructor(call: FinalizeCall) {
    this._call = call;
  }
}

export class InitializeCall extends EthereumCall {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get buyer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get seller(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get paymentAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get stakeAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get escrowCountdown(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get metadata(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get agreementParams(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RenounceOperatorCall extends EthereumCall {
  get inputs(): RenounceOperatorCall__Inputs {
    return new RenounceOperatorCall__Inputs(this);
  }

  get outputs(): RenounceOperatorCall__Outputs {
    return new RenounceOperatorCall__Outputs(this);
  }
}

export class RenounceOperatorCall__Inputs {
  _call: RenounceOperatorCall;

  constructor(call: RenounceOperatorCall) {
    this._call = call;
  }
}

export class RenounceOperatorCall__Outputs {
  _call: RenounceOperatorCall;

  constructor(call: RenounceOperatorCall) {
    this._call = call;
  }
}

export class SetMetadataCall extends EthereumCall {
  get inputs(): SetMetadataCall__Inputs {
    return new SetMetadataCall__Inputs(this);
  }

  get outputs(): SetMetadataCall__Outputs {
    return new SetMetadataCall__Outputs(this);
  }
}

export class SetMetadataCall__Inputs {
  _call: SetMetadataCall;

  constructor(call: SetMetadataCall) {
    this._call = call;
  }

  get metadata(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SetMetadataCall__Outputs {
  _call: SetMetadataCall;

  constructor(call: SetMetadataCall) {
    this._call = call;
  }
}

export class SubmitDataCall extends EthereumCall {
  get inputs(): SubmitDataCall__Inputs {
    return new SubmitDataCall__Inputs(this);
  }

  get outputs(): SubmitDataCall__Outputs {
    return new SubmitDataCall__Outputs(this);
  }
}

export class SubmitDataCall__Inputs {
  _call: SubmitDataCall;

  constructor(call: SubmitDataCall) {
    this._call = call;
  }

  get data(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SubmitDataCall__Outputs {
  _call: SubmitDataCall;

  constructor(call: SubmitDataCall) {
    this._call = call;
  }
}

export class TimeoutCall extends EthereumCall {
  get inputs(): TimeoutCall__Inputs {
    return new TimeoutCall__Inputs(this);
  }

  get outputs(): TimeoutCall__Outputs {
    return new TimeoutCall__Outputs(this);
  }
}

export class TimeoutCall__Inputs {
  _call: TimeoutCall;

  constructor(call: TimeoutCall) {
    this._call = call;
  }
}

export class TimeoutCall__Outputs {
  _call: TimeoutCall;

  constructor(call: TimeoutCall) {
    this._call = call;
  }
}

export class TransferOperatorCall extends EthereumCall {
  get inputs(): TransferOperatorCall__Inputs {
    return new TransferOperatorCall__Inputs(this);
  }

  get outputs(): TransferOperatorCall__Outputs {
    return new TransferOperatorCall__Outputs(this);
  }
}

export class TransferOperatorCall__Inputs {
  _call: TransferOperatorCall;

  constructor(call: TransferOperatorCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOperatorCall__Outputs {
  _call: TransferOperatorCall;

  constructor(call: TransferOperatorCall) {
    this._call = call;
  }
}
