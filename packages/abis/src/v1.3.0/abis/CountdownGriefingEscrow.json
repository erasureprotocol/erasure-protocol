{
  "contractName": "CountdownGriefingEscrow",
  "abi": [
    { "anonymous": false, "inputs": [], "name": "Cancelled", "type": "event" },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "DataSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "DeadlineSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum TokenManager.Tokens",
          "name": "tokenID",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDeposit",
          "type": "uint256"
        }
      ],
      "name": "DepositDecreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum TokenManager.Tokens",
          "name": "tokenID",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDeposit",
          "type": "uint256"
        }
      ],
      "name": "DepositIncreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "agreement",
          "type": "address"
        }
      ],
      "name": "Finalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum TokenManager.Tokens",
          "name": "tokenID",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paymentAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "countdownLength",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "metadata",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "agreementParams",
          "type": "bytes"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "LengthSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "metadata",
          "type": "bytes"
        }
      ],
      "name": "MetadataSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "OperatorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum TokenManager.Tokens",
          "name": "tokenID",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "StakeBurned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "StakeDeposited",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCountdownStatus",
      "outputs": [
        {
          "internalType": "enum Countdown.CountdownStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCreator",
      "outputs": [
        { "internalType": "address", "name": "creator", "type": "address" }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getDeadline",
      "outputs": [
        { "internalType": "uint256", "name": "deadline", "type": "uint256" }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getDeadlineStatus",
      "outputs": [
        {
          "internalType": "enum Deadline.DeadlineStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "enum TokenManager.Tokens",
          "name": "tokenID",
          "type": "uint8"
        }
      ],
      "name": "getExchangeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "exchangeAddress",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getFactory",
      "outputs": [
        { "internalType": "address", "name": "factory", "type": "address" }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getLength",
      "outputs": [
        { "internalType": "uint256", "name": "length", "type": "uint256" }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getOperator",
      "outputs": [
        { "internalType": "address", "name": "operator", "type": "address" }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getTimeRemaining",
      "outputs": [
        { "internalType": "uint256", "name": "time", "type": "uint256" }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "enum TokenManager.Tokens",
          "name": "tokenID",
          "type": "uint8"
        }
      ],
      "name": "getTokenAddress",
      "outputs": [
        { "internalType": "address", "name": "tokenAddress", "type": "address" }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        { "internalType": "address", "name": "operator", "type": "address" },
        { "internalType": "address", "name": "buyer", "type": "address" },
        { "internalType": "address", "name": "seller", "type": "address" },
        {
          "internalType": "enum TokenManager.Tokens",
          "name": "tokenID",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "paymentAmount",
          "type": "uint256"
        },
        { "internalType": "uint256", "name": "stakeAmount", "type": "uint256" },
        {
          "internalType": "uint256",
          "name": "escrowCountdown",
          "type": "uint256"
        },
        { "internalType": "bytes", "name": "metadata", "type": "bytes" },
        { "internalType": "bytes", "name": "agreementParams", "type": "bytes" }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        { "internalType": "bytes", "name": "metadata", "type": "bytes" }
      ],
      "name": "setMetadata",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        { "internalType": "address", "name": "seller", "type": "address" }
      ],
      "name": "depositAndSetSeller",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "depositStake",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        { "internalType": "address", "name": "buyer", "type": "address" }
      ],
      "name": "depositAndSetBuyer",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "depositPayment",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "finalize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [{ "internalType": "bytes", "name": "data", "type": "bytes" }],
      "name": "submitData",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "cancel",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "timeout",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        { "internalType": "address", "name": "operator", "type": "address" }
      ],
      "name": "transferOperator",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOperator",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getBuyer",
      "outputs": [
        { "internalType": "address", "name": "buyer", "type": "address" }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getSeller",
      "outputs": [
        { "internalType": "address", "name": "seller", "type": "address" }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        { "internalType": "address", "name": "user", "type": "address" }
      ],
      "name": "getDeposit",
      "outputs": [
        { "internalType": "uint256", "name": "amount", "type": "uint256" }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getData",
      "outputs": [
        {
          "internalType": "enum TokenManager.Tokens",
          "name": "tokenID",
          "type": "uint8"
        },
        {
          "internalType": "uint128",
          "name": "paymentAmount",
          "type": "uint128"
        },
        { "internalType": "uint128", "name": "stakeAmount", "type": "uint128" },
        { "internalType": "uint120", "name": "ratio", "type": "uint120" },
        {
          "internalType": "enum Griefing.RatioType",
          "name": "ratioType",
          "type": "uint8"
        },
        {
          "internalType": "uint128",
          "name": "countdownLength",
          "type": "uint128"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getEscrowStatus",
      "outputs": [
        {
          "internalType": "enum CountdownGriefingEscrow.EscrowStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": "0x608060405234801561001057600080fd5b50614a93806100206000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80637fe07abf116100f9578063dac6270d11610097578063e1254fba11610071578063e1254fba14610918578063e7f43c6814610970578063ea8a1af0146109ba578063ee57e36f146109c4576101a9565b8063dac6270d14610884578063dbd0e1b6146108a2578063de2229fe146108ec576101a9565b8063b7ac763f116100d3578063b7ac763f1461055c578063be1c766b14610617578063c529ebfd14610635578063d5300004146106a6576101a9565b80637fe07abf146104c457806388cc58e414610508578063aa5e215314610552576101a9565b80634bb278f311610166578063603daf9a11610140578063603daf9a146104005780636234216d1461044a578063665b0a191461047657806370dea79a146104ba576101a9565b80634bb278f3146103675780635ad3f918146103715780635f8d96de146103e2576101a9565b80630d2d76a2146101ae5780630ee2cb10146101b857806319fbb48e1461020257806329605e771461022e5780632ab6f8db146102725780633bc5de301461027c575b600080fd5b6101b6610a7f565b005b6101c0610bdc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61020a610cbd565b6040518082600381111561021a57fe5b60ff16815260200191505060405180910390f35b6102706004803603602081101561024457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d36565b005b61027a610dbd565b005b610284610e42565b6040518087600281111561029457fe5b60ff168152602001866fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001856fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001846effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff16815260200183600281111561032457fe5b60ff168152602001826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001965050505050505060405180910390f35b61036f610f15565b005b6103a06004803603602081101561038757600080fd5b81019080803560ff169060200190929190505050611aa0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6103ea611b07565b6040518082815260200191505060405180910390f35b610408611b10565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610452611b3d565b6040518082600581111561046257fe5b60ff16815260200191505060405180910390f35b6104b86004803603602081101561048c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b57565b005b6104c2611c6d565b005b610506600480360360208110156104da57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d8c565b005b610510611ea2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61055a611ecc565b005b6106156004803603602081101561057257600080fd5b810190808035906020019064010000000081111561058f57600080fd5b8201836020820111156105a157600080fd5b803590602001918460018302840111640100000000831117156105c357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050612029565b005b61061f6121cd565b6040518082815260200191505060405180910390f35b6106646004803603602081101561064b57600080fd5b81019080803560ff1690602001909291905050506121d7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61088260048036036101208110156106bd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff1690602001909291908035906020019092919080359060200190929190803590602001909291908035906020019064010000000081111561076557600080fd5b82018360208201111561077757600080fd5b8035906020019184600183028401116401000000008311171561079957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156107fc57600080fd5b82018360208201111561080e57600080fd5b8035906020019184600183028401116401000000008311171561083057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061223e565b005b61088c612a9e565b6040518082815260200191505060405180910390f35b6108aa612ace565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6108f4612afb565b6040518082600281111561090457fe5b60ff16815260200191505060405180910390f35b61095a6004803603602081101561092e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612b2b565b6040518082815260200191505060405180910390f35b610978612b50565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6109c2612b7a565b005b610a7d600480360360208110156109da57600080fd5b81019080803590602001906401000000008111156109f757600080fd5b820183602082011115610a0957600080fd5b80359060200191846001830284011164010000000083111715610a2b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050612c9a565b005b610a8833612d21565b80610a985750610a9733612d60565b5b610b0a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f6f6e6c792073656c6c6572206f72206f70657261746f7200000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610bd2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f73656c6c6572206e6f742079657420736574000000000000000000000000000081525060200191505060405180910390fd5b610bda612dba565b565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636bf71982306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610c7d57600080fd5b505afa158015610c91573d6000803e3d6000fd5b505050506040513d6020811015610ca757600080fd5b8101908080519060200190929190505050905090565b6000806001541415610cd25760009050610d33565b60006002811115610cdf57fe5b610ce7612afb565b6002811115610cf257fe5b1415610d015760019050610d33565b600280811115610d0d57fe5b610d15612afb565b6002811115610d2057fe5b14610d2e5760029050610d33565b600390505b90565b610d3f33612d60565b610db1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6f6e6c79206f70657261746f720000000000000000000000000000000000000081525060200191505060405180910390fd5b610dba81612fa5565b50565b610dc633612d60565b610e38576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6f6e6c79206f70657261746f720000000000000000000000000000000000000081525060200191505060405180910390fd5b610e406131b4565b565b600080600080600080600560010160149054906101000a900460ff16600560020160009054906101000a90046fffffffffffffffffffffffffffffffff16600560020160109054906101000a90046fffffffffffffffffffffffffffffffff16600560040160000160009054906101000a90046effffffffffffffffffffffffffffff166005600401600001600f9054906101000a900460ff16600560040160000160109054906101000a90046fffffffffffffffffffffffffffffffff16955095509550955095509550909192939495565b610f1e33612d21565b80610f2e5750610f2d33612d60565b5b610fa0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f6f6e6c792073656c6c6572206f72206f70657261746f7200000000000000000081525060200191505060405180910390fd5b610fa8613321565b61101a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f6f6e6c79206166746572206465706f736974000000000000000000000000000081525060200191505060405180910390fd5b600080611025611ea2565b905060008173ffffffffffffffffffffffffffffffffffffffff1663a5e139046040518163ffffffff1660e01b815260040160206040518083038186803b15801561106f57600080fd5b505afa158015611083573d6000803e3d6000fd5b505050506040513d602081101561109957600080fd5b8101908080519060200190929190505050905060008173ffffffffffffffffffffffffffffffffffffffff166345bdfb1e846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060006040518083038186803b15801561112b57600080fd5b505afa15801561113f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561116957600080fd5b810190808051604051939291908464010000000082111561118957600080fd5b8382019150602082018581111561119f57600080fd5b82518660018202830111640100000000821117156111bc57600080fd5b8083526020830192505050908051906020019080838360005b838110156111f05780820151818401526020810190506111d5565b50505050905090810190601f16801561121d5780820380516001836020036101000a031916815260200191505b50604052505050806020019051602081101561123857600080fd5b8101908080519060200190929190505050905060608173ffffffffffffffffffffffffffffffffffffffff166354ed633b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561129357600080fd5b505afa1580156112a7573d6000803e3d6000fd5b505050506040513d60208110156112bd57600080fd5b810190808051906020019092919050505030600560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560010160149054906101000a900460ff16600560040160000160009054906101000a90046effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff166005600401600001600f9054906101000a900460ff16600560040160000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1660405180602001604052806000815250604051602401808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200186600281111561146957fe5b60ff16815260200185815260200184600281111561148357fe5b60ff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156114cd5780820151818401526020810190506114b2565b50505050905090810190601f1680156114fa5780820380516001836020036101000a031916815260200191505b509950505050505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090508173ffffffffffffffffffffffffffffffffffffffff1663cf5ba53f826040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156115d15780820151818401526020810190506115b6565b50505050905090810190601f1680156115fe5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561161d57600080fd5b505af1158015611631573d6000803e3d6000fd5b505050506040513d602081101561164757600080fd5b81019080805190602001909291905050509450505050506000806116a2600560010160149054906101000a900460ff16600560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16613349565b905060006116e7600560010160149054906101000a900460ff16600560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16613349565b90506116fc81836133c090919063ffffffff16565b92505050600081111561179257611726600560010160149054906101000a900460ff168383613448565b8173ffffffffffffffffffffffffffffffffffffffff1663eedad66b826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561177957600080fd5b505af115801561178d573d6000803e3d6000fd5b505050505b8173ffffffffffffffffffffffffffffffffffffffff16635e5365c16040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156117da57600080fd5b505af11580156117ee573d6000803e3d6000fd5b505050506040513d602081101561180457600080fd5b8101908080519060200190929190505050506000611820612b50565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146118f2578273ffffffffffffffffffffffffffffffffffffffff166329605e77826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156118d557600080fd5b505af11580156118e9573d6000803e3d6000fd5b50505050611953565b8273ffffffffffffffffffffffffffffffffffffffff16632ab6f8db6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561193a57600080fd5b505af115801561194e573d6000803e3d6000fd5b505050505b6004600560030160006101000a81548160ff0219169083600581111561197557fe5b0217905550600560010160146101000a81549060ff0219169055600560020160006101000a8154906fffffffffffffffffffffffffffffffff0219169055600560020160106101000a8154906fffffffffffffffffffffffffffffffff02191690556005600401600080820160006101000a8154906effffffffffffffffffffffffffffff021916905560008201600f6101000a81549060ff02191690556000820160106101000a8154906fffffffffffffffffffffffffffffffff021916905550507f8e500951de09bcc6854e88c0810bafb819503505895751e657a92df6578d3d9983604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1505050565b6000600280811115611aae57fe5b826002811115611aba57fe5b1415611acf57611ac8613883565b9050611b02565b60016002811115611adc57fe5b826002811115611ae857fe5b1415611afd57611af661389f565b9050611b02565b600090505b919050565b60008054905090565b6000600560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600560030160009054906101000a900460ff16905090565b600073ffffffffffffffffffffffffffffffffffffffff16600560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611c1e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f73656c6c657220616c726561647920736574000000000000000000000000000081525060200191505060405180910390fd5b80600560010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611c6a612dba565b50565b611c76336138bb565b80611c865750611c8533612d60565b5b611cf8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f6e6c79206275796572206f72206f70657261746f720000000000000000000081525060200191505060405180910390fd5b611d00613321565b8015611d105750611d0f6138fa565b5b611d82576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f6f6e6c7920616674657220636f756e74646f776e20656e64656400000000000081525060200191505060405180910390fd5b611d8a613921565b565b600073ffffffffffffffffffffffffffffffffffffffff16600560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611e53576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f627579657220616c72656164792073657400000000000000000000000000000081525060200191505060405180910390fd5b80600560000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611e9f613add565b50565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611ed5336138bb565b80611ee55750611ee433612d60565b5b611f57576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f6e6c79206275796572206f72206f70657261746f720000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561201f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6275796572206e6f74207965742073657400000000000000000000000000000081525060200191505060405180910390fd5b612027613add565b565b61203233612d21565b80612042575061204133612d60565b5b6120b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f6f6e6c792073656c6c6572206f72206f70657261746f7200000000000000000081525060200191505060405180910390fd5b6120bc613cc9565b61212e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f6f6e6c792061667465722066696e616c697a656400000000000000000000000081525060200191505060405180910390fd5b7ffdf4f8571e6f770be30bc9e95e66f21bc368a871788c0b61c32628b1a8af1157816040518080602001828103825283818151815260200191508051906020019080838360005b83811015612190578082015181840152602081019050612175565b50505050905090810190601f1680156121bd5780820380516001836020036101000a031916815260200191505b509250505060405180910390a150565b6000600154905090565b60006002808111156121e557fe5b8260028111156121f157fe5b1415612206576121ff613cf1565b9050612239565b6001600281111561221357fe5b82600281111561221f57fe5b14156122345761222d613d0d565b9050612239565b600090505b919050565b33600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000303b905060008163ffffffff16146122e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180614a13602a913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161461235d5788600560000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16146123d65787600560010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614612414576124138a613d29565b5b61241d87613f37565b61248f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f696e76616c696420746f6b656e0000000000000000000000000000000000000081525060200191505060405180910390fd5b86600560010160146101000a81548160ff021916908360028111156124b057fe5b02179055506000861461258257856fffffffffffffffffffffffffffffffff16861115612545576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f7061796d656e74416d6f756e7420697320746f6f206c6172676500000000000081525060200191505060405180910390fd5b85600560020160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b6000851461264e57846fffffffffffffffffffffffffffffffff168514612611576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f7374616b65416d6f756e7420697320746f6f206c61726765000000000000000081525060200191505060405180910390fd5b84600560020160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b61265784613f7a565b600083511461266a5761266983613fbb565b5b60008251146128bf57600080600084806020019051606081101561268d57600080fd5b81019080805190602001909291908051906020019092919080519060200190929190505050925092509250826effffffffffffffffffffffffffffff16831461273e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f726174696f206f7574206f6620626f756e64730000000000000000000000000081525060200191505060405180910390fd5b806fffffffffffffffffffffffffffffffff1681146127c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f61677265656d656e74436f756e74646f776e206f7574206f6620626f756e647381525060200191505060405180910390fd5b6040518060600160405280846effffffffffffffffffffffffffffff1681526020018360028111156127f357fe5b8152602001826fffffffffffffffffffffffffffffffff16815250600560040160008201518160000160006101000a8154816effffffffffffffffffffffffffffff02191690836effffffffffffffffffffffffffffff160217905550602082015181600001600f6101000a81548160ff0219169083600281111561287457fe5b021790555060408201518160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055509050505050505b7f99880b4349a7b82fe6896e4e8328b90e92d300c30e31cbe61acddf287c77fdb48a8a8a8a8a8a8a8a8a604051808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200187600281111561298f57fe5b60ff1681526020018681526020018581526020018481526020018060200180602001838103835285818151815260200191508051906020019080838360005b838110156129e95780820151818401526020810190506129ce565b50505050905090810190601f168015612a165780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015612a4f578082015181840152602081019050612a34565b50505050905090810190601f168015612a7c5780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390a150505050505050505050565b6000426000541115612ac657612abf4260005461405a90919063ffffffff16565b9050612acb565b600090505b90565b6000600560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000806000541415612b105760009050612b28565b426000541115612b235760019050612b28565b600290505b90565b6000612b49600560010160149054906101000a900460ff16836140a4565b9050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b612b8333612d21565b80612b935750612b92336138bb565b5b80612ba35750612ba233612d60565b5b612c15576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f6f6e6c792073656c6c6572206f72206275796572206f72206f70657261746f7281525060200191505060405180910390fd5b612c1d61410a565b80612c2c5750612c2b614131565b5b80612c3b5750612c3a614159565b5b612c90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180614a3d6022913960400191505060405180910390fd5b612c98613921565b565b612ca333612d60565b612d15576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6f6e6c79206f70657261746f720000000000000000000000000000000000000081525060200191505060405180910390fd5b612d1e81613fbb565b50565b6000612d2b612ace565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b612dc261410a565b80612dd15750612dd0614159565b5b612e43576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f63616e206f6e6c79206465706f736974207374616b65206f6e6365000000000081525060200191505060405180910390fd5b6000600560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600560020160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16905060008114612ecd57612ecb600560010160149054906101000a900460ff16833384614181565b505b7f0a7bb2e28cc4698aac06db79cf9163bfcc20719286cf59fa7d492ceda1b8edc28282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1612f40614159565b15612f79576003600560030160006101000a81548160ff02191690836005811115612f6757fe5b0217905550612f74610f15565b612fa1565b6001600560030160006101000a81548160ff02191690836005811115612f9b57fe5b02179055505b5050565b600073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561306a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f6e6c79207768656e206f70657261746f72207365740000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561310d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f63616e6e6f7420736574206f70657261746f7220746f2061646472657373203081525060200191505060405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fb3b3f5f64ab192e4b5fefde1f51ce9733bbdcf831951543b325aebd49cc27ec481604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b600073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415613279576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f6e6c79207768656e206f70657261746f72207365740000000000000000000081525060200191505060405180910390fd5b6000600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fb3b3f5f64ab192e4b5fefde1f51ce9733bbdcf831951543b325aebd49cc27ec46000604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b60006003600581111561333057fe5b613338611b3d565b600581111561334357fe5b14905090565b6000806002600085600281111561335c57fe5b815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506133b58484836141a7565b508091505092915050565b60008082840190508381101561343e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b8261345281613f37565b6134c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f696e76616c696420746f6b656e4944000000000000000000000000000000000081525060200191505060405180910390fd5b6002808111156134d057fe5b8460028111156134dc57fe5b1415613622576134ea613883565b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b384846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561357057600080fd5b505af1158015613584573d6000803e3d6000fd5b505050506040513d602081101561359a57600080fd5b810190808051906020019092919050505061361d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f746f6b656e20617070726f76616c206661696c6564000000000000000000000081525060200191505060405180910390fd5b61387d565b6001600281111561362f57fe5b84600281111561363b57fe5b141561387c57600061364b61389f565b905060008173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33876040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561370057600080fd5b505afa158015613714573d6000803e3d6000fd5b505050506040513d602081101561372a57600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff16639281cd658683876040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019350505050602060405180830381600087803b1580156137cc57600080fd5b505af11580156137e0573d6000803e3d6000fd5b505050506040513d60208110156137f657600080fd5b8101908080519060200190929190505050613879576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f746f6b656e20617070726f76616c206661696c6564000000000000000000000081525060200191505060405180910390fd5b50505b5b50505050565b6000736b175474e89094c44da98b954eedeac495271d0f905090565b6000731776e1f26f98b1a5df9cd347953a26dd3cb46671905090565b60006138c5611b10565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b600060038081111561390857fe5b613910610cbd565b600381111561391b57fe5b14905090565b6000600560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600560010160149054906101000a900460ff169050600061399882856140a4565b146139aa576139a8818485614387565b505b60006139b682846140a4565b146139c8576139c6818384614387565b505b60058060030160006101000a81548160ff021916908360058111156139e957fe5b0217905550600560010160146101000a81549060ff0219169055600560020160006101000a8154906fffffffffffffffffffffffffffffffff0219169055600560020160106101000a8154906fffffffffffffffffffffffffffffffff02191690556005600401600080820160006101000a8154906effffffffffffffffffffffffffffff021916905560008201600f6101000a81549060ff02191690556000820160106101000a8154906fffffffffffffffffffffffffffffffff021916905550507f63b958841f79ab97cb5456da181454b9932c0e15a3b17f1cbd27e2a8bc61043760405160405180910390a1505050565b613ae561410a565b80613af45750613af3614131565b5b613b66576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f63616e206f6e6c79206465706f736974207061796d656e74206f6e636500000081525060200191505060405180910390fd5b6000600560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600560020160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16905060008114613bf057613bee600560010160149054906101000a900460ff16833384614181565b505b7fd348a8f42fae8db1d0030271b37ed6d94a5e292ff36db57b244ffe13f494dd458282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1613c63614131565b15613c9d576003600560030160006101000a81548160ff02191690836005811115613c8a57fe5b0217905550613c976143ae565b50613cc5565b6002600560030160006101000a81548160ff02191690836005811115613cbf57fe5b02179055505b5050565b600060046005811115613cd857fe5b613ce0611b3d565b6005811115613ceb57fe5b14905090565b6000732a1530c4c41db0b0b2bb646cb5eb1a67b7158667905090565b6000732bf5a5ba29e60682fc56b2fcf9ce07bef4f6196f905090565b600073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614613ded576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f6f70657261746f7220616c72656164792073657400000000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613e90576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f63616e6e6f7420736574206f70657261746f7220746f2061646472657373203081525060200191505060405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fb3b3f5f64ab192e4b5fefde1f51ce9733bbdcf831951543b325aebd49cc27ec481604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b600060016002811115613f4657fe5b826002811115613f5257fe5b1480613f735750600280811115613f6557fe5b826002811115613f7157fe5b145b9050919050565b806001819055507f7caceb1091bbaa84d09ab116a1fd72387eaab8a33d70fc39168b9b75686ee32c816040518082815260200191505060405180910390a150565b7fbb39ebb37e60fb5d606ffdb749d2336e56b88e6c88c4bd6513b308f643186eed816040518080602001828103825283818151815260200191508051906020019080838360005b8381101561401d578082015181840152602081019050614002565b50505050905090810190601f16801561404a5780820380516001836020036101000a031916815260200191505b509250505060405180910390a150565b600061409c83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506143d6565b905092915050565b6000600260008460028111156140b657fe5b815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600080600581111561411857fe5b614120611b3d565b600581111561412b57fe5b14905090565b60006001600581111561414057fe5b614148611b3d565b600581111561415357fe5b14905090565b60006002600581111561416857fe5b614170611b3d565b600581111561417b57fe5b14905090565b600061418e858584614496565b905061419c858430856145fb565b809050949350505050565b600080600260008660028111156141ba57fe5b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508281101561427e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f696e73756666696369656e74206465706f73697420746f2072656d6f7665000081525060200191505060405180910390fd5b614291838261405a90919063ffffffff16565b915081600260008760028111156142a457fe5b815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f9060f8ffc7acd8270abf2337023e6377669ca44d5b2a23f3513a29380940f357858585856040518085600281111561432857fe5b60ff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200194505050505060405180910390a1819150509392505050565b60008061439485856140a4565b90506143a2858585846147ee565b50809150509392505050565b60006143c5426001546133c090919063ffffffff16565b90506143d081614813565b80905090565b6000838311158290614483576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561444857808201518184015260208101905061442d565b50505050905090810190601f1680156144755780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b600061450682600260008760028111156144ac57fe5b815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546133c090919063ffffffff16565b9050806002600086600281111561451957fe5b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507ffe2caf3897ec3e02a1d458d232d7c62c17809d25dbfe65864ce842162d6c217c848484846040518085600281111561459d57fe5b60ff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200194505050505060405180910390a18090509392505050565b8361460581613f37565b614677576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f696e76616c696420746f6b656e4944000000000000000000000000000000000081525060200191505060405180910390fd5b61468085611aa0565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd8585856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561473a57600080fd5b505af115801561474e573d6000803e3d6000fd5b505050506040513d602081101561476457600080fd5b81019080805190602001909291905050506147e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f746f6b656e207472616e73666572206661696c6564000000000000000000000081525060200191505060405180910390fd5b5050505050565b60006147fb8585846141a7565b9050614808858484614854565b809050949350505050565b806000819055507f337b880688eb06df8adb77036a6c8def1da2b520bc901c04b3a5a23f9ae13039816040518082815260200191505060405180910390a150565b8261485e81613f37565b6148d0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f696e76616c696420746f6b656e4944000000000000000000000000000000000081525060200191505060405180910390fd5b6148d984611aa0565b73ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561495f57600080fd5b505af1158015614973573d6000803e3d6000fd5b505050506040513d602081101561498957600080fd5b8101908080519060200190929190505050614a0c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f746f6b656e207472616e73666572206661696c6564000000000000000000000081525060200191505060405180910390fd5b5050505056fe6d7573742062652063616c6c65642077697468696e20636f6e747261637420636f6e7374727563746f726f6e6c79206265666f7265206465706f736974732061726520636f6d706c65746564a265627a7a7231582028f93995811d29c74318e51d9b4cf91246deacde30ce413f6d9469a0ed21143e64736f6c63430005100032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c80637fe07abf116100f9578063dac6270d11610097578063e1254fba11610071578063e1254fba14610918578063e7f43c6814610970578063ea8a1af0146109ba578063ee57e36f146109c4576101a9565b8063dac6270d14610884578063dbd0e1b6146108a2578063de2229fe146108ec576101a9565b8063b7ac763f116100d3578063b7ac763f1461055c578063be1c766b14610617578063c529ebfd14610635578063d5300004146106a6576101a9565b80637fe07abf146104c457806388cc58e414610508578063aa5e215314610552576101a9565b80634bb278f311610166578063603daf9a11610140578063603daf9a146104005780636234216d1461044a578063665b0a191461047657806370dea79a146104ba576101a9565b80634bb278f3146103675780635ad3f918146103715780635f8d96de146103e2576101a9565b80630d2d76a2146101ae5780630ee2cb10146101b857806319fbb48e1461020257806329605e771461022e5780632ab6f8db146102725780633bc5de301461027c575b600080fd5b6101b6610a7f565b005b6101c0610bdc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61020a610cbd565b6040518082600381111561021a57fe5b60ff16815260200191505060405180910390f35b6102706004803603602081101561024457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d36565b005b61027a610dbd565b005b610284610e42565b6040518087600281111561029457fe5b60ff168152602001866fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001856fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001846effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff16815260200183600281111561032457fe5b60ff168152602001826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001965050505050505060405180910390f35b61036f610f15565b005b6103a06004803603602081101561038757600080fd5b81019080803560ff169060200190929190505050611aa0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6103ea611b07565b6040518082815260200191505060405180910390f35b610408611b10565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610452611b3d565b6040518082600581111561046257fe5b60ff16815260200191505060405180910390f35b6104b86004803603602081101561048c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b57565b005b6104c2611c6d565b005b610506600480360360208110156104da57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d8c565b005b610510611ea2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61055a611ecc565b005b6106156004803603602081101561057257600080fd5b810190808035906020019064010000000081111561058f57600080fd5b8201836020820111156105a157600080fd5b803590602001918460018302840111640100000000831117156105c357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050612029565b005b61061f6121cd565b6040518082815260200191505060405180910390f35b6106646004803603602081101561064b57600080fd5b81019080803560ff1690602001909291905050506121d7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61088260048036036101208110156106bd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff1690602001909291908035906020019092919080359060200190929190803590602001909291908035906020019064010000000081111561076557600080fd5b82018360208201111561077757600080fd5b8035906020019184600183028401116401000000008311171561079957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156107fc57600080fd5b82018360208201111561080e57600080fd5b8035906020019184600183028401116401000000008311171561083057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061223e565b005b61088c612a9e565b6040518082815260200191505060405180910390f35b6108aa612ace565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6108f4612afb565b6040518082600281111561090457fe5b60ff16815260200191505060405180910390f35b61095a6004803603602081101561092e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612b2b565b6040518082815260200191505060405180910390f35b610978612b50565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6109c2612b7a565b005b610a7d600480360360208110156109da57600080fd5b81019080803590602001906401000000008111156109f757600080fd5b820183602082011115610a0957600080fd5b80359060200191846001830284011164010000000083111715610a2b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050612c9a565b005b610a8833612d21565b80610a985750610a9733612d60565b5b610b0a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f6f6e6c792073656c6c6572206f72206f70657261746f7200000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610bd2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f73656c6c6572206e6f742079657420736574000000000000000000000000000081525060200191505060405180910390fd5b610bda612dba565b565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636bf71982306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610c7d57600080fd5b505afa158015610c91573d6000803e3d6000fd5b505050506040513d6020811015610ca757600080fd5b8101908080519060200190929190505050905090565b6000806001541415610cd25760009050610d33565b60006002811115610cdf57fe5b610ce7612afb565b6002811115610cf257fe5b1415610d015760019050610d33565b600280811115610d0d57fe5b610d15612afb565b6002811115610d2057fe5b14610d2e5760029050610d33565b600390505b90565b610d3f33612d60565b610db1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6f6e6c79206f70657261746f720000000000000000000000000000000000000081525060200191505060405180910390fd5b610dba81612fa5565b50565b610dc633612d60565b610e38576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6f6e6c79206f70657261746f720000000000000000000000000000000000000081525060200191505060405180910390fd5b610e406131b4565b565b600080600080600080600560010160149054906101000a900460ff16600560020160009054906101000a90046fffffffffffffffffffffffffffffffff16600560020160109054906101000a90046fffffffffffffffffffffffffffffffff16600560040160000160009054906101000a90046effffffffffffffffffffffffffffff166005600401600001600f9054906101000a900460ff16600560040160000160109054906101000a90046fffffffffffffffffffffffffffffffff16955095509550955095509550909192939495565b610f1e33612d21565b80610f2e5750610f2d33612d60565b5b610fa0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f6f6e6c792073656c6c6572206f72206f70657261746f7200000000000000000081525060200191505060405180910390fd5b610fa8613321565b61101a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f6f6e6c79206166746572206465706f736974000000000000000000000000000081525060200191505060405180910390fd5b600080611025611ea2565b905060008173ffffffffffffffffffffffffffffffffffffffff1663a5e139046040518163ffffffff1660e01b815260040160206040518083038186803b15801561106f57600080fd5b505afa158015611083573d6000803e3d6000fd5b505050506040513d602081101561109957600080fd5b8101908080519060200190929190505050905060008173ffffffffffffffffffffffffffffffffffffffff166345bdfb1e846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060006040518083038186803b15801561112b57600080fd5b505afa15801561113f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561116957600080fd5b810190808051604051939291908464010000000082111561118957600080fd5b8382019150602082018581111561119f57600080fd5b82518660018202830111640100000000821117156111bc57600080fd5b8083526020830192505050908051906020019080838360005b838110156111f05780820151818401526020810190506111d5565b50505050905090810190601f16801561121d5780820380516001836020036101000a031916815260200191505b50604052505050806020019051602081101561123857600080fd5b8101908080519060200190929190505050905060608173ffffffffffffffffffffffffffffffffffffffff166354ed633b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561129357600080fd5b505afa1580156112a7573d6000803e3d6000fd5b505050506040513d60208110156112bd57600080fd5b810190808051906020019092919050505030600560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560010160149054906101000a900460ff16600560040160000160009054906101000a90046effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff166005600401600001600f9054906101000a900460ff16600560040160000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1660405180602001604052806000815250604051602401808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200186600281111561146957fe5b60ff16815260200185815260200184600281111561148357fe5b60ff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156114cd5780820151818401526020810190506114b2565b50505050905090810190601f1680156114fa5780820380516001836020036101000a031916815260200191505b509950505050505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090508173ffffffffffffffffffffffffffffffffffffffff1663cf5ba53f826040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156115d15780820151818401526020810190506115b6565b50505050905090810190601f1680156115fe5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561161d57600080fd5b505af1158015611631573d6000803e3d6000fd5b505050506040513d602081101561164757600080fd5b81019080805190602001909291905050509450505050506000806116a2600560010160149054906101000a900460ff16600560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16613349565b905060006116e7600560010160149054906101000a900460ff16600560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16613349565b90506116fc81836133c090919063ffffffff16565b92505050600081111561179257611726600560010160149054906101000a900460ff168383613448565b8173ffffffffffffffffffffffffffffffffffffffff1663eedad66b826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561177957600080fd5b505af115801561178d573d6000803e3d6000fd5b505050505b8173ffffffffffffffffffffffffffffffffffffffff16635e5365c16040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156117da57600080fd5b505af11580156117ee573d6000803e3d6000fd5b505050506040513d602081101561180457600080fd5b8101908080519060200190929190505050506000611820612b50565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146118f2578273ffffffffffffffffffffffffffffffffffffffff166329605e77826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156118d557600080fd5b505af11580156118e9573d6000803e3d6000fd5b50505050611953565b8273ffffffffffffffffffffffffffffffffffffffff16632ab6f8db6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561193a57600080fd5b505af115801561194e573d6000803e3d6000fd5b505050505b6004600560030160006101000a81548160ff0219169083600581111561197557fe5b0217905550600560010160146101000a81549060ff0219169055600560020160006101000a8154906fffffffffffffffffffffffffffffffff0219169055600560020160106101000a8154906fffffffffffffffffffffffffffffffff02191690556005600401600080820160006101000a8154906effffffffffffffffffffffffffffff021916905560008201600f6101000a81549060ff02191690556000820160106101000a8154906fffffffffffffffffffffffffffffffff021916905550507f8e500951de09bcc6854e88c0810bafb819503505895751e657a92df6578d3d9983604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1505050565b6000600280811115611aae57fe5b826002811115611aba57fe5b1415611acf57611ac8613883565b9050611b02565b60016002811115611adc57fe5b826002811115611ae857fe5b1415611afd57611af661389f565b9050611b02565b600090505b919050565b60008054905090565b6000600560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600560030160009054906101000a900460ff16905090565b600073ffffffffffffffffffffffffffffffffffffffff16600560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611c1e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f73656c6c657220616c726561647920736574000000000000000000000000000081525060200191505060405180910390fd5b80600560010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611c6a612dba565b50565b611c76336138bb565b80611c865750611c8533612d60565b5b611cf8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f6e6c79206275796572206f72206f70657261746f720000000000000000000081525060200191505060405180910390fd5b611d00613321565b8015611d105750611d0f6138fa565b5b611d82576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f6f6e6c7920616674657220636f756e74646f776e20656e64656400000000000081525060200191505060405180910390fd5b611d8a613921565b565b600073ffffffffffffffffffffffffffffffffffffffff16600560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611e53576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f627579657220616c72656164792073657400000000000000000000000000000081525060200191505060405180910390fd5b80600560000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611e9f613add565b50565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611ed5336138bb565b80611ee55750611ee433612d60565b5b611f57576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f6e6c79206275796572206f72206f70657261746f720000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561201f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6275796572206e6f74207965742073657400000000000000000000000000000081525060200191505060405180910390fd5b612027613add565b565b61203233612d21565b80612042575061204133612d60565b5b6120b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f6f6e6c792073656c6c6572206f72206f70657261746f7200000000000000000081525060200191505060405180910390fd5b6120bc613cc9565b61212e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f6f6e6c792061667465722066696e616c697a656400000000000000000000000081525060200191505060405180910390fd5b7ffdf4f8571e6f770be30bc9e95e66f21bc368a871788c0b61c32628b1a8af1157816040518080602001828103825283818151815260200191508051906020019080838360005b83811015612190578082015181840152602081019050612175565b50505050905090810190601f1680156121bd5780820380516001836020036101000a031916815260200191505b509250505060405180910390a150565b6000600154905090565b60006002808111156121e557fe5b8260028111156121f157fe5b1415612206576121ff613cf1565b9050612239565b6001600281111561221357fe5b82600281111561221f57fe5b14156122345761222d613d0d565b9050612239565b600090505b919050565b33600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000303b905060008163ffffffff16146122e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180614a13602a913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161461235d5788600560000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16146123d65787600560010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614612414576124138a613d29565b5b61241d87613f37565b61248f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f696e76616c696420746f6b656e0000000000000000000000000000000000000081525060200191505060405180910390fd5b86600560010160146101000a81548160ff021916908360028111156124b057fe5b02179055506000861461258257856fffffffffffffffffffffffffffffffff16861115612545576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f7061796d656e74416d6f756e7420697320746f6f206c6172676500000000000081525060200191505060405180910390fd5b85600560020160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b6000851461264e57846fffffffffffffffffffffffffffffffff168514612611576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f7374616b65416d6f756e7420697320746f6f206c61726765000000000000000081525060200191505060405180910390fd5b84600560020160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b61265784613f7a565b600083511461266a5761266983613fbb565b5b60008251146128bf57600080600084806020019051606081101561268d57600080fd5b81019080805190602001909291908051906020019092919080519060200190929190505050925092509250826effffffffffffffffffffffffffffff16831461273e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f726174696f206f7574206f6620626f756e64730000000000000000000000000081525060200191505060405180910390fd5b806fffffffffffffffffffffffffffffffff1681146127c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f61677265656d656e74436f756e74646f776e206f7574206f6620626f756e647381525060200191505060405180910390fd5b6040518060600160405280846effffffffffffffffffffffffffffff1681526020018360028111156127f357fe5b8152602001826fffffffffffffffffffffffffffffffff16815250600560040160008201518160000160006101000a8154816effffffffffffffffffffffffffffff02191690836effffffffffffffffffffffffffffff160217905550602082015181600001600f6101000a81548160ff0219169083600281111561287457fe5b021790555060408201518160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055509050505050505b7f99880b4349a7b82fe6896e4e8328b90e92d300c30e31cbe61acddf287c77fdb48a8a8a8a8a8a8a8a8a604051808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200187600281111561298f57fe5b60ff1681526020018681526020018581526020018481526020018060200180602001838103835285818151815260200191508051906020019080838360005b838110156129e95780820151818401526020810190506129ce565b50505050905090810190601f168015612a165780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015612a4f578082015181840152602081019050612a34565b50505050905090810190601f168015612a7c5780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390a150505050505050505050565b6000426000541115612ac657612abf4260005461405a90919063ffffffff16565b9050612acb565b600090505b90565b6000600560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000806000541415612b105760009050612b28565b426000541115612b235760019050612b28565b600290505b90565b6000612b49600560010160149054906101000a900460ff16836140a4565b9050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b612b8333612d21565b80612b935750612b92336138bb565b5b80612ba35750612ba233612d60565b5b612c15576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f6f6e6c792073656c6c6572206f72206275796572206f72206f70657261746f7281525060200191505060405180910390fd5b612c1d61410a565b80612c2c5750612c2b614131565b5b80612c3b5750612c3a614159565b5b612c90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180614a3d6022913960400191505060405180910390fd5b612c98613921565b565b612ca333612d60565b612d15576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6f6e6c79206f70657261746f720000000000000000000000000000000000000081525060200191505060405180910390fd5b612d1e81613fbb565b50565b6000612d2b612ace565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b612dc261410a565b80612dd15750612dd0614159565b5b612e43576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f63616e206f6e6c79206465706f736974207374616b65206f6e6365000000000081525060200191505060405180910390fd5b6000600560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600560020160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16905060008114612ecd57612ecb600560010160149054906101000a900460ff16833384614181565b505b7f0a7bb2e28cc4698aac06db79cf9163bfcc20719286cf59fa7d492ceda1b8edc28282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1612f40614159565b15612f79576003600560030160006101000a81548160ff02191690836005811115612f6757fe5b0217905550612f74610f15565b612fa1565b6001600560030160006101000a81548160ff02191690836005811115612f9b57fe5b02179055505b5050565b600073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561306a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f6e6c79207768656e206f70657261746f72207365740000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561310d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f63616e6e6f7420736574206f70657261746f7220746f2061646472657373203081525060200191505060405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fb3b3f5f64ab192e4b5fefde1f51ce9733bbdcf831951543b325aebd49cc27ec481604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b600073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415613279576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f6e6c79207768656e206f70657261746f72207365740000000000000000000081525060200191505060405180910390fd5b6000600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fb3b3f5f64ab192e4b5fefde1f51ce9733bbdcf831951543b325aebd49cc27ec46000604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b60006003600581111561333057fe5b613338611b3d565b600581111561334357fe5b14905090565b6000806002600085600281111561335c57fe5b815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506133b58484836141a7565b508091505092915050565b60008082840190508381101561343e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b8261345281613f37565b6134c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f696e76616c696420746f6b656e4944000000000000000000000000000000000081525060200191505060405180910390fd5b6002808111156134d057fe5b8460028111156134dc57fe5b1415613622576134ea613883565b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b384846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561357057600080fd5b505af1158015613584573d6000803e3d6000fd5b505050506040513d602081101561359a57600080fd5b810190808051906020019092919050505061361d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f746f6b656e20617070726f76616c206661696c6564000000000000000000000081525060200191505060405180910390fd5b61387d565b6001600281111561362f57fe5b84600281111561363b57fe5b141561387c57600061364b61389f565b905060008173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33876040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561370057600080fd5b505afa158015613714573d6000803e3d6000fd5b505050506040513d602081101561372a57600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff16639281cd658683876040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019350505050602060405180830381600087803b1580156137cc57600080fd5b505af11580156137e0573d6000803e3d6000fd5b505050506040513d60208110156137f657600080fd5b8101908080519060200190929190505050613879576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f746f6b656e20617070726f76616c206661696c6564000000000000000000000081525060200191505060405180910390fd5b50505b5b50505050565b6000736b175474e89094c44da98b954eedeac495271d0f905090565b6000731776e1f26f98b1a5df9cd347953a26dd3cb46671905090565b60006138c5611b10565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b600060038081111561390857fe5b613910610cbd565b600381111561391b57fe5b14905090565b6000600560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600560010160149054906101000a900460ff169050600061399882856140a4565b146139aa576139a8818485614387565b505b60006139b682846140a4565b146139c8576139c6818384614387565b505b60058060030160006101000a81548160ff021916908360058111156139e957fe5b0217905550600560010160146101000a81549060ff0219169055600560020160006101000a8154906fffffffffffffffffffffffffffffffff0219169055600560020160106101000a8154906fffffffffffffffffffffffffffffffff02191690556005600401600080820160006101000a8154906effffffffffffffffffffffffffffff021916905560008201600f6101000a81549060ff02191690556000820160106101000a8154906fffffffffffffffffffffffffffffffff021916905550507f63b958841f79ab97cb5456da181454b9932c0e15a3b17f1cbd27e2a8bc61043760405160405180910390a1505050565b613ae561410a565b80613af45750613af3614131565b5b613b66576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f63616e206f6e6c79206465706f736974207061796d656e74206f6e636500000081525060200191505060405180910390fd5b6000600560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600560020160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16905060008114613bf057613bee600560010160149054906101000a900460ff16833384614181565b505b7fd348a8f42fae8db1d0030271b37ed6d94a5e292ff36db57b244ffe13f494dd458282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1613c63614131565b15613c9d576003600560030160006101000a81548160ff02191690836005811115613c8a57fe5b0217905550613c976143ae565b50613cc5565b6002600560030160006101000a81548160ff02191690836005811115613cbf57fe5b02179055505b5050565b600060046005811115613cd857fe5b613ce0611b3d565b6005811115613ceb57fe5b14905090565b6000732a1530c4c41db0b0b2bb646cb5eb1a67b7158667905090565b6000732bf5a5ba29e60682fc56b2fcf9ce07bef4f6196f905090565b600073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614613ded576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f6f70657261746f7220616c72656164792073657400000000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613e90576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f63616e6e6f7420736574206f70657261746f7220746f2061646472657373203081525060200191505060405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fb3b3f5f64ab192e4b5fefde1f51ce9733bbdcf831951543b325aebd49cc27ec481604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b600060016002811115613f4657fe5b826002811115613f5257fe5b1480613f735750600280811115613f6557fe5b826002811115613f7157fe5b145b9050919050565b806001819055507f7caceb1091bbaa84d09ab116a1fd72387eaab8a33d70fc39168b9b75686ee32c816040518082815260200191505060405180910390a150565b7fbb39ebb37e60fb5d606ffdb749d2336e56b88e6c88c4bd6513b308f643186eed816040518080602001828103825283818151815260200191508051906020019080838360005b8381101561401d578082015181840152602081019050614002565b50505050905090810190601f16801561404a5780820380516001836020036101000a031916815260200191505b509250505060405180910390a150565b600061409c83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506143d6565b905092915050565b6000600260008460028111156140b657fe5b815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600080600581111561411857fe5b614120611b3d565b600581111561412b57fe5b14905090565b60006001600581111561414057fe5b614148611b3d565b600581111561415357fe5b14905090565b60006002600581111561416857fe5b614170611b3d565b600581111561417b57fe5b14905090565b600061418e858584614496565b905061419c858430856145fb565b809050949350505050565b600080600260008660028111156141ba57fe5b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508281101561427e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f696e73756666696369656e74206465706f73697420746f2072656d6f7665000081525060200191505060405180910390fd5b614291838261405a90919063ffffffff16565b915081600260008760028111156142a457fe5b815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f9060f8ffc7acd8270abf2337023e6377669ca44d5b2a23f3513a29380940f357858585856040518085600281111561432857fe5b60ff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200194505050505060405180910390a1819150509392505050565b60008061439485856140a4565b90506143a2858585846147ee565b50809150509392505050565b60006143c5426001546133c090919063ffffffff16565b90506143d081614813565b80905090565b6000838311158290614483576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561444857808201518184015260208101905061442d565b50505050905090810190601f1680156144755780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b600061450682600260008760028111156144ac57fe5b815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546133c090919063ffffffff16565b9050806002600086600281111561451957fe5b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507ffe2caf3897ec3e02a1d458d232d7c62c17809d25dbfe65864ce842162d6c217c848484846040518085600281111561459d57fe5b60ff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200194505050505060405180910390a18090509392505050565b8361460581613f37565b614677576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f696e76616c696420746f6b656e4944000000000000000000000000000000000081525060200191505060405180910390fd5b61468085611aa0565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd8585856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561473a57600080fd5b505af115801561474e573d6000803e3d6000fd5b505050506040513d602081101561476457600080fd5b81019080805190602001909291905050506147e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f746f6b656e207472616e73666572206661696c6564000000000000000000000081525060200191505060405180910390fd5b5050505050565b60006147fb8585846141a7565b9050614808858484614854565b809050949350505050565b806000819055507f337b880688eb06df8adb77036a6c8def1da2b520bc901c04b3a5a23f9ae13039816040518082815260200191505060405180910390a150565b8261485e81613f37565b6148d0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f696e76616c696420746f6b656e4944000000000000000000000000000000000081525060200191505060405180910390fd5b6148d984611aa0565b73ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561495f57600080fd5b505af1158015614973573d6000803e3d6000fd5b505050506040513d602081101561498957600080fd5b8101908080519060200190929190505050614a0c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f746f6b656e207472616e73666572206661696c6564000000000000000000000081525060200191505060405180910390fd5b5050505056fe6d7573742062652063616c6c65642077697468696e20636f6e747261637420636f6e7374727563746f726f6e6c79206265666f7265206465706f736974732061726520636f6d706c65746564a265627a7a7231582028f93995811d29c74318e51d9b4cf91246deacde30ce413f6d9469a0ed21143e64736f6c63430005100032",
  "sourceMap": "2517:21234:4:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2517:21234:4;;;;;;;",
  "deployedSourceMap": "2517:21234:4:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2517:21234:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9106:327;;;:::i;:::-;;1134:229:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1971:428:11;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18418:228:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;18418:228:4;;;;;;;;;;;;;;;;;;;:::i;:::-;;18785:204;;;:::i;:::-;;20822:499;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12862:2607;;;:::i;:::-;;554:280:25;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;554:280:25;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1034:95:12;;;:::i;:::-;;;;;;;;;;;;;;;;;;;19116:91:4;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;21961:105;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8483:265;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8483:265:4;;;;;;;;;;;;;;;;;;;:::i;:::-;;17034:350;;;:::i;:::-;;10662:262;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10662:262:4;;;;;;;;;;;;;;;;;;;:::i;:::-;;1770:92:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;11296:329:4;;;:::i;:::-;;15670:336;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;15670:336:4;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;15670:336:4;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;15670:336:4;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;15670:336:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;15670:336:4;;;;;;;;;;;;;;;:::i;:::-;;1440:89:11;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1047:292:25;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1047:292:25;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;5448:2220:4;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;5448:2220:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;5448:2220:4;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;5448:2220:4;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;5448:2220:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;5448:2220:4;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;5448:2220:4;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;5448:2220:4;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;5448:2220:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;5448:2220:4;;;;;;;;;;;;;;;:::i;:::-;;1479:173:12;;;:::i;:::-;;;;;;;;;;;;;;;;;;;19602:94:4;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1996:275:12;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20181:134:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;20181:134:4;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1454:95:18;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;16287:414:4;;;:::i;:::-;;7843:226;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7843:226:4;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;7843:226:4;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;7843:226:4;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;7843:226:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;7843:226:4;;;;;;;;;;;;;;;:::i;:::-;;9106:327;9190:20;9199:10;9190:8;:20::i;:::-;:55;;;;9214:31;9234:10;9214:19;:31::i;:::-;9190:55;9182:91;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9350:1;9326:26;;:5;:12;;;;;;;;;;;;:26;;;;9318:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9411:15;:13;:15::i;:::-;9106:327::o;1134:229:24:-;1177:15;1313:8;;;;;;;;;;;1304:37;;;1350:4;1304:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1304:52:24;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1304:52:24;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1304:52:24;;;;;;;;;;;;;;;;1297:59;;1134:229;:::o;1971:428:11:-;2022:22;2071:1;2060:7;;:12;2056:59;;;2093:22;2086:29;;;;2056:59;2161:21;2129:53;;;;;;;;:28;:26;:28::i;:::-;:53;;;;;;;;;2125:99;;;2203:21;2196:28;;;;2125:99;2270:21;2238:53;;;;;;;;:28;:26;:28::i;:::-;:53;;;;;;;;;2234:158;;2312:24;2305:31;;;;2234:158;2370:22;2363:29;;1971:428;;:::o;18418:228:4:-;18514:31;18534:10;18514:19;:31::i;:::-;18506:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18603:36;18630:8;18603:26;:36::i;:::-;18418:228;:::o;18785:204::-;18865:31;18885:10;18865:19;:31::i;:::-;18857:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18954:28;:26;:28::i;:::-;18785:204::o;20822:499::-;20871:27;20908:21;20939:19;20968:13;20991:28;21029:23;21090:5;:13;;;;;;;;;;;;21117:5;:19;;;;;;;;;;;;21150:5;:17;;;;;;;;;;;;21181:5;:21;;:27;;;;;;;;;;;;21222:5;:21;;:31;;;;;;;;;;;;21267:5;:21;;:37;;;;;;;;;;;;21069:245;;;;;;;;;;;;20822:499;;;;;;:::o;12862:2607::-;12942:20;12951:10;12942:8;:20::i;:::-;:55;;;;12966:31;12986:10;12966:19;:31::i;:::-;12942:55;12934:91;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13077:13;:11;:13::i;:::-;13069:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13157:17;13247:21;13271;:19;:21::i;:::-;13247:45;;13306:22;13340:13;13331:43;;;:45;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13331:45:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;13331:45:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;13331:45:4;;;;;;;;;;;;;;;;13306:70;;13390:24;13438:14;13428:40;;;13469:13;13428:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13428:55:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;13428:55:4;;;;;;39:16:-1;36:1;17:17;2:54;13428:55:4;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;13:2;8:3;5:11;2:2;;;29:1;26;19:12;2:2;13428:55:4;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;330:9;325:1;311:12;307:20;289:16;285:43;282:58;261:11;247:12;244:29;233:115;230:2;;;361:1;358;351:12;230:2;384:12;379:3;372:25;420:4;415:3;411:14;404:21;;0:432;;13428:55:4;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;13428:55:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13417:78;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;13417:78:4;;;;;;;;;;;;;;;;13390:105;;13556:25;13633:16;13624:42;;;:44;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13624:44:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;13624:44:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;13624:44:4;;;;;;;;;;;;;;;;13694:4;13729:5;:12;;;;;;;;;;;;13770:5;:11;;;;;;;;;;;;13817:5;:13;;;;;;;;;;;;13867:5;:21;;:27;;;;;;;;;;;;13859:36;;13937:5;:21;;:31;;;;;;;;;;;;14022:5;:21;;:37;;;;;;;;;;;;14014:46;;14097:9;;;;;;;;;;;;13584:553;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;13584:553:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;13584:553:4;;;;;;;38:4:-1;29:7;25:18;67:10;61:17;96:58;199:8;192:4;186;182:15;179:29;167:10;160:49;0:215;;;13584:553:4;13556:581;;14229:16;14220:33;;;14254:12;14220:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;14220:47:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14220:47:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;14220:47:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;14220:47:4;;;;;;;;;;;;;;;;14208:59;;12862:2607;;;;14344:18;14386:21;14410:49;14432:5;:13;;;;;;;;;;;;14447:5;:11;;;;;;;;;;;;14410:21;:49::i;:::-;14386:73;;14473:19;14495:50;14517:5;:13;;;;;;;;;;;;14532:5;:12;;;;;;;;;;;;14495:21;:50::i;:::-;14473:72;;14572:30;14590:11;14572:13;:17;;:30;;;;:::i;:::-;14559:43;;12862:2607;;14640:1;14627:10;:14;14623:172;;;14657:59;14679:5;:13;;;;;;;;;;;;14694:9;14705:10;14657:21;:59::i;:::-;14748:9;14730:42;;;14773:10;14730:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14730:54:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;14730:54:4;;;;14623:172;14861:9;14843:43;;;:45;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14843:45:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;14843:45:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;14843:45:4;;;;;;;;;;;;;;;;;14928:16;14947:22;:20;:22::i;:::-;14928:41;;15003:1;14983:22;;:8;:22;;;14979:186;;15039:9;15021:45;;;15067:8;15021:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;15021:55:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;15021:55:4;;;;14979:186;;;15125:9;15107:45;;;:47;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;15107:47:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;15107:47:4;;;;14979:186;15215:24;15200:5;:12;;;:39;;;;;;;;;;;;;;;;;;;;;;;;15283:5;:13;;;15276:20;;;;;;;;;;;15313:5;:19;;;15306:26;;;;;;;;;;;15349:5;:17;;;15342:24;;;;;;;;;;;15383:5;:21;;;15376:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15442:20;15452:9;15442:20;;;;;;;;;;;;;;;;;;;;;;12862:2607;;;:::o;554:280:25:-;616:20;663:10;652:21;;;;;;;;:7;:21;;;;;;;;;648:71;;;694:25;:23;:25::i;:::-;687:32;;;;648:71;744:10;733:21;;;;;;;;:7;:21;;;;;;;;;729:71;;;775:25;:23;:25::i;:::-;768:32;;;;729:71;825:1;810:17;;554:280;;;;:::o;1034:95:12:-;1078:16;1113:9;;1106:16;;1034:95;:::o;19116:91:4:-;19157:13;19189:5;:11;;;;;;;;;;;;19182:18;;19116:91;:::o;21961:105::-;22009:19;22047:5;:12;;;;;;;;;;;;22040:19;;21961:105;:::o;8483:265::-;8611:1;8587:26;;:5;:12;;;;;;;;;;;;:26;;;8579:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8684:6;8669:5;:12;;;:21;;;;;;;;;;;;;;;;;;8726:15;:13;:15::i;:::-;8483:265;:::o;17034:350::-;17113:19;17121:10;17113:7;:19::i;:::-;:54;;;;17136:31;17156:10;17136:19;:31::i;:::-;17113:54;17105:89;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17246:13;:11;:13::i;:::-;:35;;;;;17263:18;:16;:18::i;:::-;17246:35;17238:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17368:9;:7;:9::i;:::-;17034:350::o;10662:262::-;10787:1;10764:25;;:5;:11;;;;;;;;;;;;:25;;;10756:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10857:5;10843;:11;;;:19;;;;;;;;;;;;;;;;;;10900:17;:15;:17::i;:::-;10662:262;:::o;1770:92:24:-;1813:15;1847:8;;;;;;;;;;;1840:15;;1770:92;:::o;11296:329:4:-;11382:19;11390:10;11382:7;:19::i;:::-;:54;;;;11405:31;11425:10;11405:19;:31::i;:::-;11382:54;11374:89;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11539:1;11516:25;;:5;:11;;;;;;;;;;;;:25;;;;11508:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11601:17;:15;:17::i;:::-;11296:329::o;15670:336::-;15769:20;15778:10;15769:8;:20::i;:::-;:55;;;;15793:31;15813:10;15793:19;:31::i;:::-;15769:55;15761:91;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15904:13;:11;:13::i;:::-;15896:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15980:19;15994:4;15980:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;15980:19:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15670:336;:::o;1440:89:11:-;1482:14;1515:7;;1508:14;;1440:89;:::o;1047:292:25:-;1112:23;1162:10;1151:21;;;;;;;;:7;:21;;;;;;;;;1147:74;;;1193:28;:26;:28::i;:::-;1186:35;;;;1147:74;1246:10;1235:21;;;;;;;;:7;:21;;;;;;;;;1231:74;;;1277:28;:26;:28::i;:::-;1270:35;;;;1231:74;1330:1;1315:17;;1047:292;;;;:::o;5448:2220:4:-;600:10:24;589:8;;:21;;;;;;;;;;;;;;;;;;702:15;762:7;750:20;738:32;;801:1;789:8;:13;;;781:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5844:1:4;5827:19;;:5;:19;;;5823:69;;5876:5;5862;:11;;;:19;;;;;;;;;;;;;;;;;;5823:69;5923:1;5905:20;;:6;:20;;;5901:72;;5956:6;5941:5;:12;;;:21;;;;;;;;;;;;;;;;;;5901:72;6042:1;6022:22;;:8;:22;;;6018:84;;6060:31;6082:8;6060:21;:31::i;:::-;6018:84;6141:36;6169:7;6141:27;:36::i;:::-;6133:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6221:7;6205:5;:13;;;:23;;;;;;;;;;;;;;;;;;;;;;;;6302:1;6277:13;:27;6273:203;;6361:13;6345:31;;6328:13;:48;;6320:87;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6451:13;6421:5;:19;;;:44;;;;;;;;;;;;;;;;;;6273:203;6512:1;6489:11;:25;6485:191;;6569:11;6553:29;;6538:11;:44;6530:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6653:11;6625:5;:17;;;:40;;;;;;;;;;;;;;;;;;6485:191;6718:37;6739:15;6718:20;:37::i;:::-;6824:1;6805:8;:15;:20;6801:87;;6841:36;6868:8;6841:26;:36::i;:::-;6801:87;6970:1;6944:15;:22;:27;6940:567;;7005:13;7036:28;7082:26;7136:15;7125:67;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7125:67:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6987:205;;;;;;7239:5;7223:23;;7214:5;:32;7206:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7330:18;7314:36;;7292:18;:58;7284:103;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7425:71;;;;;;;;7449:5;7425:71;;;;;;7457:9;7425:71;;;;;;;;;;;;7476:18;7425:71;;;;;7401:5;:21;;:95;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6940:567;;;;7544:117;7556:8;7566:5;7573:6;7581:7;7590:13;7605:11;7618:15;7635:8;7645:15;7544:117;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;7544:117:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;7544:117:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5448:2220;;;;;;;;;;:::o;1479:173:12:-;1528:12;1568:3;1556:9;;:15;1552:93;;;1592:18;1606:3;1592:9;;:13;;:18;;;;:::i;:::-;1585:25;;;;1552:93;1644:1;1637:8;;1479:173;;:::o;19602:94:4:-;19644:14;19677:5;:12;;;;;;;;;;;;19670:19;;19602:94;:::o;1996:275:12:-;2046:21;2096:1;2083:9;;:14;2079:60;;;2118:21;2111:28;;;;2079:60;2165:3;2153:9;;:15;2149:115;;;2189:20;2182:27;;;;2149:115;2243:21;2236:28;;1996:275;;:::o;20181:134:4:-;20236:14;20269:39;20288:5;:13;;;;;;;;;;;;20303:4;20269:18;:39::i;:::-;20262:46;;20181:134;;;:::o;1454:95:18:-;1498:16;1533:9;;;;;;;;;;;1526:16;;1454:95;:::o;16287:414:4:-;16365:20;16374:10;16365:8;:20::i;:::-;:43;;;;16389:19;16397:10;16389:7;:19::i;:::-;16365:43;:78;;;;16412:31;16432:10;16412:19;:31::i;:::-;16365:78;16357:123;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16532:8;:6;:8::i;:::-;:32;;;;16544:20;:18;:20::i;:::-;16532:32;:58;;;;16568:22;:20;:22::i;:::-;16532:58;16524:105;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16685:9;:7;:9::i;:::-;16287:414::o;7843:226::-;7939:31;7959:10;7939:19;:31::i;:::-;7931:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8026:36;8053:8;8026:26;:36::i;:::-;7843:226;:::o;19873:117::-;19930:13;19972:11;:9;:11::i;:::-;19962:21;;:6;:21;;;19955:28;;19873:117;;;:::o;1555:111:18:-;1614:7;1650:9;;;;;;;;;;;1640:19;;:6;:19;;;1633:26;;1555:111;;;:::o;9439:798:4:-;9524:8;:6;:8::i;:::-;:34;;;;9536:22;:20;:22::i;:::-;9524:34;9516:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9648:14;9665:5;:12;;;;;;;;;;;;9648:29;;9687:19;9717:5;:17;;;;;;;;;;;;9709:26;;9687:48;;9805:1;9782:11;:25;9778:121;;9823:65;9841:5;:13;;;;;;;;;;;;9856:6;9864:10;9876:11;9823:17;:65::i;:::-;;9778:121;9936:35;9951:6;9959:11;9936:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;10042:22;:20;:22::i;:::-;10038:193;;;10095:24;10080:5;:12;;;:39;;;;;;;;;;;;;;;;;;;;;;;;10133:10;:8;:10::i;:::-;10038:193;;;10189:31;10174:5;:12;;;:46;;;;;;;;;;;;;;;;;;;;;;;;10038:193;9439:798;;:::o;724:410:18:-;856:1;835:23;;:9;;;;;;;;;;;:23;;;;827:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;959:1;939:22;;:8;:22;;;;931:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1056:8;1044:9;;:20;;;;;;;;;;;;;;;;;;1102:25;1118:8;1102:25;;;;;;;;;;;;;;;;;;;;;;724:410;:::o;1140:285::-;1256:1;1235:23;;:9;;;;;;;;;;;:23;;;;1227:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1351:1;1331:9;;:22;;;;;;;;;;;;;;;;;;1391:27;1415:1;1391:27;;;;;;;;;;;;;;;;;;;;;;1140:285::o;23069:130:4:-;23115:13;23168:24;23147:45;;;;;;;;:17;:15;:17::i;:::-;:45;;;;;;;;;23140:52;;23069:130;:::o;3053:346:13:-;3137:21;3201:22;3226:8;:26;3243:7;3235:16;;;;;;;;3226:26;;;;;;;;;;;:32;3253:4;3226:32;;;;;;;;;;;;;;;;3201:57;;3295:47;3312:7;3321:4;3327:14;3295:16;:47::i;:::-;;3378:14;3371:21;;;3053:346;;;;:::o;834:176:52:-;892:7;911:9;927:1;923;:5;911:17;;951:1;946;:6;;938:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1002:1;995:8;;;834:176;;;;:::o;3737:546:25:-;3829:7;1405:23;1420:7;1405:14;:23::i;:::-;1397:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3863:10;3852:21;;;;;;;;:7;:21;;;;;;;;;3848:429;;;3904:25;:23;:25::i;:::-;3897:41;;;3939:7;3948:5;3897:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3897:57:25;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3897:57:25;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3897:57:25;;;;;;;;;;;;;;;;3889:91;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3848:429;;;4012:10;4001:21;;;;;;;;:7;:21;;;;;;;;;3997:280;;;4038:11;4052:25;:23;:25::i;:::-;4038:39;;4091:24;4125:3;4118:21;;;4140:10;4152:7;4118:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4118:42:25;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4118:42:25;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4118:42:25;;;;;;;;;;;;;;;;4091:69;;4187:3;4182:24;;;4207:7;4216:16;4234:5;4182:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4182:58:25;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4182:58:25;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4182:58:25;;;;;;;;;;;;;;;;4174:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3997:280;;;3848:429;3737:546;;;;:::o;2879:99:9:-;2929:13;525:42;2954:17;;2879:99;:::o;1500::10:-;1550:13;564:42;1575:17;;1500:99;:::o;19383:115:4:-;19439:13;19481:10;:8;:10::i;:::-;19471:20;;:6;:20;;;19464:27;;19383:115;;;:::o;3352:126:11:-;3393:13;3449:22;3425:46;;;;;;;;:20;:18;:20::i;:::-;:46;;;;;;;;;3418:53;;3352:126;:::o;17390:821:4:-;17474:14;17491:5;:12;;;;;;;;;;;;17474:29;;17513:13;17529:5;:11;;;;;;;;;;;;17513:27;;17550;17580:5;:13;;;;;;;;;;;;17550:43;;17681:1;17642:35;17661:7;17670:6;17642:18;:35::i;:::-;:40;17638:118;;17698:47;17721:7;17730:6;17738;17698:22;:47::i;:::-;;17638:118;17843:1;17805:34;17824:7;17833:5;17805:18;:34::i;:::-;:39;17801:115;;17860:45;17883:7;17892:5;17899;17860:22;:45::i;:::-;;17801:115;17966:24;17951:5;:12;;;:39;;;;;;;;;;;;;;;;;;;;;;;;18034:5;:13;;;18027:20;;;;;;;;;;;18064:5;:19;;;18057:26;;;;;;;;;;;18100:5;:17;;;18093:24;;;;;;;;;;;18134:5;:21;;;18127:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18193:11;;;;;;;;;;17390:821;;;:::o;11631:839::-;11718:8;:6;:8::i;:::-;:32;;;;11730:20;:18;:20::i;:::-;11718:32;11710:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11842:13;11858:5;:11;;;;;;;;;;;;11842:27;;11879:21;11911:5;:19;;;;;;;;;;;;11903:28;;11879:52;;12009:1;11984:13;:27;11980:124;;12027:66;12045:5;:13;;;;;;;;;;;;12060:5;12067:10;12079:13;12027:17;:66::i;:::-;;11980:124;12141:38;12158:5;12165:13;12141:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;12267:20;:18;:20::i;:::-;12263:201;;;12318:24;12303:5;:12;;;:39;;;;;;;;;;;;;;;;;;;;;;;;12356:18;:16;:18::i;:::-;;12263:201;;;12420:33;12405:5;:12;;;:48;;;;;;;;;;;;;;;;;;;;;;;;12263:201;11631:839;;:::o;23344:130::-;23390:13;23443:24;23422:45;;;;;;;;:17;:15;:17::i;:::-;:45;;;;;;;;;23415:52;;23344:130;:::o;3102:111:9:-;3155:16;659:42;3183:23;;3102:111;:::o;1723::10:-;1776:16;698:42;1804:23;;1723:111;:::o;301:417:18:-;442:1;421:23;;:9;;;;;;;;;;;:23;;;413:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;543:1;523:22;;:8;:22;;;;515:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;640:8;628:9;;:20;;;;;;;;;;;;;;;;;;686:25;702:8;686:25;;;;;;;;;;;;;;;;;;;;;;301:417;:::o;1660:148:25:-;1723:13;1766:10;1755:21;;;;;;;;:7;:21;;;;;;;;;:46;;;;1791:10;1780:21;;;;;;;;:7;:21;;;;;;;;;1755:46;1748:53;;1660:148;;;:::o;821:110:11:-;886:6;876:7;:16;;;;907:17;917:6;907:17;;;;;;;;;;;;;;;;;;821:110;:::o;417:97:14:-;486:21;498:8;486:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;486:21:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;417:97;:::o;1274:134:52:-;1332:7;1358:43;1362:1;1365;1358:43;;;;;;;;;;;;;;;;;:3;:43::i;:::-;1351:50;;1274:134;;;;:::o;3707:159:13:-;3793:15;3827:8;:26;3844:7;3836:16;;;;;;;;3827:26;;;;;;;;;;;:32;3854:4;3827:32;;;;;;;;;;;;;;;;3820:39;;3707:159;;;;:::o;22206:120:4:-;22247:13;22300:19;22279:40;;;;;;;;:17;:15;:17::i;:::-;:40;;;;;;;;;22272:47;;22206:120;:::o;22478:144::-;22531:13;22584:31;22563:52;;;;;;;;:17;:15;:17::i;:::-;:52;;;;;;;;;22556:59;;22478:144;:::o;22776:148::-;22831:13;22884:33;22863:54;;;;;;;;:17;:15;:17::i;:::-;:54;;;;;;;;;22856:61;;22776:148;:::o;1209:417:23:-;1328:16;1393:54;1418:7;1427:6;1435:11;1393:24;:54::i;:::-;1382:65;;1495:71;1522:7;1531:6;1547:4;1554:11;1495:26;:71::i;:::-;1611:8;1604:15;;1209:417;;;;;;:::o;2070:694:13:-;2181:18;2242:22;2267:8;:26;2284:7;2276:16;;;;;;;;2267:26;;;;;;;;;;;:32;2294:4;2267:32;;;;;;;;;;;;;;;;2242:57;;2375:14;2357;:32;;2349:75;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2488:34;2507:14;2488;:18;;:34;;;;:::i;:::-;2475:47;;2604:10;2569:8;:26;2586:7;2578:16;;;;;;;;2569:26;;;;;;;;;;;:32;2596:4;2569:32;;;;;;;;;;;;;;;:45;;;;2652:59;2669:7;2678:4;2684:14;2700:10;2652:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2747:10;2740:17;;;2070:694;;;;;:::o;2990:369:23:-;3096:19;3150:22;3175:35;3194:7;3203:6;3175:18;:35::i;:::-;3150:60;;3248:54;3259:7;3268:6;3276:9;3287:14;3248:10;:54::i;:::-;;3338:14;3331:21;;;2990:369;;;;;:::o;1126:164:11:-;1162:16;1201;1213:3;1201:7;;:11;;:16;;;;:::i;:::-;1190:27;;1227:31;1249:8;1227:21;:31::i;:::-;1275:8;1268:15;;1126:164;:::o;1732:187:52:-;1818:7;1850:1;1845;:6;;1853:12;1837:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1837:29:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1876:9;1892:1;1888;:5;1876:17;;1911:1;1904:8;;;1732:187;;;;;:::o;1227:479:13:-;1335:18;1418:49;1455:11;1418:8;:26;1435:7;1427:16;;;;;;;;1418:26;;;;;;;;;;;:32;1445:4;1418:32;;;;;;;;;;;;;;;;:36;;:49;;;;:::i;:::-;1405:62;;1549:10;1514:8;:26;1531:7;1523:16;;;;;;;;1514:26;;;;;;;;;;;:32;1541:4;1514:32;;;;;;;;;;;;;;;:45;;;;1597:56;1614:7;1623:4;1629:11;1642:10;1597:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1689:10;1682:17;;1227:479;;;;;:::o;2443:228:25:-;2549:7;1405:23;1420:7;1405:14;:23::i;:::-;1397:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2583:24;2599:7;2583:15;:24::i;:::-;2576:45;;;2622:4;2628:2;2632:5;2576:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2576:62:25;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2576:62:25;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2576:62:25;;;;;;;;;;;;;;;;2568:96;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2443:228;;;;;:::o;2152:408:23:-;2276:16;2341:55;2366:7;2375:6;2383:12;2341:24;:55::i;:::-;2330:66;;2444:56;2467:7;2476:9;2487:12;2444:22;:56::i;:::-;2545:8;2538:15;;2152:408;;;;;;:::o;768:122:12:-;839:8;827:9;:20;;;;862:21;874:8;862:21;;;;;;;;;;;;;;;;;;768:122;:::o;2002:200:25:-;2090:7;1405:23;1420:7;1405:14;:23::i;:::-;1397:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2124:24;2140:7;2124:15;:24::i;:::-;2117:41;;;2159:2;2163:5;2117:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2117:52:25;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2117:52:25;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2117:52:25;;;;;;;;;;;;;;;;2109:86;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2002:200;;;;:::o",
  "source": "pragma solidity 0.5.16;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../agreements/CountdownGriefing.sol\";\nimport \"../modules/iFactory.sol\";\nimport \"../modules/iRegistry.sol\";\nimport \"../modules/Countdown.sol\";\nimport \"../modules/Staking.sol\";\nimport \"../modules/EventMetadata.sol\";\nimport \"../modules/Operated.sol\";\nimport \"../modules/Template.sol\";\n\n/// @title CountdownGriefingEscrow\n/// @author Stephane Gosselin (@thegostep) for Numerai Inc\n/// @dev Security contact: security@numer.ai\n/// @dev Version: 1.3.0\n/// @dev State Machine: https://github.com/erasureprotocol/erasure-protocol/blob/release/v1.3.x/docs/state-machines/escrows/CountdownGriefingEscrow.png\n/// @notice This escrow allows for a buyer and a seller to deposit their stake and payment before sending it to a CountdownGriefing agreement.\n///         A new instance is initialized by the factory using the `initData` received. See the `initialize()` function for details.\n///         Notable features:\n///             - The deposited payment and stake become the stake of the agreement once the escrow is finalized.\n///             - If the buyer is not defined on creation, the first user to deposit the payment becomes the buyer.\n///             - If the seller is not defined on creation, the first user to deposit the stake becomes the seller.\n///             - Either party is able to cancel the escrow and retrieve their deposit if their counterparty never completes their deposit.\n///             - If the buyer deposits their payment after the stake has already been deposited by the seller, this starts a countdown for the seller to finalize the escrow.\n///             - If the seller does not finalize the escrow before the end of the countdown, the buyer can timeout the escrow and recover their stake.\n///             - An operator can optionally be defined to grant full permissions to a trusted external address or contract. This operator will be inherited by the spawned agreement.\n///         **Note**\n///             Given the nature of ethereum, it is possible that while a cancel request is pending, the counterparty finalizes the escrow and the deposits are transfered to the agreement.\n///             This contract is designed such that there is only two end states: deposits are returned to the buyer and the seller OR the agreement is successfully created.\n///             This is why a user CANNOT rely on the cancellation feature to always work.\ncontract CountdownGriefingEscrow is Countdown, Staking, EventMetadata, Operated, Template {\n\n    using SafeMath for uint256;\n\n    Data private _data;\n    struct Data {\n        address buyer;\n        address seller;\n        TokenManager.Tokens tokenID;\n        uint128 paymentAmount;\n        uint128 stakeAmount;\n        EscrowStatus status;\n        AgreementParams agreementParams;\n    }\n\n    struct AgreementParams {\n        uint120 ratio;\n        Griefing.RatioType ratioType;\n        uint128 countdownLength;\n    }\n\n    event Initialized(\n        address operator,\n        address buyer,\n        address seller,\n        TokenManager.Tokens tokenID,\n        uint256 paymentAmount,\n        uint256 stakeAmount,\n        uint256 countdownLength,\n        bytes metadata,\n        bytes agreementParams\n    );\n    event StakeDeposited(address seller, uint256 amount);\n    event PaymentDeposited(address buyer, uint256 amount);\n    event Finalized(address agreement);\n    event DataSubmitted(bytes data);\n    event Cancelled();\n\n    /// @notice Constructor used to initialize the escrow parameters.\n    /// @dev Access Control: only factory\n    ///      State Machine: before all\n    /// @param operator address of the operator that overrides access control. Optional parameter. Passing the address(0) will disable operator functionality.\n    /// @param buyer address of the buyer. Optional parameter. This address is the only one able to deposit the payment. If not set, the first to deposit the payment becomes the buyer.\n    /// @param seller address of the seller. Optional parameter. This address is the only one able to deposit the stake. If not set, the first to deposit the stake becomes the seller.\n    /// @param tokenID TokenManager.Tokens ID of the ERC20 token. Required parameter. This ID must be one of the IDs supported by TokenManager.\n    /// @param paymentAmount uint256 amount of tokens (18 decimals) to be deposited by buyer as payment. Required parameter. This number must fit in a uint128 for optimization reasons.\n    /// @param stakeAmount uint256 amount of tokens (18 decimals) to be deposited by seller as stake. Required parameter. This number must fit in a uint128 for optimization reasons.\n    /// @param escrowCountdown uint256 amount of time (in seconds) the seller has to finalize the escrow after the payment and stake is deposited. Required parameter.\n    /// @param metadata bytes data (any format) to emit as event on initialization. Optional parameter.\n    /// @param agreementParams bytes ABI-encoded parameters used by CountdownGriefing agreement on initialization. Required parameter.\n    ///                        This encoded data blob must contain the uint120 ratio, Griefing.RatioType ratioType, and uint128 agreementCountdown encoded as `abi.encode(ratio, ratioType, agreementCountdown)`.\n    ///                        See CountdownGriefing initialize function for additional details.\n    function initialize(\n        address operator,\n        address buyer,\n        address seller,\n        TokenManager.Tokens tokenID,\n        uint256 paymentAmount,\n        uint256 stakeAmount,\n        uint256 escrowCountdown,\n        bytes memory metadata,\n        bytes memory agreementParams\n    ) public initializeTemplate() {\n        // set participants if defined\n        if (buyer != address(0)) {\n            _data.buyer = buyer;\n        }\n        if (seller != address(0)) {\n            _data.seller = seller;\n        }\n\n        // set operator if defined\n        if (operator != address(0)) {\n            Operated._setOperator(operator);\n        }\n\n        // set token\n        require(TokenManager.isValidTokenID(tokenID), 'invalid token');\n        _data.tokenID = tokenID;\n\n        // set amounts if defined\n        if (paymentAmount != uint256(0)) {\n            require(paymentAmount <= uint256(uint128(paymentAmount)), \"paymentAmount is too large\");\n            _data.paymentAmount = uint128(paymentAmount);\n        }\n        if (stakeAmount != uint256(0)) {\n            require(stakeAmount == uint256(uint128(stakeAmount)), \"stakeAmount is too large\");\n            _data.stakeAmount = uint128(stakeAmount);\n        }\n\n        // set countdown length\n        Countdown._setLength(escrowCountdown);\n\n        // set metadata if defined\n        if (metadata.length != 0) {\n            EventMetadata._setMetadata(metadata);\n        }\n\n        // set agreementParams if defined\n        if (agreementParams.length != 0) {\n            (\n                uint256 ratio,\n                Griefing.RatioType ratioType,\n                uint256 agreementCountdown\n            ) = abi.decode(agreementParams, (uint256, Griefing.RatioType, uint256));\n            require(ratio == uint256(uint120(ratio)), \"ratio out of bounds\");\n            require(agreementCountdown == uint256(uint128(agreementCountdown)), \"agreementCountdown out of bounds\");\n            _data.agreementParams = AgreementParams(uint120(ratio), ratioType, uint128(agreementCountdown));\n        }\n\n        // emit event\n        emit Initialized(operator, buyer, seller, tokenID, paymentAmount, stakeAmount, escrowCountdown, metadata, agreementParams);\n    }\n\n    /// @notice Emit metadata event.\n    /// @dev Access Control: operator\n    ///      State Machine: always\n    /// @param metadata Data (any format) to emit as event\n    function setMetadata(bytes memory metadata) public {\n        // restrict access\n        require(Operated.isOperator(msg.sender), \"only operator\");\n\n        // update metadata\n        EventMetadata._setMetadata(metadata);\n    }\n\n    /// @notice Deposit Stake and set seller address.\n    ///          - tokens (ERC-20) are transfered from the caller and requires approval of this contract for appropriate amount.\n    ///          - if buyer already deposited the payment, finalize the escrow.\n    /// @dev Access Control: anyone\n    ///      State Machine: before finalize() OR before cancel()\n    /// @param seller address of the seller\n    function depositAndSetSeller(address seller) public {\n        // restrict state machine\n        require(_data.seller == address(0), \"seller already set\");\n\n        // set seller\n        _data.seller = seller;\n\n        // deposit stake\n        _depositStake();\n    }\n\n    /// @notice Deposit Stake.\n    ///          - tokens (ERC-20) are transfered from the caller and requires approval of this contract for appropriate amount.\n    ///          - if buyer already deposited the payment, finalize the escrow.\n    /// @dev Access Control: buyer OR operator\n    ///      State Machine: before finalize() OR before cancel()\n    function depositStake() public {\n        // restrict access control\n        require(isSeller(msg.sender) || Operated.isOperator(msg.sender), \"only seller or operator\");\n\n        // restrict state machine\n        require(_data.seller != address(0), \"seller not yet set\");\n\n        // deposit stake\n        _depositStake();\n    }\n\n    function _depositStake() private {\n        // restrict state machine\n        require(isOpen() || onlyPaymentDeposited(), \"can only deposit stake once\");\n\n        // declare storage variables in memory\n        address seller = _data.seller;\n        uint256 stakeAmount = uint256(_data.stakeAmount);\n\n        // Add the stake amount\n        if (stakeAmount != uint256(0)) {\n            Staking._addStake(_data.tokenID, seller, msg.sender, stakeAmount);\n        }\n\n        // emit event\n        emit StakeDeposited(seller, stakeAmount);\n\n        // If payment is deposited, finalize the escrow\n        if (onlyPaymentDeposited()) {\n            _data.status = EscrowStatus.isDeposited;\n            finalize();\n        } else {\n            _data.status = EscrowStatus.onlyStakeDeposited;\n        }\n    }\n\n    /// @notice Deposit Payment and set buyer address.\n    ///          - tokens (ERC-20) are transfered from the caller and requires approval of this contract for appropriate amount.\n    ///          - if seller already deposited the stake, start the finalization countdown.\n    /// @dev Access Control: anyone\n    ///      State Machine: before finalize() OR before cancel()\n    /// @param buyer address of the buyer\n    function depositAndSetBuyer(address buyer) public {\n        // restrict state machine\n        require(_data.buyer == address(0), \"buyer already set\");\n\n        // set buyer\n        _data.buyer = buyer;\n\n        // deposit payment\n        _depositPayment();\n    }\n\n    /// @notice Deposit Payment.\n    ///          - tokens (ERC-20) are transfered from the caller and requires approval of this contract for appropriate amount.\n    ///          - if seller already deposited the stake, start the finalization countdown.\n    /// @dev Access Control: buyer OR operator\n    ///      State Machine: before finalize() OR before cancel()\n    function depositPayment() public {\n        // restrict access control\n        require(isBuyer(msg.sender) || Operated.isOperator(msg.sender), \"only buyer or operator\");\n\n        // restrict state machine\n        require(_data.buyer != address(0), \"buyer not yet set\");\n\n        // deposit payment\n        _depositPayment();\n    }\n\n    function _depositPayment() private {\n        // restrict state machine\n        require(isOpen() || onlyStakeDeposited(), \"can only deposit payment once\");\n\n        // declare storage variables in memory\n        address buyer = _data.buyer;\n        uint256 paymentAmount = uint256(_data.paymentAmount);\n\n        // Add the payment as a stake\n        if (paymentAmount != uint256(0)) {\n            Staking._addStake(_data.tokenID, buyer, msg.sender, paymentAmount);\n        }\n\n        // emit event\n        emit PaymentDeposited(buyer, paymentAmount);\n\n        // If stake is deposited, start countdown for seller to finalize\n        if (onlyStakeDeposited()) {\n            _data.status = EscrowStatus.isDeposited;\n            Countdown._start();\n        } else {\n            _data.status = EscrowStatus.onlyPaymentDeposited;\n        }\n    }\n\n    /// @notice Finalize escrow and execute completion script\n    ///          - create the agreement\n    ///          - transfer deposited stake and payment to agreement\n    ///          - start agreement countdown\n    ///          - disable agreement operator\n    /// @dev Access Control: seller OR operator\n    ///      State Machine: after depositStake() AND after depositPayment()\n    function finalize() public {\n        // restrict access control\n        require(isSeller(msg.sender) || Operated.isOperator(msg.sender), \"only seller or operator\");\n        // restrict state machine\n        require(isDeposited(), \"only after deposit\");\n\n        // create the agreement\n\n        address agreement;\n        {\n            // get the agreement factory address\n            address escrowFactory = Template.getFactory();\n            address escrowRegistry = iFactory(escrowFactory).getInstanceRegistry();\n            address agreementFactory = abi.decode(iRegistry(escrowRegistry).getFactoryData(escrowFactory), (address));\n\n            // encode initialization function\n            bytes memory initCalldata = abi.encodeWithSelector(\n                iFactory(agreementFactory).getInitSelector(),\n                address(this), // operator\n                _data.seller,  // staker\n                _data.buyer,   // counterparty\n                _data.tokenID, // tokenID\n                uint256(_data.agreementParams.ratio),           // griefRatio\n                _data.agreementParams.ratioType,                // ratioType\n                uint256(_data.agreementParams.countdownLength), // countdownLength\n                bytes(\"\")      // metadata\n            );\n\n            // deploy and initialize agreement contract\n            agreement = iFactory(agreementFactory).create(initCalldata);\n        }\n\n        // transfer stake and payment to the agreement\n\n        uint256 totalStake;\n        {\n            uint256 paymentAmount = Deposit._clearDeposit(_data.tokenID, _data.buyer);\n            uint256 stakeAmount = Deposit._clearDeposit(_data.tokenID, _data.seller);\n            totalStake = paymentAmount.add(stakeAmount);\n        }\n\n        if (totalStake > 0) {\n            TokenManager._approve(_data.tokenID, agreement, totalStake);\n            CountdownGriefing(agreement).increaseStake(totalStake);\n        }\n\n        // start agreement countdown\n\n        CountdownGriefing(agreement).startCountdown();\n\n        // transfer operator\n        address operator = Operated.getOperator();\n        if (operator != address(0)) {\n            CountdownGriefing(agreement).transferOperator(operator);\n        } else {\n            CountdownGriefing(agreement).renounceOperator();\n        }\n\n        // update status\n        _data.status = EscrowStatus.isFinalized;\n\n        // delete storage\n        delete _data.tokenID;\n        delete _data.paymentAmount;\n        delete _data.stakeAmount;\n        delete _data.agreementParams;\n\n        // emit event\n        emit Finalized(agreement);\n    }\n\n    /// @notice Submit data to the buyer\n    /// @dev Access Control: seller OR operator\n    ///      State Machine: after finalize()\n    /// @param data Data (any format) to submit to the buyer\n    function submitData(bytes memory data) public {\n        // restrict access control\n        require(isSeller(msg.sender) || Operated.isOperator(msg.sender), \"only seller or operator\");\n        // restrict state machine\n        require(isFinalized(), \"only after finalized\");\n\n        // emit event\n        emit DataSubmitted(data);\n    }\n\n    /// @notice Cancel escrow because no interested counterparty\n    ///          - return deposit to caller\n    ///          - close escrow\n    /// @dev Access Control: seller OR buyer OR operator\n    ///      State Machine: before depositStake() OR before depositPayment()\n    function cancel() public {\n        // restrict access control\n        require(isSeller(msg.sender) || isBuyer(msg.sender) || Operated.isOperator(msg.sender), \"only seller or buyer or operator\");\n        // restrict state machine\n        require(isOpen() || onlyStakeDeposited() || onlyPaymentDeposited(), \"only before deposits are completed\");\n\n        // cancel escrow and return deposits\n        _cancel();\n    }\n\n    /// @notice Cancel escrow if seller does not finalize\n    ///          - return stake to seller\n    ///          - return payment to buyer\n    ///          - close escrow\n    /// @dev Access Control: buyer OR operator\n    ///      State Machine: after depositStake() AND after depositPayment() AND after Countdown.isOver()\n    function timeout() public {\n        // restrict access control\n        require(isBuyer(msg.sender) || Operated.isOperator(msg.sender), \"only buyer or operator\");\n        // restrict state machine\n        require(isDeposited() && Countdown.isOver(), \"only after countdown ended\");\n\n        // cancel escrow and return deposits\n        _cancel();\n    }\n\n    function _cancel() private {\n        // declare storage variables in memory\n        address seller = _data.seller;\n        address buyer = _data.buyer;\n        TokenManager.Tokens tokenID = _data.tokenID;\n\n        // return stake to seller\n        if (Deposit.getDeposit(tokenID, seller) != 0) {\n            Staking._takeFullStake(tokenID, seller, seller);\n        }\n\n        // return payment to buyer\n        if (Deposit.getDeposit(tokenID, buyer) != 0) {\n            Staking._takeFullStake(tokenID, buyer, buyer);\n        }\n\n        // update status\n        _data.status = EscrowStatus.isCancelled;\n\n        // delete storage\n        delete _data.tokenID;\n        delete _data.paymentAmount;\n        delete _data.stakeAmount;\n        delete _data.agreementParams;\n\n        // emit event\n        emit Cancelled();\n    }\n\n    /// @notice Called by the operator to transfer control to new operator\n    /// @dev Access Control: operator\n    ///      State Machine: anytime\n    /// @param operator Address of the new operator\n    function transferOperator(address operator) public {\n        // restrict access\n        require(Operated.isOperator(msg.sender), \"only operator\");\n\n        // transfer operator\n        Operated._transferOperator(operator);\n    }\n\n    /// @notice Called by the operator to renounce control\n    /// @dev Access Control: operator\n    ///      State Machine: anytime\n    function renounceOperator() public {\n        // restrict access\n        require(Operated.isOperator(msg.sender), \"only operator\");\n\n        // renounce operator\n        Operated._renounceOperator();\n    }\n\n    /// View functions\n\n    /// @notice Get the address of the buyer (if set)\n    /// @return buyer address of the buyer\n    function getBuyer() public view returns (address buyer) {\n        return _data.buyer;\n    }\n\n    /// @notice Validate if the address matches the stored buyer address\n    /// @param caller address to validate\n    /// @return validity bool true if matching address\n    function isBuyer(address caller) internal view returns (bool validity) {\n        return caller == getBuyer();\n    }\n\n    /// @notice Get the address of the seller (if set)\n    /// @return buyer address of the buyer\n    function getSeller() public view returns (address seller) {\n        return _data.seller;\n    }\n\n    /// @notice Validate if the address matches the stored seller address\n    /// @param caller address to validate\n    /// @return validity bool true if matching address\n    function isSeller(address caller) internal view returns (bool validity) {\n        return caller == getSeller();\n    }\n\n    /// @notice Return the amount of tokens deposited by the user\n    /// @param user address of the user to query the deposit\n    /// @return amount uint256 amount of tokens deposited\n    function getDeposit(address user) public view returns (uint256 amount) {\n        return Deposit.getDeposit(_data.tokenID, user);\n    }\n\n    /// @notice Get the data from storage.\n    /// @return tokenID TokenManager.Tokens ID of the ERC20 token.\n    /// @return uint128 paymentAmount set in initialization.\n    /// @return uint128 stakeAmount set in initialization.\n    /// @return uint120 ratio used for initialization of agreement on completion.\n    /// @return Griefing.RatioType ratioType used for initialization of agreement on completion.\n    /// @return uint128 countdownLength used for initialization of agreement on completion.\n    function getData() public view returns (\n        TokenManager.Tokens tokenID,\n        uint128 paymentAmount,\n        uint128 stakeAmount,\n        uint120 ratio,\n        Griefing.RatioType ratioType,\n        uint128 countdownLength\n    ) {\n        return (\n            _data.tokenID,\n            _data.paymentAmount,\n            _data.stakeAmount,\n            _data.agreementParams.ratio,\n            _data.agreementParams.ratioType,\n            _data.agreementParams.countdownLength\n        );\n    }\n\n    enum EscrowStatus { isOpen, onlyStakeDeposited, onlyPaymentDeposited, isDeposited, isFinalized, isCancelled }\n    /// @notice Return the status of the state machine\n    /// @return EscrowStatus status from of the following states:\n    ///          - isOpen: initialized but no deposits made\n    ///          - onlyStakeDeposited: only stake deposit completed\n    ///          - onlyPaymentDeposited: only payment deposit completed\n    ///          - isDeposited: both payment and stake deposit is completed\n    ///          - isFinalized: the escrow completed successfully\n    ///          - isCancelled: the escrow was cancelled\n    function getEscrowStatus() public view returns (EscrowStatus status) {\n        return _data.status;\n    }\n\n    /// @notice Validate if the state machine is in the EscrowStatus.isOpen state\n    /// @return validity bool true if correct state\n    function isOpen() internal view returns (bool validity) {\n        return getEscrowStatus() == EscrowStatus.isOpen;\n    }\n\n    /// @notice Validate if the state machine is in the EscrowStatus.onlyStakeDeposited state\n    /// @return validity bool true if correct state\n    function onlyStakeDeposited() internal view returns (bool validity) {\n        return getEscrowStatus() == EscrowStatus.onlyStakeDeposited;\n    }\n\n    /// @notice Validate if the state machine is in the EscrowStatus.onlyPaymentDeposited state\n    /// @return validity bool true if correct state\n    function onlyPaymentDeposited() internal view returns (bool validity) {\n        return getEscrowStatus() == EscrowStatus.onlyPaymentDeposited;\n    }\n\n    /// @notice Validate if the state machine is in the EscrowStatus.isDeposited state\n    /// @return validity bool true if correct state\n    function isDeposited() internal view returns (bool validity) {\n        return getEscrowStatus() == EscrowStatus.isDeposited;\n    }\n\n    /// @notice Validate if the state machine is in the EscrowStatus.isFinalized state\n    /// @return validity bool true if correct state\n    function isFinalized() internal view returns (bool validity) {\n        return getEscrowStatus() == EscrowStatus.isFinalized;\n    }\n\n    /// @notice Validate if the state machine is in the EscrowStatus.isCancelled state\n    /// @return validity bool true if correct state\n    function isCancelled() internal view returns (bool validity) {\n        return getEscrowStatus() == EscrowStatus.isCancelled;\n    }\n}\n",
  "compiler": {
    "name": "solc",
    "version": "0.5.16+commit.9c3226ce.Emscripten.clang",
    "optimizer": false,
    "runs": 200
  }
}
