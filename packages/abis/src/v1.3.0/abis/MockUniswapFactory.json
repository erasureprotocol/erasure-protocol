{
  "contractName": "MockUniswapFactory",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "exchange",
          "type": "address"
        }
      ],
      "name": "NewExchange",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "tokenCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "exchange",
          "type": "address"
        }
      ],
      "name": "createExchange",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getExchange",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "exchange",
          "type": "address"
        }
      ],
      "name": "getToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "token_id",
          "type": "uint256"
        }
      ],
      "name": "getTokenWithId",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": "0x608060405234801561001057600080fd5b50610674806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806306f2bf621461005c57806359770438146100e05780639f181b5e14610164578063aa65a6c014610182578063f8e26217146101f0575b600080fd5b61009e6004803603602081101561007257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610294565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610122600480360360208110156100f657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506102fd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61016c610366565b6040518082815260200191505060405180910390f35b6101ae6004803603602081101561019857600080fd5b810190808035906020019092919050505061036c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102526004803603604081101561020657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506103a9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60005481565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156103e457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461047c57600080fd5b81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160005401905080600081905550836003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f9d42cb017eb05bd8944ab536a8b35bc68085931dd5f4356489801453923953f960405160405180910390a3829150509291505056fea265627a7a72315820cd654135d6a1964c6113406f9f379a750c96e1025a64a8f18638ae61e6aa066664736f6c634300050d0032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c806306f2bf621461005c57806359770438146100e05780639f181b5e14610164578063aa65a6c014610182578063f8e26217146101f0575b600080fd5b61009e6004803603602081101561007257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610294565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610122600480360360208110156100f657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506102fd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61016c610366565b6040518082815260200191505060405180910390f35b6101ae6004803603602081101561019857600080fd5b810190808035906020019092919050505061036c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102526004803603604081101561020657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506103a9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60005481565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156103e457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461047c57600080fd5b81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160005401905080600081905550836003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f9d42cb017eb05bd8944ab536a8b35bc68085931dd5f4356489801453923953f960405160405180910390a3829150509291505056fea265627a7a72315820cd654135d6a1964c6113406f9f379a750c96e1025a64a8f18638ae61e6aa066664736f6c634300050d0032",
  "sourceMap": "64:1464:40:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;64:1464:40;;;;;;;",
  "deployedSourceMap": "64:1464:40:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;64:1464:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1179:116;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1179:116:40;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1299:111;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1299:111:40;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;289:25;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1414:111;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1414:111:40;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;621:433;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;621:433:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1179:116;1236:15;1266:17;:24;1284:5;1266:24;;;;;;;;;;;;;;;;;;;;;;;;;1259:31;;1179:116;;;:::o;1299:111::-;1356:7;1378:17;:27;1396:8;1378:27;;;;;;;;;;;;;;;;;;;;;;;;;1371:34;;1299:111;;;:::o;289:25::-;;;;:::o;1414:111::-;1477:7;1499:11;:21;1511:8;1499:21;;;;;;;;;;;;;;;;;;;;;1492:28;;1414:111;;;:::o;621:433::-;702:15;750:1;733:19;;:5;:19;;;;725:28;;;;;;803:1;767:38;;:17;:24;785:5;767:24;;;;;;;;;;;;;;;;;;;;;;;;;:38;;;759:47;;;;;;839:8;812:17;:24;830:5;812:24;;;;;;;;;;;;;;;;:35;;;;;;;;;;;;;;;;;;883:5;853:17;:27;871:8;853:27;;;;;;;;;;;;;;;;:35;;;;;;;;;;;;;;;;;;894:16;926:1;913:10;;:14;894:33;;946:8;933:10;:21;;;;984:5;960:11;:21;972:8;960:21;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;1019:8;1000:28;;1012:5;1000:28;;;;;;;;;;;;1041:8;1034:15;;;621:433;;;;:::o",
  "source": "pragma solidity ^0.5.13;\n\nimport \"./MockUniswapExchange.sol\";\n\n\ncontract MockUniswapFactory {\n\n  /***********************************|\n  |       Events And Variables        |\n  |__________________________________*/\n\n  event NewExchange(address indexed token, address indexed exchange);\n\n  uint256 public tokenCount;\n  mapping (address => address payable) internal token_to_exchange;\n  mapping (address => address) internal exchange_to_token;\n  mapping (uint256 => address) internal id_to_token;\n\n  /***********************************|\n  |         Factory Functions         |\n  |__________________________________*/\n  \n  function createExchange(address token, address payable exchange) public returns (address payable) {\n    require(token != address(0));\n    require(token_to_exchange[token] == address(0));\n    token_to_exchange[token] = exchange;\n    exchange_to_token[exchange] = token;\n    uint256 token_id = tokenCount + 1;\n    tokenCount = token_id;\n    id_to_token[token_id] = token;\n    emit NewExchange(token, exchange);\n    return exchange;\n  }\n\n  /***********************************|\n  |         Getter Functions          |\n  |__________________________________*/\n\n  function getExchange(address token) public view returns (address payable) {\n    return token_to_exchange[token];\n  }\n\n  function getToken(address exchange) public view returns (address) {\n    return exchange_to_token[exchange];\n  }\n\n  function getTokenWithId(uint256 token_id) public view returns (address) {\n    return id_to_token[token_id];\n  }\n\n}"
}
