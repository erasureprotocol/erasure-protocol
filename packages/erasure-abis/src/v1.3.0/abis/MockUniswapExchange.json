{
  "contractName": "MockUniswapExchange",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_addr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "uniswap_factory",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eth_amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "token_amount",
          "type": "uint256"
        }
      ],
      "name": "AddLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokens_sold",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eth_bought",
          "type": "uint256"
        }
      ],
      "name": "EthPurchase",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eth_amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "token_amount",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eth_sold",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokens_bought",
          "type": "uint256"
        }
      ],
      "name": "TokenPurchase",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "input_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "input_reserve",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "output_reserve",
          "type": "uint256"
        }
      ],
      "name": "getInputPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "output_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "input_reserve",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "output_reserve",
          "type": "uint256"
        }
      ],
      "name": "getOutputPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "min_tokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "ethToTokenSwapInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "min_tokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "ethToTokenTransferInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokens_bought",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "ethToTokenSwapOutput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokens_bought",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "ethToTokenTransferOutput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokens_sold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "min_eth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "tokenToEthSwapInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokens_sold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "min_eth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "tokenToEthTransferInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eth_bought",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max_tokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "tokenToEthSwapOutput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eth_bought",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max_tokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "tokenToEthTransferOutput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokens_sold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "min_tokens_bought",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "min_eth_bought",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token_addr",
          "type": "address"
        }
      ],
      "name": "tokenToTokenSwapInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokens_sold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "min_tokens_bought",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "min_eth_bought",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token_addr",
          "type": "address"
        }
      ],
      "name": "tokenToTokenTransferInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokens_bought",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max_tokens_sold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max_eth_sold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token_addr",
          "type": "address"
        }
      ],
      "name": "tokenToTokenSwapOutput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokens_bought",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max_tokens_sold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max_eth_sold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token_addr",
          "type": "address"
        }
      ],
      "name": "tokenToTokenTransferOutput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokens_sold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "min_tokens_bought",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "min_eth_bought",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "exchange_addr",
          "type": "address"
        }
      ],
      "name": "tokenToExchangeSwapInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokens_sold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "min_tokens_bought",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "min_eth_bought",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "exchange_addr",
          "type": "address"
        }
      ],
      "name": "tokenToExchangeTransferInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokens_bought",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max_tokens_sold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max_eth_sold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "exchange_addr",
          "type": "address"
        }
      ],
      "name": "tokenToExchangeSwapOutput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokens_bought",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max_tokens_sold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max_eth_sold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "exchange_addr",
          "type": "address"
        }
      ],
      "name": "tokenToExchangeTransferOutput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eth_sold",
          "type": "uint256"
        }
      ],
      "name": "getEthToTokenInputPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokens_bought",
          "type": "uint256"
        }
      ],
      "name": "getEthToTokenOutputPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokens_sold",
          "type": "uint256"
        }
      ],
      "name": "getTokenToEthInputPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eth_bought",
          "type": "uint256"
        }
      ],
      "name": "getTokenToEthOutputPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "tokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "factoryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "min_liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max_tokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "min_eth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "min_tokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061021a5760003560e01c8063966dae0e11610123578063d4e4841d116100ab578063f39b5b9b1161006f578063f39b5b9b14610f41578063f3c0efe914610f8d578063f552d91b1461103a578063f88bf15a146110e7578063fd11c2231461115b5761021a565b8063d4e4841d14610c72578063dd62ed3e14610cf5578063ddf7e1a714610d7a578063ea650c7d14610e07578063ec384a3e14610e945761021a565b8063a9059cbb116100f2578063a9059cbb14610a2a578063ad65d76d14610a9d578063b040d54514610b09578063b1cb43bf14610b96578063cd7724c314610c235761021a565b8063966dae0e1461085c578063981a1327146108b35780639d76ea5814610960578063a457c2d7146109b75761021a565b8063422f1043116101a65780637237e031116101755780637237e0311461069957806389f2a8711461071c57806395b68fe71461077f57806395d89b41146107ce57806395e3c50b146107f95761021a565b8063422f10431461054357806359e94862146105995780636b1d4db7146105e857806370a08231146106345761021a565b806318160ddd116101ed57806318160ddd1461039857806323b872dd146103c35780632640f62c14610456578063313ce567146104a557806339509351146104d05761021a565b8063013efd8b1461022b57806306fdde031461028e578063095ea7b3146102b95780630b5736381461032c575b6102283460014233336111be565b50005b34801561023757600080fd5b506102786004803603606081101561024e57600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050611448565b6040518082815260200191505060405180910390f35b34801561029a57600080fd5b506102a3611460565b6040518082815260200191505060405180910390f35b3480156102c557600080fd5b50610312600480360360408110156102dc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611466565b604051808215151515815260200191505060405180910390f35b6103826004803603606081101561034257600080fd5b810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611484565b6040518082815260200191505060405180910390f35b3480156103a457600080fd5b506103ad61150e565b6040518082815260200191505060405180910390f35b3480156103cf57600080fd5b5061043c600480360360608110156103e657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611518565b604051808215151515815260200191505060405180910390f35b34801561046257600080fd5b5061048f6004803603602081101561047957600080fd5b81019080803590602001909291905050506115f1565b6040518082815260200191505060405180910390f35b3480156104b157600080fd5b506104ba611707565b6040518082815260200191505060405180910390f35b3480156104dc57600080fd5b50610529600480360360408110156104f357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061170d565b604051808215151515815260200191505060405180910390f35b6105836004803603606081101561055957600080fd5b810190808035906020019092919080359060200190929190803590602001909291905050506117c0565b6040518082815260200191505060405180910390f35b3480156105a557600080fd5b506105d2600480360360208110156105bc57600080fd5b81019080803590602001909291905050506120f4565b6040518082815260200191505060405180910390f35b61061e600480360360408110156105fe57600080fd5b810190808035906020019092919080359060200190929190505050612210565b6040518082815260200191505060405180910390f35b34801561064057600080fd5b506106836004803603602081101561065757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612227565b6040518082815260200191505060405180910390f35b3480156106a557600080fd5b50610706600480360360808110156106bc57600080fd5b81019080803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061226f565b6040518082815260200191505060405180910390f35b34801561072857600080fd5b506107696004803603606081101561073f57600080fd5b810190808035906020019092919080359060200190929190803590602001909291905050506122fa565b6040518082815260200191505060405180910390f35b34801561078b57600080fd5b506107b8600480360360208110156107a257600080fd5b81019080803590602001909291905050506123ee565b6040518082815260200191505060405180910390f35b3480156107da57600080fd5b506107e361250a565b6040518082815260200191505060405180910390f35b34801561080557600080fd5b506108466004803603606081101561081c57600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050612510565b6040518082815260200191505060405180910390f35b34801561086857600080fd5b50610871612528565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156108bf57600080fd5b5061094a600480360360c08110156108d657600080fd5b8101908080359060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612552565b6040518082815260200191505060405180910390f35b34801561096c57600080fd5b506109756125a8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156109c357600080fd5b50610a10600480360360408110156109da57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506125d2565b604051808215151515815260200191505060405180910390f35b348015610a3657600080fd5b50610a8360048036036040811015610a4d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061269f565b604051808215151515815260200191505060405180910390f35b610af360048036036060811015610ab357600080fd5b810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506126bd565b6040518082815260200191505060405180910390f35b348015610b1557600080fd5b50610b80600480360360a0811015610b2c57600080fd5b8101908080359060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612747565b6040518082815260200191505060405180910390f35b348015610ba257600080fd5b50610c0d600480360360a0811015610bb957600080fd5b8101908080359060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612841565b6040518082815260200191505060405180910390f35b348015610c2f57600080fd5b50610c5c60048036036020811015610c4657600080fd5b810190808035906020019092919050505061285d565b6040518082815260200191505060405180910390f35b348015610c7e57600080fd5b50610cdf60048036036080811015610c9557600080fd5b81019080803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612973565b6040518082815260200191505060405180910390f35b348015610d0157600080fd5b50610d6460048036036040811015610d1857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506129fe565b6040518082815260200191505060405180910390f35b348015610d8657600080fd5b50610df1600480360360a0811015610d9d57600080fd5b8101908080359060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612a85565b6040518082815260200191505060405180910390f35b348015610e1357600080fd5b50610e7e600480360360a0811015610e2a57600080fd5b8101908080359060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612b7f565b6040518082815260200191505060405180910390f35b348015610ea057600080fd5b50610f2b600480360360c0811015610eb757600080fd5b8101908080359060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612b9b565b6040518082815260200191505060405180910390f35b610f7760048036036040811015610f5757600080fd5b810190808035906020019092919080359060200190929190505050612bf1565b6040518082815260200191505060405180910390f35b348015610f9957600080fd5b50611024600480360360c0811015610fb057600080fd5b8101908080359060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612c08565b6040518082815260200191505060405180910390f35b34801561104657600080fd5b506110d1600480360360c081101561105d57600080fd5b8101908080359060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612d03565b6040518082815260200191505060405180910390f35b3480156110f357600080fd5b5061113e6004803603608081101561110a57600080fd5b8101908080359060200190929190803590602001909291908035906020019092919080359060200190929190505050612dfe565b604051808381526020018281526020019250505060405180910390f35b34801561116757600080fd5b506111a86004803603606081101561117e57600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050613231565b6040518082815260200191505060405180910390f35b60004284101580156111d05750600086115b80156111dc5750600085115b6111e557600080fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561128657600080fd5b505afa15801561129a573d6000803e3d6000fd5b505050506040513d60208110156112b057600080fd5b8101908080519060200190929190505050905060006112f9886112f38a3073ffffffffffffffffffffffffffffffffffffffff16316132c990919063ffffffff16565b846122fa565b90508681101561130857600080fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156113b157600080fd5b505af11580156113c5573d6000803e3d6000fd5b505050506040513d60208110156113db57600080fd5b81019080805190602001909291905050506113f557600080fd5b80888673ffffffffffffffffffffffffffffffffffffffff167fcd60aa75dea3072fbc07ae6d7d856b5dc5f4eee88854f5b4abf7b680ef8bc50f60405160405180910390a4809250505095945050505050565b60006114578484843333613313565b90509392505050565b60035481565b600061147a6114736135fa565b8484613602565b6001905092915050565b60003073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141580156114ef5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b6114f857600080fd5b61150584348533866137f9565b90509392505050565b6000600254905090565b6000611525848484613adf565b6115e6846115316135fa565b6115e185604051806060016040528060288152602001614b7460289139600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006115976135fa565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613d959092919063ffffffff16565b613602565b600190509392505050565b60008082116115ff57600080fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156116a057600080fd5b505afa1580156116b4573d6000803e3d6000fd5b505050506040513d60208110156116ca57600080fd5b810190808051906020019092919050505090506116ff83823073ffffffffffffffffffffffffffffffffffffffff1631613231565b915050919050565b60055481565b60006117b661171a6135fa565b846117b1856001600061172b6135fa565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613e5590919063ffffffff16565b613602565b6001905092915050565b600042821180156117d15750600083115b80156117dd5750600034115b611832576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180614b9c602e913960400191505060405180910390fd5b600060025490506000811115611c4c576000851161184f57600080fd5b600061187b343073ffffffffffffffffffffffffffffffffffffffff16316132c990919063ffffffff16565b90506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561191e57600080fd5b505afa158015611932573d6000803e3d6000fd5b505050506040513d602081101561194857600080fd5b81019080805190602001909291905050509050600061198c6001846119768534613edd90919063ffffffff16565b8161197d57fe5b04613e5590919063ffffffff16565b90506000836119a48634613edd90919063ffffffff16565b816119ab57fe5b0490508188101580156119be5750888110155b6119c757600080fd5b611a18816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613e5590919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611a6d8186613e5590919063ffffffff16565b600281905550600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015611b5057600080fd5b505af1158015611b64573d6000803e3d6000fd5b505050506040513d6020811015611b7a57600080fd5b8101908080519060200190929190505050611b9457600080fd5b81343373ffffffffffffffffffffffffffffffffffffffff167f06239653922ac7bea6aa2b19dc486b9361821d37712eb796adfd38d81de278ca60405160405180910390a43373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a380955050505050506120ed565b600073ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614158015611cfa5750600073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b8015611d0a5750633b9aca003410155b611d7c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f494e56414c49445f56414c55450000000000000000000000000000000000000081525060200191505060405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306f2bf62600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611e5457600080fd5b505afa158015611e68573d6000803e3d6000fd5b505050506040513d6020811015611e7e57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614611eaf57600080fd5b600084905060003073ffffffffffffffffffffffffffffffffffffffff1631905080600281905550806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015611ff757600080fd5b505af115801561200b573d6000803e3d6000fd5b505050506040513d602081101561202157600080fd5b810190808051906020019092919050505061203b57600080fd5b81343373ffffffffffffffffffffffffffffffffffffffff167f06239653922ac7bea6aa2b19dc486b9361821d37712eb796adfd38d81de278ca60405160405180910390a43373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a38093505050505b9392505050565b600080821161210257600080fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156121a357600080fd5b505afa1580156121b7573d6000803e3d6000fd5b505050506040513d60208110156121cd57600080fd5b810190808051906020019092919050505090506000612204843073ffffffffffffffffffffffffffffffffffffffff163184613231565b90508092505050919050565b600061221f83348433336137f9565b905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60003073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141580156122da5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b6122e357600080fd5b6122f08585853386613f63565b9050949350505050565b6000808311801561230b5750600082115b61237d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f494e56414c49445f56414c55450000000000000000000000000000000000000081525060200191505060405180910390fd5b60006123946103e586613edd90919063ffffffff16565b905060006123ab8483613edd90919063ffffffff16565b905060006123d6836123c86103e889613edd90919063ffffffff16565b613e5590919063ffffffff16565b90508082816123e157fe5b0493505050509392505050565b60008082116123fc57600080fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561249d57600080fd5b505afa1580156124b1573d6000803e3d6000fd5b505050506040513d60208110156124c757600080fd5b8101908080519060200190929190505050905060006124fe84833073ffffffffffffffffffffffffffffffffffffffff16316122fa565b90508092505050919050565b60045481565b600061251f8484843333613f63565b90509392505050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60003073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561258d57600080fd5b61259c8787878733888861425c565b90509695505050505050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006126956125df6135fa565b8461269085604051806060016040528060258152602001614c1360259139600160006126096135fa565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613d959092919063ffffffff16565b613602565b6001905092915050565b60006126b36126ac6135fa565b8484613adf565b6001905092915050565b60003073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141580156127285750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b61273157600080fd5b61273e34858533866111be565b90509392505050565b600080600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306f2bf62846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156127e957600080fd5b505afa1580156127fd573d6000803e3d6000fd5b505050506040513d602081101561281357600080fd5b810190808051906020019092919050505090506128358787878733338761425c565b91505095945050505050565b6000612852868686863333886146e5565b905095945050505050565b600080821161286b57600080fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561290c57600080fd5b505afa158015612920573d6000803e3d6000fd5b505050506040513d602081101561293657600080fd5b8101908080519060200190929190505050905061296b833073ffffffffffffffffffffffffffffffffffffffff1631836122fa565b915050919050565b60003073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141580156129de5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b6129e757600080fd5b6129f48585853386613313565b9050949350505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600080600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306f2bf62846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015612b2757600080fd5b505afa158015612b3b573d6000803e3d6000fd5b505050506040513d6020811015612b5157600080fd5b81019080805190602001909291905050509050612b73878787873333876146e5565b91505095945050505050565b6000612b908686868633338861425c565b905095945050505050565b60003073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612bd657600080fd5b612be5878787873388886146e5565b90509695505050505050565b6000612c0034848433336111be565b905092915050565b600080600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306f2bf62846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015612caa57600080fd5b505afa158015612cbe573d6000803e3d6000fd5b505050506040513d6020811015612cd457600080fd5b81019080805190602001909291905050509050612cf68888888833898761425c565b9150509695505050505050565b600080600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306f2bf62846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015612da557600080fd5b505afa158015612db9573d6000803e3d6000fd5b505050506040513d6020811015612dcf57600080fd5b81019080805190602001909291905050509050612df1888888883389876146e5565b9150509695505050505050565b600080600086118015612e1057504283115b8015612e1c5750600085115b8015612e285750600084115b612e3157600080fd5b6000600254905060008111612e4557600080fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015612ee657600080fd5b505afa158015612efa573d6000803e3d6000fd5b505050506040513d6020811015612f1057600080fd5b81019080805190602001909291905050509050600082612f503073ffffffffffffffffffffffffffffffffffffffff16318b613edd90919063ffffffff16565b81612f5757fe5b049050600083612f70848c613edd90919063ffffffff16565b81612f7757fe5b049050888210158015612f8a5750878110155b612f9357600080fd5b612fe48a6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546132c990919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506130398a856132c990919063ffffffff16565b6002819055503373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015613085573d6000803e3d6000fd5b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561312f57600080fd5b505af1158015613143573d6000803e3d6000fd5b505050506040513d602081101561315957600080fd5b810190808051906020019092919050505061317357600080fd5b80823373ffffffffffffffffffffffffffffffffffffffff167f0fbf06c058b90cb038a618f8c2acbf6145f8b3570fd1fa56abb8f0f3f05b36e860405160405180910390a4600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8c6040518082815260200191505060405180910390a38181955095505050505094509492505050565b600080831180156132425750600082115b61324b57600080fd5b60006132746103e86132668787613edd90919063ffffffff16565b613edd90919063ffffffff16565b9050600061329f6103e561329188876132c990919063ffffffff16565b613edd90919063ffffffff16565b90506132be60018284816132af57fe5b04613e5590919063ffffffff16565b925050509392505050565b600061330b83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613d95565b905092915050565b60004284101580156133255750600086115b61332e57600080fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156133cf57600080fd5b505afa1580156133e3573d6000803e3d6000fd5b505050506040513d60208110156133f957600080fd5b81019080805190602001909291905050509050600061343088833073ffffffffffffffffffffffffffffffffffffffff1631613231565b90508087101561343f57600080fd5b8373ffffffffffffffffffffffffffffffffffffffff166108fc899081150290604051600060405180830381858888f19350505050158015613485573d6000803e3d6000fd5b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8630846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561356357600080fd5b505af1158015613577573d6000803e3d6000fd5b505050506040513d602081101561358d57600080fd5b81019080805190602001909291905050506135a757600080fd5b87818673ffffffffffffffffffffffffffffffffffffffff167f7f4091b46c33e918a0f3aa42307641d17bb67029427a5369e54b35398423870560405160405180910390a4809250505095945050505050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415613688576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180614bef6024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561370e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180614b0b6022913960400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600042841015801561380b5750600086115b80156138175750600085115b61382057600080fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156138c157600080fd5b505afa1580156138d5573d6000803e3d6000fd5b505050506040513d60208110156138eb57600080fd5b8101908080519060200190929190505050905060006139348861392e893073ffffffffffffffffffffffffffffffffffffffff16316132c990919063ffffffff16565b84613231565b9050600061394b82896132c990919063ffffffff16565b9050600081111561399e578573ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561399c573d6000803e3d6000fd5b505b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb868b6040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015613a4757600080fd5b505af1158015613a5b573d6000803e3d6000fd5b505050506040513d6020811015613a7157600080fd5b8101908080519060200190929190505050613a8b57600080fd5b88828773ffffffffffffffffffffffffffffffffffffffff167fcd60aa75dea3072fbc07ae6d7d856b5dc5f4eee88854f5b4abf7b680ef8bc50f60405160405180910390a481935050505095945050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415613b65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180614bca6025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613beb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180614ae86023913960400191505060405180910390fd5b613c5681604051806060016040528060268152602001614b2d602691396000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613d959092919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613ce9816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613e5590919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000838311158290613e42576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613e07578082015181840152602081019050613dec565b50505050905090810190601f168015613e345780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b600080828401905083811015613ed3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600080831415613ef05760009050613f5d565b6000828402905082848281613f0157fe5b0414613f58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180614b536021913960400191505060405180910390fd5b809150505b92915050565b6000428410158015613f755750600086115b8015613f815750600085115b613f8a57600080fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561402b57600080fd5b505afa15801561403f573d6000803e3d6000fd5b505050506040513d602081101561405557600080fd5b81019080805190602001909291905050509050600061408c88833073ffffffffffffffffffffffffffffffffffffffff16316122fa565b90506000819050878110156140a057600080fd5b8473ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156140e6573d6000803e3d6000fd5b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd87308c6040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156141c457600080fd5b505af11580156141d8573d6000803e3d6000fd5b505050506040513d60208110156141ee57600080fd5b810190808051906020019092919050505061420857600080fd5b80898773ffffffffffffffffffffffffffffffffffffffff167f7f4091b46c33e918a0f3aa42307641d17bb67029427a5369e54b35398423870560405160405180910390a480935050505095945050505050565b600042851015801561427a57506000881180156142795750600086115b5b61428357600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141580156142ec5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b6142f557600080fd5b60008273ffffffffffffffffffffffffffffffffffffffff166359e948628a6040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561434857600080fd5b505afa15801561435c573d6000803e3d6000fd5b505050506040513d602081101561437257600080fd5b810190808051906020019092919050505090506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561442657600080fd5b505afa15801561443a573d6000803e3d6000fd5b505050506040513d602081101561445057600080fd5b81019080805190602001909291905050509050600061448783833073ffffffffffffffffffffffffffffffffffffffff1631613231565b9050808a101580156144995750828910155b6144a257600080fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8830846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561457f57600080fd5b505af1158015614593573d6000803e3d6000fd5b505050506040513d60208110156145a957600080fd5b81019080805190602001909291905050506145c357600080fd5b8473ffffffffffffffffffffffffffffffffffffffff16630b573638848d8b8a6040518563ffffffff1660e01b8152600401808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200193505050506020604051808303818588803b15801561465257600080fd5b505af1158015614666573d6000803e3d6000fd5b50505050506040513d602081101561467d57600080fd5b81019080805190602001909291905050505082818873ffffffffffffffffffffffffffffffffffffffff167f7f4091b46c33e918a0f3aa42307641d17bb67029427a5369e54b35398423870560405160405180910390a4809350505050979650505050505050565b60004285101580156146f75750600088115b80156147035750600087115b801561470f5750600086115b61471857600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141580156147815750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b61478a57600080fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561482b57600080fd5b505afa15801561483f573d6000803e3d6000fd5b505050506040513d602081101561485557600080fd5b81019080805190602001909291905050509050600061488c8a833073ffffffffffffffffffffffffffffffffffffffff16316122fa565b90506000819050888110156148a057600080fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd88308e6040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561497d57600080fd5b505af1158015614991573d6000803e3d6000fd5b505050506040513d60208110156149a757600080fd5b81019080805190602001909291905050506149c157600080fd5b60008573ffffffffffffffffffffffffffffffffffffffff1663ad65d76d838d8c8b6040518563ffffffff1660e01b8152600401808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200193505050506020604051808303818588803b158015614a5257600080fd5b505af1158015614a66573d6000803e3d6000fd5b50505050506040513d6020811015614a7d57600080fd5b81019080805190602001909291905050509050818c8973ffffffffffffffffffffffffffffffffffffffff167f7f4091b46c33e918a0f3aa42307641d17bb67029427a5369e54b35398423870560405160405180910390a48094505050505097965050505050505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365556e697377617045786368616e6765236164644c69717569646974793a20494e56414c49445f415247554d454e5445524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa265627a7a7231582033b89e7d50c3ee319da5c23806ac1c58fc4eda4605dd42ca3617d320ee629eba64736f6c634300050d0032",
  "sourceMap": "122:27138:40:-;;;1382:472;8:9:-1;5:2;;;30:1;27;20:12;5:2;1382:472:40;;;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1382:472:40;;;;;;;;;;;;;;;;;;;;;;;;;1496:1;1468:30;;1476:7;;;;;;;;;;;1468:30;;;:62;;;;;1528:1;1502:28;;1510:5;;;;;;;;;;;1502:28;;;1468:62;:90;;;;;1556:1;1534:24;;:10;:24;;;;1468:90;1452:138;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1622:15;1596:7;;:42;;;;;;;;;;;;;;;;;;1659:10;1644:5;;:26;;;;;;;;;;;;;;;;;;1683:66;1676:73;;:4;:73;;;;1764:66;1755:75;;:6;:75;;;;1847:2;1836:8;:13;;;;1382:472;;122:27138;;;;;;",
  "deployedSourceMap": "122:27138:40:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2172:70;2188:9;2199:1;2202:15;2219:10;2231;2172:15;:70::i;:::-;;122:27138;10129:205;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10129:205:40;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10129:205:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;308:19;;8:9:-1;5:2;;;30:1;27;20:12;5:2;308:19:40;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2580:149:42;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2580:149:42;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2580:149:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;7033:288:40;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7033:288:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1639:89:42;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1639:89:42;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3187:300;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3187:300:42;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3187:300:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;23043:255:40;;8:9:-1;5:2;;;30:1;27;20:12;5:2;23043:255:40;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;23043:255:40;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;394:23;;8:9:-1;5:2;;;30:1;27;20:12;5:2;394:23:40;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3882:207:42;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3882:207:42;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3882:207:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;24242:1726:40;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;24242:1726:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;22047:297;;8:9:-1;5:2;;;30:1;27;20:12;5:2;22047:297:40;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;22047:297:40;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;6453:197;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6453:197:40;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1786:108:42;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1786:108:42;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1786:108:42;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;8882:297:40;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8882:297:40;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;8882:297:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2605:438;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2605:438:40;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2605:438:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;22552:293;;8:9:-1;5:2;;;30:1;27;20:12;5:2;22552:293:40;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;22552:293:40;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;353:21;;8:9:-1;5:2;;;30:1;27;20:12;5:2;353:21:40;;;:::i;:::-;;;;;;;;;;;;;;;;;;;8276:199;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8276:199:40;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8276:199:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;23538:90;;8:9:-1;5:2;;;30:1;27;20:12;5:2;23538:90:40;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;20861:411;;8:9:-1;5:2;;;30:1;27;20:12;5:2;20861:411:40;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;20861:411:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;23376:86;;8:9:-1;5:2;;;30:1;27;20:12;5:2;23376:86:40;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;4576:258:42;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4576:258:42;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4576:258:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;2097:155;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2097:155:42;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2097:155:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;5201:279:40;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5201:279:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;15528:398;;8:9:-1;5:2;;;30:1;27;20:12;5:2;15528:398:40;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;15528:398:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;17616:345;;8:9:-1;5:2;;;30:1;27;20:12;5:2;17616:345:40;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;17616:345:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;21596:247;;8:9:-1;5:2;;;30:1;27;20:12;5:2;21596:247:40;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;21596:247:40;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;10742:303;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10742:303:40;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;10742:303:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2310:132:42;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2310:132:42;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2310:132:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;12522:400:40;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12522:400:40;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;12522:400:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;19765:343;;8:9:-1;5:2;;;30:1;27;20:12;5:2;19765:343:40;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;19765:343:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;18727:413;;8:9:-1;5:2;;;30:1;27;20:12;5:2;18727:413:40;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;18727:413:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4628:190;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4628:190:40;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;16553:425;;8:9:-1;5:2;;;30:1;27;20:12;5:2;16553:425:40;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;16553:425:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;13553:427;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13553:427:40;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;13553:427:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;26321:935;;8:9:-1;5:2;;;30:1;27;20:12;5:2;26321:935:40;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;26321:935:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;3402:368;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3402:368:40;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3402:368:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3774:566;3906:7;3941:15;3929:8;:27;;:43;;;;;3971:1;3960:8;:12;3929:43;:61;;;;;3989:1;3976:10;:14;3929:61;3921:70;;;;;;3997:21;4021:5;;;;;;;;;;;:15;;;4045:4;4021:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4021:30:40;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4021:30:40;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4021:30:40;;;;;;;;;;;;;;;;3997:54;;4057:21;4081:75;4095:8;4105:35;4131:8;4113:4;4105:21;;;:25;;:35;;;;:::i;:::-;4142:13;4081;:75::i;:::-;4057:99;;4187:10;4170:13;:27;;4162:36;;;;;;4212:5;;;;;;;;;;;:14;;;4227:9;4238:13;4212:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4212:40:40;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4212:40:40;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4212:40:40;;;;;;;;;;;;;;;;4204:49;;;;;;4295:13;4285:8;4278:5;4264:45;;;;;;;;;;;;4322:13;4315:20;;;;3774:566;;;;;;;:::o;10129:205::-;10233:7;10255:74;10272:10;10284;10296:8;10306:10;10318;10255:16;:74::i;:::-;10248:81;;10129:205;;;;;:::o;308:19::-;;;;:::o;2580:149:42:-;2646:4;2662:39;2671:12;:10;:12::i;:::-;2685:7;2694:6;2662:8;:39::i;:::-;2718:4;2711:11;;2580:149;;;;:::o;7033:288:40:-;7151:7;7195:4;7174:26;;:9;:26;;;;:53;;;;;7225:1;7204:23;;:9;:23;;;;7174:53;7166:62;;;;;;7241:75;7258:13;7273:9;7284:8;7294:10;7306:9;7241:16;:75::i;:::-;7234:82;;7033:288;;;;;:::o;1639:89:42:-;1683:7;1709:12;;1702:19;;1639:89;:::o;3187:300::-;3276:4;3292:36;3302:6;3310:9;3321:6;3292:9;:36::i;:::-;3338:121;3347:6;3355:12;:10;:12::i;:::-;3369:89;3407:6;3369:89;;;;;;;;;;;;;;;;;:11;:19;3381:6;3369:19;;;;;;;;;;;;;;;:33;3389:12;:10;:12::i;:::-;3369:33;;;;;;;;;;;;;;;;:37;;:89;;;;;:::i;:::-;3338:8;:121::i;:::-;3476:4;3469:11;;3187:300;;;;;:::o;23043:255:40:-;23118:7;23154:1;23141:10;:14;23133:23;;;;;;23162:21;23186:5;;;;;;;;;;;:15;;;23210:4;23186:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;23186:30:40;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;23186:30:40;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;23186:30:40;;;;;;;;;;;;;;;;23162:54;;23229:64;23244:10;23256:13;23279:4;23271:21;;;23229:14;:64::i;:::-;23222:71;;;23043:255;;;:::o;394:23::-;;;;:::o;3882:207:42:-;3962:4;3978:83;3987:12;:10;:12::i;:::-;4001:7;4010:50;4049:10;4010:11;:25;4022:12;:10;:12::i;:::-;4010:25;;;;;;;;;;;;;;;:34;4036:7;4010:34;;;;;;;;;;;;;;;;:38;;:50;;;;:::i;:::-;3978:8;:83::i;:::-;4078:4;4071:11;;3882:207;;;;:::o;24242:1726:40:-;24349:7;24383:15;24372:8;:26;:44;;;;;24415:1;24402:10;:14;24372:44;:61;;;;;24432:1;24420:9;:13;24372:61;24364:120;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;24490:23;24516:12;;24490:38;;24557:1;24539:15;:19;24535:1429;;;24592:1;24576:13;:17;24568:26;;;;;;24602:19;24624:36;24650:9;24632:4;24624:21;;;:25;;:36;;;;:::i;:::-;24602:58;;24668:21;24692:5;;;;;;;;;;;:15;;;24716:4;24692:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;24692:30:40;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;24692:30:40;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;24692:30:40;;;;;;;;;;;;;;;;24668:54;;24730:20;24753:51;24802:1;24785:11;24754:28;24768:13;24754:9;:13;;:28;;;;:::i;:::-;:42;;;;;;24753:48;;:51;;;;:::i;:::-;24730:74;;24812:24;24872:11;24839:30;24853:15;24839:9;:13;;:30;;;;:::i;:::-;:44;;;;;;24812:71;;24913:12;24899:10;:26;;:63;;;;;24949:13;24929:16;:33;;24899:63;24891:72;;;;;;24995:43;25021:16;24995:9;:21;25005:10;24995:21;;;;;;;;;;;;;;;;:25;;:43;;;;:::i;:::-;24971:9;:21;24981:10;24971:21;;;;;;;;;;;;;;;:67;;;;25061:37;25081:16;25061:15;:19;;:37;;;;:::i;:::-;25046:12;:52;;;;25114:5;;;;;;;;;;;:18;;;25133:10;25153:4;25160:12;25114:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;25114:59:40;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;25114:59:40;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;25114:59:40;;;;;;;;;;;;;;;;25106:68;;;;;;25223:12;25212:9;25200:10;25187:49;;;;;;;;;;;;25270:10;25249:50;;25266:1;25249:50;;;25282:16;25249:50;;;;;;;;;;;;;;;;;;25314:16;25307:23;;;;;;;;;24535:1429;25388:1;25360:30;;25368:7;;;;;;;;;;;25360:30;;;;:62;;;;;25420:1;25394:28;;25402:5;;;;;;;;;;;25394:28;;;;25360:62;:89;;;;;25439:10;25426:9;:23;;25360:89;25352:115;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25530:4;25483:52;;:7;;;;;;;;;;;:19;;;25511:5;;;;;;;;;;;25483:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;25483:35:40;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;25483:35:40;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;25483:35:40;;;;;;;;;;;;;;;;:52;;;25475:61;;;;;;25544:20;25567:10;25544:33;;25585:25;25621:4;25613:21;;;25585:49;;25657:17;25642:12;:32;;;;25706:17;25682:9;:21;25692:10;25682:21;;;;;;;;;;;;;;;:41;;;;25739:5;;;;;;;;;;;:18;;;25758:10;25778:4;25785:12;25739:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;25739:59:40;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;25739:59:40;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;25739:59:40;;;;;;;;;;;;;;;;25731:68;;;;;;25848:12;25837:9;25825:10;25812:49;;;;;;;;;;;;25895:10;25874:51;;25891:1;25874:51;;;25907:17;25874:51;;;;;;;;;;;;;;;;;;25940:17;25933:24;;;;;24242:1726;;;;;;:::o;22047:297::-;22125:7;22164:1;22148:13;:17;22140:26;;;;;;22172:21;22196:5;;;;;;;;;;;:15;;;22220:4;22196:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;22196:30:40;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;22196:30:40;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;22196:30:40;;;;;;;;;;;;;;;;22172:54;;22232:16;22251:67;22266:13;22289:4;22281:21;;;22304:13;22251:14;:67::i;:::-;22232:86;;22331:8;22324:15;;;;22047:297;;;:::o;6453:197::-;6547:7;6569:76;6586:13;6601:9;6612:8;6622:10;6634;6569:16;:76::i;:::-;6562:83;;6453:197;;;;:::o;1786:108:42:-;1843:7;1869:9;:18;1879:7;1869:18;;;;;;;;;;;;;;;;1862:25;;1786:108;;;:::o;8882:297:40:-;9014:7;9058:4;9037:26;;:9;:26;;;;:53;;;;;9088:1;9067:23;;:9;:23;;;;9037:53;9029:62;;;;;;9104:70;9120:11;9133:7;9142:8;9152:10;9164:9;9104:15;:70::i;:::-;9097:77;;8882:297;;;;;;:::o;2605:438::-;2718:7;2757:1;2741:13;:17;:39;;;;;2779:1;2762:14;:18;2741:39;2733:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2804:29;2836:21;2853:3;2836:12;:16;;:21;;;;:::i;:::-;2804:53;;2863:17;2883:41;2909:14;2883:21;:25;;:41;;;;:::i;:::-;2863:61;;2930:19;2952:50;2980:21;2952:23;2970:4;2952:13;:17;;:23;;;;:::i;:::-;:27;;:50;;;;:::i;:::-;2930:72;;3027:11;3015:9;:23;;;;;;3008:30;;;;;2605:438;;;;;:::o;22552:293::-;22627:7;22664:1;22650:11;:15;22642:24;;;;;;22672:21;22696:5;;;;;;;;;;;:15;;;22720:4;22696:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;22696:30:40;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;22696:30:40;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;22696:30:40;;;;;;;;;;;;;;;;22672:54;;22732:18;22753:64;22767:11;22780:13;22803:4;22795:21;;;22753:13;:64::i;:::-;22732:85;;22830:10;22823:17;;;;22552:293;;;:::o;353:21::-;;;;:::o;8276:199::-;8377:7;8399:71;8415:11;8428:7;8437:8;8447:10;8459;8399:15;:71::i;:::-;8392:78;;8276:199;;;;;:::o;23538:90::-;23585:7;23615;;;;;;;;;;;23600:23;;23538:90;:::o;20861:411::-;21089:7;21136:4;21115:26;;:9;:26;;;;21107:35;;;;;;21155:112;21174:13;21189:15;21206:12;21220:8;21230:10;21242:9;21253:13;21155:18;:112::i;:::-;21148:119;;20861:411;;;;;;;;:::o;23376:86::-;23421:7;23451:5;;;;;;;;;;;23436:21;;23376:86;:::o;4576:258:42:-;4661:4;4677:129;4686:12;:10;:12::i;:::-;4700:7;4709:96;4748:15;4709:96;;;;;;;;;;;;;;;;;:11;:25;4721:12;:10;:12::i;:::-;4709:25;;;;;;;;;;;;;;;:34;4735:7;4709:34;;;;;;;;;;;;;;;;:38;;:96;;;;;:::i;:::-;4677:8;:129::i;:::-;4823:4;4816:11;;4576:258;;;;:::o;2097:155::-;2166:4;2182:42;2192:12;:10;:12::i;:::-;2206:9;2217:6;2182:9;:42::i;:::-;2241:4;2234:11;;2097:155;;;;:::o;5201:279:40:-;5314:7;5358:4;5337:26;;:9;:26;;;;:53;;;;;5388:1;5367:23;;:9;:23;;;;5337:53;5329:62;;;;;;5404:71;5420:9;5431:10;5443:8;5453:10;5465:9;5404:15;:71::i;:::-;5397:78;;5201:279;;;;;:::o;15528:398::-;15714:7;15732:29;15764:7;;;;;;;;;;;:19;;;15784:10;15764:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;15764:31:40;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;15764:31:40;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;15764:31:40;;;;;;;;;;;;;;;;15732:63;;15808:113;15827:13;15842:15;15859:12;15873:8;15883:10;15895;15907:13;15808:18;:113::i;:::-;15801:120;;;15528:398;;;;;;;:::o;17616:345::-;17817:7;17842:114;17860:11;17873:17;17892:14;17908:8;17918:10;17930;17942:13;17842:17;:114::i;:::-;17835:121;;17616:345;;;;;;;:::o;21596:247::-;21668:7;21702:1;21691:8;:12;21683:21;;;;;;21710;21734:5;;;;;;;;;;;:15;;;21758:4;21734:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;21734:30:40;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;21734:30:40;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;21734:30:40;;;;;;;;;;;;;;;;21710:54;;21777:61;21791:8;21809:4;21801:21;;;21824:13;21777;:61::i;:::-;21770:68;;;21596:247;;;:::o;10742:303::-;10877:7;10921:4;10900:26;;:9;:26;;;;:53;;;;;10951:1;10930:23;;:9;:23;;;;10900:53;10892:62;;;;;;10967:73;10984:10;10996;11008:8;11018:10;11030:9;10967:16;:73::i;:::-;10960:80;;10742:303;;;;;;:::o;2310:132:42:-;2382:7;2408:11;:18;2420:5;2408:18;;;;;;;;;;;;;;;:27;2427:7;2408:27;;;;;;;;;;;;;;;;2401:34;;2310:132;;;;:::o;12522:400:40:-;12709:7;12727:29;12759:7;;;;;;;;;;;:19;;;12779:10;12759:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12759:31:40;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;12759:31:40;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;12759:31:40;;;;;;;;;;;;;;;;12727:63;;12803:114;12821:11;12834:17;12853:14;12869:8;12879:10;12891;12903:13;12803:17;:114::i;:::-;12796:121;;;12522:400;;;;;;;:::o;19765:343::-;19965:7;19990:113;20009:13;20024:15;20041:12;20055:8;20065:10;20077;20089:13;19990:18;:113::i;:::-;19983:120;;19765:343;;;;;;;:::o;18727:413::-;18956:7;19003:4;18982:26;;:9;:26;;;;18974:35;;;;;;19022:113;19040:11;19053:17;19072:14;19088:8;19098:10;19110:9;19121:13;19022:17;:113::i;:::-;19015:120;;18727:413;;;;;;;;:::o;4628:190::-;4719:7;4741:72;4757:9;4768:10;4780:8;4790:10;4802;4741:15;:72::i;:::-;4734:79;;4628:190;;;;:::o;16553:425::-;16767:7;16785:29;16817:7;;;;;;;;;;;:19;;;16837:10;16817:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;16817:31:40;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;16817:31:40;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;16817:31:40;;;;;;;;;;;;;;;;16785:63;;16861:112;16880:13;16895:15;16912:12;16926:8;16936:10;16948:9;16959:13;16861:18;:112::i;:::-;16854:119;;;16553:425;;;;;;;;:::o;13553:427::-;13768:7;13786:29;13818:7;;;;;;;;;;;:19;;;13838:10;13818:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13818:31:40;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;13818:31:40;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;13818:31:40;;;;;;;;;;;;;;;;13786:63;;13862:113;13880:11;13893:17;13912:14;13928:8;13938:10;13950:9;13961:13;13862:17;:113::i;:::-;13855:120;;;13553:427;;;;;;;;:::o;26321:935::-;26433:7;26442;26474:1;26465:6;:10;:40;;;;;26490:15;26479:8;:26;26465:40;:55;;;;;26519:1;26509:7;:11;26465:55;:73;;;;;26537:1;26524:10;:14;26465:73;26457:82;;;;;;26545:23;26571:12;;26545:38;;26615:1;26597:15;:19;26589:28;;;;;;26623:21;26647:5;;;;;;;;;;;:15;;;26671:4;26647:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;26647:30:40;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;26647:30:40;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;26647:30:40;;;;;;;;;;;;;;;;26623:54;;26683:18;26740:15;26704:33;26723:4;26715:21;;;26704:6;:10;;:33;;;;:::i;:::-;:51;;;;;;26683:72;;26761:20;26812:15;26784:25;26795:13;26784:6;:10;;:25;;;;:::i;:::-;:43;;;;;;26761:66;;26855:7;26841:10;:21;;:51;;;;;26882:10;26866:12;:26;;26841:51;26833:60;;;;;;26924:33;26950:6;26924:9;:21;26934:10;26924:21;;;;;;;;;;;;;;;;:25;;:33;;;;:::i;:::-;26900:9;:21;26910:10;26900:21;;;;;;;;;;;;;;;:57;;;;26978:27;26998:6;26978:15;:19;;:27;;;;:::i;:::-;26963:12;:42;;;;27011:10;:19;;:31;27031:10;27011:31;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;27011:31:40;27056:5;;;;;;;;;;;:14;;;27071:10;27083:12;27056:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;27056:40:40;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;27056:40:40;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;27056:40:40;;;;;;;;;;;;;;;;27048:49;;;;;;27148:12;27136:10;27124;27108:53;;;;;;;;;;;;27201:1;27172:40;;27181:10;27172:40;;;27205:6;27172:40;;;;;;;;;;;;;;;;;;27226:10;27238:12;27218:33;;;;;;;;26321:935;;;;;;;:::o;3402:368::-;3517:7;3556:1;3540:13;:17;:39;;;;;3578:1;3561:14;:18;3540:39;3532:48;;;;;;3586:17;3606:42;3643:4;3606:32;3624:13;3606;:17;;:32;;;;:::i;:::-;:36;;:42;;;;:::i;:::-;3586:62;;3654:19;3676:44;3716:3;3677:33;3696:13;3677:14;:18;;:33;;;;:::i;:::-;3676:39;;:44;;;;:::i;:::-;3654:66;;3733:32;3763:1;3746:11;3734:9;:23;;;;;;3733:29;;:32;;;;:::i;:::-;3726:39;;;;3402:368;;;;;:::o;1274:134:52:-;1332:7;1358:43;1362:1;1365;1358:43;;;;;;;;;;;;;;;;;:3;:43::i;:::-;1351:50;;1274:134;;;;:::o;9186:624:40:-;9329:7;9364:15;9352:8;:27;;:45;;;;;9396:1;9383:10;:14;9352:45;9344:54;;;;;;9404:21;9428:5;;;;;;;;;;;:15;;;9452:4;9428:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9428:30:40;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9428:30:40;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9428:30:40;;;;;;;;;;;;;;;;9404:54;;9464:19;9486:64;9501:10;9513:13;9536:4;9528:21;;;9486:14;:64::i;:::-;9464:86;;9611:11;9597:10;:25;;9589:34;;;;;;9629:9;:18;;:30;9648:10;9629:30;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9629:30:40;9673:5;;;;;;;;;;;:18;;;9692:5;9707:4;9714:11;9673:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9673:53:40;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9673:53:40;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9673:53:40;;;;;;;;;;;;;;;;9665:62;;;;;;9770:10;9757:11;9750:5;9738:43;;;;;;;;;;;;9794:11;9787:18;;;;9186:624;;;;;;;:::o;788:96:51:-;833:15;867:10;860:17;;788:96;:::o;7431:332:42:-;7541:1;7524:19;;:5;:19;;;;7516:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7621:1;7602:21;;:7;:21;;;;7594:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7703:6;7673:11;:18;7685:5;7673:18;;;;;;;;;;;;;;;:27;7692:7;7673:27;;;;;;;;;;;;;;;:36;;;;7740:7;7724:32;;7733:5;7724:32;;;7749:6;7724:32;;;;;;;;;;;;;;;;;;7431:332;;;:::o;5484:682:40:-;5627:7;5662:15;5650:8;:27;;:48;;;;;5697:1;5681:13;:17;5650:48;:63;;;;;5712:1;5702:7;:11;5650:63;5642:72;;;;;;5720:21;5744:5;;;;;;;;;;;:15;;;5768:4;5744:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5744:30:40;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5744:30:40;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5744:30:40;;;;;;;;;;;;;;;;5720:54;;5780:16;5799:80;5814:13;5829:34;5855:7;5837:4;5829:21;;;:25;;:34;;;;:::i;:::-;5865:13;5799:14;:80::i;:::-;5780:99;;5921:18;5942:21;5954:8;5942:7;:11;;:21;;;;:::i;:::-;5921:42;;5986:1;5973:10;:14;5969:61;;;5997:5;:14;;:26;6012:10;5997:26;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5997:26:40;5969:61;6043:5;;;;;;;;;;;:14;;;6058:9;6069:13;6043:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6043:40:40;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6043:40:40;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6043:40:40;;;;;;;;;;;;;;;;6035:49;;;;;;6126:13;6116:8;6109:5;6095:45;;;;;;;;;;;;6153:8;6146:15;;;;;5484:682;;;;;;;:::o;5308:464:42:-;5423:1;5405:20;;:6;:20;;;;5397:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5506:1;5485:23;;:9;:23;;;;5477:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5579;5601:6;5579:71;;;;;;;;;;;;;;;;;:9;:17;5589:6;5579:17;;;;;;;;;;;;;;;;:21;;:71;;;;;:::i;:::-;5559:9;:17;5569:6;5559:17;;;;;;;;;;;;;;;:91;;;;5683:32;5708:6;5683:9;:20;5693:9;5683:20;;;;;;;;;;;;;;;;:24;;:32;;;;:::i;:::-;5660:9;:20;5670:9;5660:20;;;;;;;;;;;;;;;:55;;;;5747:9;5730:35;;5739:6;5730:35;;;5758:6;5730:35;;;;;;;;;;;;;;;;;;5308:464;;;:::o;1732:187:52:-;1818:7;1850:1;1845;:6;;1853:12;1837:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1837:29:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1876:9;1892:1;1888;:5;1876:17;;1911:1;1904:8;;;1732:187;;;;;:::o;834:176::-;892:7;911:9;927:1;923;:5;911:17;;951:1;946;:6;;938:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1002:1;995:8;;;834:176;;;;:::o;2159:459::-;2217:7;2463:1;2458;:6;2454:45;;;2487:1;2480:8;;;;2454:45;2509:9;2525:1;2521;:5;2509:17;;2553:1;2548;2544;:5;;;;;;:10;2536:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2610:1;2603:8;;;2159:459;;;;;:::o;7325:635:40:-;7465:7;7500:15;7488:8;:27;;:46;;;;;7533:1;7519:11;:15;7488:46;:61;;;;;7548:1;7538:7;:11;7488:61;7480:70;;;;;;7556:21;7580:5;;;;;;;;;;;:15;;;7604:4;7580:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7580:30:40;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7580:30:40;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7580:30:40;;;;;;;;;;;;;;;;7556:54;;7616:18;7637:64;7651:11;7664:13;7687:4;7679:21;;;7637:13;:64::i;:::-;7616:85;;7707:18;7728:10;7707:31;;7766:7;7752:10;:21;;7744:30;;;;;;7780:9;:18;;:30;7799:10;7780:30;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7780:30:40;7824:5;;;;;;;;;;;:18;;;7843:5;7858:4;7865:11;7824:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7824:53:40;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7824:53:40;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7824:53:40;;;;;;;;;;;;;;;;7816:62;;;;;;7921:10;7908:11;7901:5;7889:43;;;;;;;;;;;;7945:10;7938:17;;;;;7325:635;;;;;;;:::o;13984:1036::-;14222:7;14260:15;14248:8;:27;;:70;;;;;14296:1;14280:13;:17;:37;;;;;14316:1;14301:12;:16;14280:37;14248:70;14240:79;;;;;;14358:4;14333:30;;:13;:30;;;;:61;;;;;14392:1;14367:27;;:13;:27;;;;14333:61;14325:70;;;;;;14401:18;14439:13;14422:56;;;14479:13;14422:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14422:71:40;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;14422:71:40;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;14422:71:40;;;;;;;;;;;;;;;;14401:92;;14499:21;14523:5;;;;;;;;;;;:15;;;14547:4;14523:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14523:30:40;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;14523:30:40;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;14523:30:40;;;;;;;;;;;;;;;;14499:54;;14559:19;14581:64;14596:10;14608:13;14631:4;14623:21;;;14581:14;:64::i;:::-;14559:86;;14711:11;14692:15;:30;;:60;;;;;14742:10;14726:12;:26;;14692:60;14684:69;;;;;;14767:5;;;;;;;;;;;:18;;;14786:5;14801:4;14808:11;14767:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14767:53:40;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;14767:53:40;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;14767:53:40;;;;;;;;;;;;;;;;14759:62;;;;;;14844:13;14827:56;;;14890:10;14902:13;14917:8;14927:9;14827:110;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14827:110:40;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;14827:110:40;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;14827:110:40;;;;;;;;;;;;;;;;;14980:10;14967:11;14960:5;14948:43;;;;;;;;;;;;15004:11;14997:18;;;;;13984:1036;;;;;;;;;:::o;11049:961::-;11287:7;11325:15;11313:8;:27;;:46;;;;;11358:1;11344:11;:15;11313:46;:71;;;;;11383:1;11363:17;:21;11313:71;:93;;;;;11405:1;11388:14;:18;11313:93;11305:102;;;;;;11446:4;11421:30;;:13;:30;;;;:61;;;;;11480:1;11455:27;;:13;:27;;;;11421:61;11413:70;;;;;;11489:21;11513:5;;;;;;;;;;;:15;;;11537:4;11513:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11513:30:40;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;11513:30:40;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11513:30:40;;;;;;;;;;;;;;;;11489:54;;11549:18;11570:64;11584:11;11597:13;11620:4;11612:21;;;11570:13;:64::i;:::-;11549:85;;11640:18;11661:10;11640:31;;11699:14;11685:10;:28;;11677:37;;;;;;11728:5;;;;;;;;;;;:18;;;11747:5;11762:4;11769:11;11728:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11728:53:40;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;11728:53:40;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11728:53:40;;;;;;;;;;;;;;;;11720:62;;;;;;11788:21;11829:13;11812:55;;;11874:10;11886:17;11905:8;11915:9;11812:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11812:113:40;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;11812:113:40;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11812:113:40;;;;;;;;;;;;;;;;11788:137;;11968:10;11955:11;11948:5;11936:43;;;;;;;;;;;;11992:13;11985:20;;;;;;11049:961;;;;;;;;;:::o",
  "source": "pragma solidity ^0.5.13;\n\nimport \"./UniswapERC20.sol\";\nimport \"./IUniswapFactory.sol\";\nimport \"./IUniswapExchange.sol\";\n\n\ncontract MockUniswapExchange is UniswapERC20 {\n\n  /***********************************|\n  |        Variables && Events        |\n  |__________________________________*/\n\n  // Variables\n  bytes32 public name;         // Uniswap V1\n  bytes32 public symbol;       // UNI-V1\n  uint256 public decimals;     // 18\n  IERC20 token;                // address of the ERC20 token traded on this contract\n  IUniswapFactory factory;     // interface for the factory that created this contract\n  \n  // Events\n  event TokenPurchase(address indexed buyer, uint256 indexed eth_sold, uint256 indexed tokens_bought);\n  event EthPurchase(address indexed buyer, uint256 indexed tokens_sold, uint256 indexed eth_bought);\n  event AddLiquidity(address indexed provider, uint256 indexed eth_amount, uint256 indexed token_amount);\n  event RemoveLiquidity(address indexed provider, uint256 indexed eth_amount, uint256 indexed token_amount);\n\n\n  /***********************************|\n  |            Constsructor           |\n  |__________________________________*/\n\n  /**  \n   * @dev This function acts as a contract constructor which is not currently supported in contracts deployed\n   *      using create_with_code_of(). It is called once by the factory during contract creation.\n   */\n  constructor(address token_addr, address uniswap_factory) public {\n    require( \n      address(factory) == address(0) && address(token) == address(0) && token_addr != address(0), \n      \"INVALID_ADDRESS\"\n    );\n    factory = IUniswapFactory(uniswap_factory);\n    token = IERC20(token_addr);\n    name = 0x556e697377617020563100000000000000000000000000000000000000000000;\n    symbol = 0x554e492d56310000000000000000000000000000000000000000000000000000;\n    decimals = 18;\n  }\n\n\n  /***********************************|\n  |        Exchange Functions         |\n  |__________________________________*/\n\n\n  /**\n   * @notice Convert ETH to Tokens.\n   * @dev User specifies exact input (msg.value).\n   * @dev User cannot specify minimum output or deadline.\n   */\n  function () external payable {\n    ethToTokenInput(msg.value, 1, block.timestamp, msg.sender, msg.sender);\n  }\n\n /**\n   * @dev Pricing function for converting between ETH && Tokens.\n   * @param input_amount Amount of ETH or Tokens being sold.\n   * @param input_reserve Amount of ETH or Tokens (input type) in exchange reserves.\n   * @param output_reserve Amount of ETH or Tokens (output type) in exchange reserves.\n   * @return Amount of ETH or Tokens bought.\n   */\n  function getInputPrice(uint256 input_amount, uint256 input_reserve, uint256 output_reserve) public pure returns (uint256) {\n    require(input_reserve > 0 && output_reserve > 0, \"INVALID_VALUE\");\n    uint256 input_amount_with_fee = input_amount.mul(997);\n    uint256 numerator = input_amount_with_fee.mul(output_reserve);\n    uint256 denominator = input_reserve.mul(1000).add(input_amount_with_fee);\n    return numerator / denominator;\n  }\n\n /**\n   * @dev Pricing function for converting between ETH && Tokens.\n   * @param output_amount Amount of ETH or Tokens being bought.\n   * @param input_reserve Amount of ETH or Tokens (input type) in exchange reserves.\n   * @param output_reserve Amount of ETH or Tokens (output type) in exchange reserves.\n   * @return Amount of ETH or Tokens sold.\n   */\n  function getOutputPrice(uint256 output_amount, uint256 input_reserve, uint256 output_reserve) public pure returns (uint256) {\n    require(input_reserve > 0 && output_reserve > 0);\n    uint256 numerator = input_reserve.mul(output_amount).mul(1000);\n    uint256 denominator = (output_reserve.sub(output_amount)).mul(997);\n    return (numerator / denominator).add(1);\n  }\n\n  function ethToTokenInput(uint256 eth_sold, uint256 min_tokens, uint256 deadline, address buyer, address recipient) private returns (uint256) {\n    require(deadline >= block.timestamp && eth_sold > 0 && min_tokens > 0);\n    uint256 token_reserve = token.balanceOf(address(this));\n    uint256 tokens_bought = getInputPrice(eth_sold, address(this).balance.sub(eth_sold), token_reserve);\n    require(tokens_bought >= min_tokens);\n    require(token.transfer(recipient, tokens_bought));\n    emit TokenPurchase(buyer, eth_sold, tokens_bought);\n    return tokens_bought;\n  }\n\n  /** \n   * @notice Convert ETH to Tokens.\n   * @dev User specifies exact input (msg.value) && minimum output.\n   * @param min_tokens Minimum Tokens bought.\n   * @param deadline Time after which this transaction can no longer be executed.\n   * @return Amount of Tokens bought.\n   */ \n  function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) public payable returns (uint256) {\n    return ethToTokenInput(msg.value, min_tokens, deadline, msg.sender, msg.sender);\n  }\n\n  /** \n   * @notice Convert ETH to Tokens && transfers Tokens to recipient.\n   * @dev User specifies exact input (msg.value) && minimum output\n   * @param min_tokens Minimum Tokens bought.\n   * @param deadline Time after which this transaction can no longer be executed.\n   * @param recipient The address that receives output Tokens.\n   * @return  Amount of Tokens bought.\n   */\n  function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) public payable returns(uint256) {\n    require(recipient != address(this) && recipient != address(0));\n    return ethToTokenInput(msg.value, min_tokens, deadline, msg.sender, recipient);\n  }\n\n  function ethToTokenOutput(uint256 tokens_bought, uint256 max_eth, uint256 deadline, address payable buyer, address recipient) private returns (uint256) {\n    require(deadline >= block.timestamp && tokens_bought > 0 && max_eth > 0);\n    uint256 token_reserve = token.balanceOf(address(this));\n    uint256 eth_sold = getOutputPrice(tokens_bought, address(this).balance.sub(max_eth), token_reserve);\n    // Throws if eth_sold > max_eth\n    uint256 eth_refund = max_eth.sub(eth_sold);\n    if (eth_refund > 0) {\n      buyer.transfer(eth_refund);\n    }\n    require(token.transfer(recipient, tokens_bought));\n    emit TokenPurchase(buyer, eth_sold, tokens_bought);\n    return eth_sold;\n  }\n\n  /** \n   * @notice Convert ETH to Tokens.\n   * @dev User specifies maximum input (msg.value) && exact output.\n   * @param tokens_bought Amount of tokens bought.\n   * @param deadline Time after which this transaction can no longer be executed.\n   * @return Amount of ETH sold.\n   */\n  function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) public payable returns(uint256) {\n    return ethToTokenOutput(tokens_bought, msg.value, deadline, msg.sender, msg.sender);\n  }\n\n  /** \n   * @notice Convert ETH to Tokens && transfers Tokens to recipient.\n   * @dev User specifies maximum input (msg.value) && exact output.\n   * @param tokens_bought Amount of tokens bought.\n   * @param deadline Time after which this transaction can no longer be executed.\n   * @param recipient The address that receives output Tokens.\n   * @return Amount of ETH sold.\n   */\n  function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) public payable returns (uint256) {\n    require(recipient != address(this) && recipient != address(0));\n    return ethToTokenOutput(tokens_bought, msg.value, deadline, msg.sender, recipient);\n  }\n\n  function tokenToEthInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline, address buyer, address payable recipient) private returns (uint256) {\n    require(deadline >= block.timestamp && tokens_sold > 0 && min_eth > 0);\n    uint256 token_reserve = token.balanceOf(address(this));\n    uint256 eth_bought = getInputPrice(tokens_sold, token_reserve, address(this).balance);\n    uint256 wei_bought = eth_bought;\n    require(wei_bought >= min_eth);\n    recipient.transfer(wei_bought);\n    require(token.transferFrom(buyer, address(this), tokens_sold));\n    emit EthPurchase(buyer, tokens_sold, wei_bought);\n    return wei_bought;\n  }\n\n  /** \n   * @notice Convert Tokens to ETH.\n   * @dev User specifies exact input && minimum output.\n   * @param tokens_sold Amount of Tokens sold.\n   * @param min_eth Minimum ETH purchased.\n   * @param deadline Time after which this transaction can no longer be executed.\n   * @return Amount of ETH bought.\n   */\n  function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) public returns (uint256) {\n    return tokenToEthInput(tokens_sold, min_eth, deadline, msg.sender, msg.sender);\n  }\n\n  /** \n   * @notice Convert Tokens to ETH && transfers ETH to recipient.\n   * @dev User specifies exact input && minimum output.\n   * @param tokens_sold Amount of Tokens sold.\n   * @param min_eth Minimum ETH purchased.\n   * @param deadline Time after which this transaction can no longer be executed.\n   * @param recipient The address that receives output ETH.\n   * @return  Amount of ETH bought.\n   */\n  function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline, address payable recipient) public returns (uint256) {\n    require(recipient != address(this) && recipient != address(0));\n    return tokenToEthInput(tokens_sold, min_eth, deadline, msg.sender, recipient);\n  }\n\n  \n  function tokenToEthOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address buyer, address payable recipient) private returns (uint256) {\n    require(deadline >= block.timestamp && eth_bought > 0);\n    uint256 token_reserve = token.balanceOf(address(this));\n    uint256 tokens_sold = getOutputPrice(eth_bought, token_reserve, address(this).balance);\n    // tokens sold is always > 0\n    require(max_tokens >= tokens_sold);\n    recipient.transfer(eth_bought);\n    require(token.transferFrom(buyer, address(this), tokens_sold));\n    emit EthPurchase(buyer, tokens_sold, eth_bought);\n    return tokens_sold;\n  }\n\n  /** \n   * @notice Convert Tokens to ETH.\n   * @dev User specifies maximum input && exact output.\n   * @param eth_bought Amount of ETH purchased.\n   * @param max_tokens Maximum Tokens sold.\n   * @param deadline Time after which this transaction can no longer be executed.\n   * @return Amount of Tokens sold.\n   */\n  function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) public returns (uint256) {\n    return tokenToEthOutput(eth_bought, max_tokens, deadline, msg.sender, msg.sender);\n  }\n\n  /**\n   * @notice Convert Tokens to ETH && transfers ETH to recipient.\n   * @dev User specifies maximum input && exact output.\n   * @param eth_bought Amount of ETH purchased.\n   * @param max_tokens Maximum Tokens sold.\n   * @param deadline Time after which this transaction can no longer be executed.\n   * @param recipient The address that receives output ETH.\n   * @return Amount of Tokens sold.\n   */\n  function tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address payable recipient) public returns (uint256) {\n    require(recipient != address(this) && recipient != address(0));\n    return tokenToEthOutput(eth_bought, max_tokens, deadline, msg.sender, recipient);\n  }\n\n  function tokenToTokenInput(\n    uint256 tokens_sold, \n    uint256 min_tokens_bought, \n    uint256 min_eth_bought, \n    uint256 deadline,\n    address buyer, \n    address recipient, \n    address payable exchange_addr) \n    private returns (uint256) \n  {\n    require(deadline >= block.timestamp && tokens_sold > 0 && min_tokens_bought > 0 && min_eth_bought > 0);\n    require(exchange_addr != address(this) && exchange_addr != address(0));\n    uint256 token_reserve = token.balanceOf(address(this));\n    uint256 eth_bought = getInputPrice(tokens_sold, token_reserve, address(this).balance);\n    uint256 wei_bought = eth_bought;\n    require(wei_bought >= min_eth_bought);\n    require(token.transferFrom(buyer, address(this), tokens_sold));\n    uint256 tokens_bought = IUniswapExchange(exchange_addr).ethToTokenTransferInput.value(wei_bought)(min_tokens_bought, deadline, recipient);\n    emit EthPurchase(buyer, tokens_sold, wei_bought);\n    return tokens_bought;\n  }\n\n  /**\n   * @notice Convert Tokens (token) to Tokens (token_addr).\n   * @dev User specifies exact input && minimum output.\n   * @param tokens_sold Amount of Tokens sold.\n   * @param min_tokens_bought Minimum Tokens (token_addr) purchased.\n   * @param min_eth_bought Minimum ETH purchased as intermediary.\n   * @param deadline Time after which this transaction can no longer be executed.\n   * @param token_addr The address of the token being purchased.\n   * @return Amount of Tokens (token_addr) bought.\n   */\n  function tokenToTokenSwapInput(\n    uint256 tokens_sold, \n    uint256 min_tokens_bought, \n    uint256 min_eth_bought, \n    uint256 deadline, \n    address token_addr) \n    public returns (uint256) \n  {\n    address payable exchange_addr = factory.getExchange(token_addr);\n    return tokenToTokenInput(tokens_sold, min_tokens_bought, min_eth_bought, deadline, msg.sender, msg.sender, exchange_addr);\n  }\n\n  /**\n   * @notice Convert Tokens (token) to Tokens (token_addr) && transfers\n   *         Tokens (token_addr) to recipient.\n   * @dev User specifies exact input && minimum output.\n   * @param tokens_sold Amount of Tokens sold.\n   * @param min_tokens_bought Minimum Tokens (token_addr) purchased.\n   * @param min_eth_bought Minimum ETH purchased as intermediary.\n   * @param deadline Time after which this transaction can no longer be executed.\n   * @param recipient The address that receives output ETH.\n   * @param token_addr The address of the token being purchased.\n   * @return Amount of Tokens (token_addr) bought.\n   */\n  function tokenToTokenTransferInput(\n    uint256 tokens_sold, \n    uint256 min_tokens_bought, \n    uint256 min_eth_bought, \n    uint256 deadline, \n    address recipient, \n    address token_addr) \n    public returns (uint256) \n  {\n    address payable exchange_addr = factory.getExchange(token_addr);\n    return tokenToTokenInput(tokens_sold, min_tokens_bought, min_eth_bought, deadline, msg.sender, recipient, exchange_addr);\n  }\n\n  function tokenToTokenOutput(\n    uint256 tokens_bought, \n    uint256 max_tokens_sold, \n    uint256 max_eth_sold, \n    uint256 deadline, \n    address buyer, \n    address recipient, \n    address payable exchange_addr) \n    private returns (uint256) \n  {\n    require(deadline >= block.timestamp && (tokens_bought > 0 && max_eth_sold > 0));\n    require(exchange_addr != address(this) && exchange_addr != address(0));\n    uint256 eth_bought = IUniswapExchange(exchange_addr).getEthToTokenOutputPrice(tokens_bought);\n    uint256 token_reserve = token.balanceOf(address(this));\n    uint256 tokens_sold = getOutputPrice(eth_bought, token_reserve, address(this).balance);\n    // tokens sold is always > 0\n    require(max_tokens_sold >= tokens_sold && max_eth_sold >= eth_bought);\n    require(token.transferFrom(buyer, address(this), tokens_sold));\n    IUniswapExchange(exchange_addr).ethToTokenTransferOutput.value(eth_bought)(tokens_bought, deadline, recipient);\n    emit EthPurchase(buyer, tokens_sold, eth_bought);\n    return tokens_sold;\n  }\n\n  /**\n   * @notice Convert Tokens (token) to Tokens (token_addr).\n   * @dev User specifies maximum input && exact output.\n   * @param tokens_bought Amount of Tokens (token_addr) bought.\n   * @param max_tokens_sold Maximum Tokens (token) sold.\n   * @param max_eth_sold Maximum ETH purchased as intermediary.\n   * @param deadline Time after which this transaction can no longer be executed.\n   * @param token_addr The address of the token being purchased.\n   * @return Amount of Tokens (token) sold.\n   */\n  function tokenToTokenSwapOutput(\n    uint256 tokens_bought, \n    uint256 max_tokens_sold, \n    uint256 max_eth_sold, \n    uint256 deadline, \n    address token_addr) \n    public returns (uint256) \n  {\n    address payable exchange_addr = factory.getExchange(token_addr);\n    return tokenToTokenOutput(tokens_bought, max_tokens_sold, max_eth_sold, deadline, msg.sender, msg.sender, exchange_addr);\n  }\n\n  /**\n   * @notice Convert Tokens (token) to Tokens (token_addr) && transfers\n   *         Tokens (token_addr) to recipient.\n   * @dev User specifies maximum input && exact output.\n   * @param tokens_bought Amount of Tokens (token_addr) bought.\n   * @param max_tokens_sold Maximum Tokens (token) sold.\n   * @param max_eth_sold Maximum ETH purchased as intermediary.\n   * @param deadline Time after which this transaction can no longer be executed.\n   * @param recipient The address that receives output ETH.\n   * @param token_addr The address of the token being purchased.\n   * @return Amount of Tokens (token) sold.\n   */\n  function tokenToTokenTransferOutput(\n    uint256 tokens_bought, \n    uint256 max_tokens_sold, \n    uint256 max_eth_sold, \n    uint256 deadline, \n    address recipient, \n    address token_addr) \n    public returns (uint256) \n  {\n    address payable exchange_addr = factory.getExchange(token_addr);\n    return tokenToTokenOutput(tokens_bought, max_tokens_sold, max_eth_sold, deadline, msg.sender, recipient, exchange_addr);\n  }\n\n  /**\n   * @notice Convert Tokens (token) to Tokens (exchange_addr.token).\n   * @dev Allows trades through contracts that were not deployed from the same factory.\n   * @dev User specifies exact input && minimum output.\n   * @param tokens_sold Amount of Tokens sold.\n   * @param min_tokens_bought Minimum Tokens (token_addr) purchased.\n   * @param min_eth_bought Minimum ETH purchased as intermediary.\n   * @param deadline Time after which this transaction can no longer be executed.\n   * @param exchange_addr The address of the exchange for the token being purchased.\n   * @return Amount of Tokens (exchange_addr.token) bought.\n   */\n  function tokenToExchangeSwapInput(\n    uint256 tokens_sold, \n    uint256 min_tokens_bought, \n    uint256 min_eth_bought, \n    uint256 deadline, \n    address payable exchange_addr) \n    public returns (uint256) \n  {\n    return tokenToTokenInput(tokens_sold, min_tokens_bought, min_eth_bought, deadline, msg.sender, msg.sender, exchange_addr);\n  }\n\n  /**\n   * @notice Convert Tokens (token) to Tokens (exchange_addr.token) && transfers\n   *         Tokens (exchange_addr.token) to recipient.\n   * @dev Allows trades through contracts that were not deployed from the same factory.\n   * @dev User specifies exact input && minimum output.\n   * @param tokens_sold Amount of Tokens sold.\n   * @param min_tokens_bought Minimum Tokens (token_addr) purchased.\n   * @param min_eth_bought Minimum ETH purchased as intermediary.\n   * @param deadline Time after which this transaction can no longer be executed.\n   * @param recipient The address that receives output ETH.\n   * @param exchange_addr The address of the exchange for the token being purchased.\n   * @return Amount of Tokens (exchange_addr.token) bought.\n   */\n  function tokenToExchangeTransferInput(\n    uint256 tokens_sold, \n    uint256 min_tokens_bought, \n    uint256 min_eth_bought, \n    uint256 deadline, \n    address recipient, \n    address payable exchange_addr) \n    public returns (uint256) \n  {\n    require(recipient != address(this));\n    return tokenToTokenInput(tokens_sold, min_tokens_bought, min_eth_bought, deadline, msg.sender, recipient, exchange_addr);\n  }\n\n  /**\n   * @notice Convert Tokens (token) to Tokens (exchange_addr.token).\n   * @dev Allows trades through contracts that were not deployed from the same factory.\n   * @dev User specifies maximum input && exact output.\n   * @param tokens_bought Amount of Tokens (token_addr) bought.\n   * @param max_tokens_sold Maximum Tokens (token) sold.\n   * @param max_eth_sold Maximum ETH purchased as intermediary.\n   * @param deadline Time after which this transaction can no longer be executed.\n   * @param exchange_addr The address of the exchange for the token being purchased.\n   * @return Amount of Tokens (token) sold.\n   */\n  function tokenToExchangeSwapOutput(\n    uint256 tokens_bought, \n    uint256 max_tokens_sold, \n    uint256 max_eth_sold, \n    uint256 deadline, \n    address payable exchange_addr) \n    public returns (uint256) \n  {\n    return tokenToTokenOutput(tokens_bought, max_tokens_sold, max_eth_sold, deadline, msg.sender, msg.sender, exchange_addr);\n  }\n\n  /**\n   * @notice Convert Tokens (token) to Tokens (exchange_addr.token) && transfers\n   *         Tokens (exchange_addr.token) to recipient.\n   * @dev Allows trades through contracts that were not deployed from the same factory.\n   * @dev User specifies maximum input && exact output.\n   * @param tokens_bought Amount of Tokens (token_addr) bought.\n   * @param max_tokens_sold Maximum Tokens (token) sold.\n   * @param max_eth_sold Maximum ETH purchased as intermediary.\n   * @param deadline Time after which this transaction can no longer be executed.\n   * @param recipient The address that receives output ETH.\n   * @param exchange_addr The address of the exchange for the token being purchased.\n   * @return Amount of Tokens (token) sold.\n   */\n  function tokenToExchangeTransferOutput(\n    uint256 tokens_bought, \n    uint256 max_tokens_sold, \n    uint256 max_eth_sold, \n    uint256 deadline, \n    address recipient, \n    address payable exchange_addr) \n    public returns (uint256) \n  {\n    require(recipient != address(this));\n    return tokenToTokenOutput(tokens_bought, max_tokens_sold, max_eth_sold, deadline, msg.sender, recipient, exchange_addr);\n  }\n\n\n  /***********************************|\n  |         Getter Functions          |\n  |__________________________________*/\n\n  /**\n   * @notice Public price function for ETH to Token trades with an exact input.\n   * @param eth_sold Amount of ETH sold.\n   * @return Amount of Tokens that can be bought with input ETH.\n   */\n  function getEthToTokenInputPrice(uint256 eth_sold) public view returns (uint256) {\n    require(eth_sold > 0);\n    uint256 token_reserve = token.balanceOf(address(this));\n    return getInputPrice(eth_sold, address(this).balance, token_reserve);\n  }\n\n  /**\n   * @notice Public price function for ETH to Token trades with an exact output.\n   * @param tokens_bought Amount of Tokens bought.\n   * @return Amount of ETH needed to buy output Tokens.\n   */\n  function getEthToTokenOutputPrice(uint256 tokens_bought) public view returns (uint256) {\n    require(tokens_bought > 0);\n    uint256 token_reserve = token.balanceOf(address(this));\n    uint256 eth_sold = getOutputPrice(tokens_bought, address(this).balance, token_reserve);\n    return eth_sold;\n  }\n\n  /**\n   * @notice Public price function for Token to ETH trades with an exact input.\n   * @param tokens_sold Amount of Tokens sold.\n   * @return Amount of ETH that can be bought with input Tokens.\n   */\n  function getTokenToEthInputPrice(uint256 tokens_sold) public view returns (uint256) {\n    require(tokens_sold > 0);\n    uint256 token_reserve = token.balanceOf(address(this));\n    uint256 eth_bought = getInputPrice(tokens_sold, token_reserve, address(this).balance);\n    return eth_bought;\n  }\n\n  /**\n   * @notice Public price function for Token to ETH trades with an exact output.\n   * @param eth_bought Amount of output ETH.\n   * @return Amount of Tokens needed to buy output ETH.\n   */\n  function getTokenToEthOutputPrice(uint256 eth_bought) public view returns (uint256) {\n    require(eth_bought > 0);\n    uint256 token_reserve = token.balanceOf(address(this));\n    return getOutputPrice(eth_bought, token_reserve, address(this).balance);\n  }\n\n  /** \n   * @return Address of Token that is sold on this exchange.\n   */\n  function tokenAddress() public view returns (address) {\n    return address(token);\n  }\n\n  /**\n   * @return Address of factory that created this exchange.\n   */\n  function factoryAddress() public view returns (address) {\n    return address(factory);\n  }\n\n\n  /***********************************|\n  |        Liquidity Functions        |\n  |__________________________________*/\n\n  /** \n   * @notice Deposit ETH && Tokens (token) at current ratio to mint UNI tokens.\n   * @dev min_liquidity does nothing when total UNI supply is 0.\n   * @param min_liquidity Minimum number of UNI sender will mint if total UNI supply is greater than 0.\n   * @param max_tokens Maximum number of tokens deposited. Deposits max amount if total UNI supply is 0.\n   * @param deadline Time after which this transaction can no longer be executed.\n   * @return The amount of UNI minted.\n   */\n  function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) public payable returns (uint256) {\n    require(deadline > block.timestamp && max_tokens > 0 && msg.value > 0, 'UniswapExchange#addLiquidity: INVALID_ARGUMENT');\n    uint256 total_liquidity = _totalSupply;\n\n    if (total_liquidity > 0) {\n      require(min_liquidity > 0);\n      uint256 eth_reserve = address(this).balance.sub(msg.value);\n      uint256 token_reserve = token.balanceOf(address(this));\n      uint256 token_amount = (msg.value.mul(token_reserve) / eth_reserve).add(1);\n      uint256 liquidity_minted = msg.value.mul(total_liquidity) / eth_reserve;\n      require(max_tokens >= token_amount && liquidity_minted >= min_liquidity);\n      _balances[msg.sender] = _balances[msg.sender].add(liquidity_minted);\n      _totalSupply = total_liquidity.add(liquidity_minted);\n      require(token.transferFrom(msg.sender, address(this), token_amount));\n      emit AddLiquidity(msg.sender, msg.value, token_amount);\n      emit Transfer(address(0), msg.sender, liquidity_minted);\n      return liquidity_minted;\n\n    } else {\n      require(address(factory) != address(0) && address(token) != address(0) && msg.value >= 1000000000, \"INVALID_VALUE\");\n      require(factory.getExchange(address(token)) == address(this));\n      uint256 token_amount = max_tokens;\n      uint256 initial_liquidity = address(this).balance;\n      _totalSupply = initial_liquidity;\n      _balances[msg.sender] = initial_liquidity;\n      require(token.transferFrom(msg.sender, address(this), token_amount));\n      emit AddLiquidity(msg.sender, msg.value, token_amount);\n      emit Transfer(address(0), msg.sender, initial_liquidity);\n      return initial_liquidity;\n    }\n  }\n\n  /**\n   * @dev Burn UNI tokens to withdraw ETH && Tokens at current ratio.\n   * @param amount Amount of UNI burned.\n   * @param min_eth Minimum ETH withdrawn.\n   * @param min_tokens Minimum Tokens withdrawn.\n   * @param deadline Time after which this transaction can no longer be executed.\n   * @return The amount of ETH && Tokens withdrawn.\n   */\n  function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) public returns (uint256, uint256) {\n    require(amount > 0 && deadline > block.timestamp && min_eth > 0 && min_tokens > 0);\n    uint256 total_liquidity = _totalSupply;\n    require(total_liquidity > 0);\n    uint256 token_reserve = token.balanceOf(address(this));\n    uint256 eth_amount = amount.mul(address(this).balance) / total_liquidity;\n    uint256 token_amount = amount.mul(token_reserve) / total_liquidity;\n    require(eth_amount >= min_eth && token_amount >= min_tokens);\n\n    _balances[msg.sender] = _balances[msg.sender].sub(amount);\n    _totalSupply = total_liquidity.sub(amount);\n    msg.sender.transfer(eth_amount);\n    require(token.transfer(msg.sender, token_amount));\n    emit RemoveLiquidity(msg.sender, eth_amount, token_amount);\n    emit Transfer(msg.sender, address(0), amount);\n    return (eth_amount, token_amount);\n  }\n\n\n}"
  }