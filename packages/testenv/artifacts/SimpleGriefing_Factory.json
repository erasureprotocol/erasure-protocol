{
	"schemaVersion": "2.0.0",
	"contractName": "SimpleGriefing_Factory",
	"compilerOutput": {
		"abi": [
			{
				"constant": true,
				"inputs": [],
				"name": "getInstanceType",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "instanceType",
						"type": "bytes4"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getTemplate",
				"outputs": [
					{
						"internalType": "address",
						"name": "template",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getInitSelector",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "initSelector",
						"type": "bytes4"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "bytes",
						"name": "callData",
						"type": "bytes"
					},
					{
						"internalType": "bytes32",
						"name": "salt",
						"type": "bytes32"
					}
				],
				"name": "createSalty",
				"outputs": [
					{
						"internalType": "address",
						"name": "instance",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "instance",
						"type": "address"
					}
				],
				"name": "getInstanceCreator",
				"outputs": [
					{
						"internalType": "address",
						"name": "creator",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "bytes",
						"name": "callData",
						"type": "bytes"
					}
				],
				"name": "getNextInstance",
				"outputs": [
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getInstanceRegistry",
				"outputs": [
					{
						"internalType": "address",
						"name": "instanceRegistry",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getInstanceCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "count",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "startIndex",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "endIndex",
						"type": "uint256"
					}
				],
				"name": "getPaginatedInstances",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "instances",
						"type": "address[]"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "bytes",
						"name": "callData",
						"type": "bytes"
					}
				],
				"name": "create",
				"outputs": [
					{
						"internalType": "address",
						"name": "instance",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "getInstances",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "instances",
						"type": "address[]"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "getInstance",
				"outputs": [
					{
						"internalType": "address",
						"name": "instance",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "bytes",
						"name": "callData",
						"type": "bytes"
					},
					{
						"internalType": "bytes32",
						"name": "salt",
						"type": "bytes32"
					}
				],
				"name": "getSaltyInstance",
				"outputs": [
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "instanceRegistry",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "templateContract",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "instance",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "creator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "callData",
						"type": "bytes"
					}
				],
				"name": "InstanceCreated",
				"type": "event"
			}
		],
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b5060405162001c7938038062001c798339818101604052604081101561003557600080fd5b50805160209182015160408051808201909152600981527f41677265656d656e7400000000000000000000000000000000000000000000009084015290916000907f58700d6eb0ceb31a131b85e7f5bb82f475d57b1cb5e97d359a52e46933bf4000907f3d806d6700000000000000000000000000000000000000000000000000000000906100d39086908690859085906115386100dd821b17901c565b505050505061027a565b600380546001600160a01b03199081166001600160a01b03878116918217909355600280549092169286169290921763ffffffff60a01b19167401000000000000000000000000000000000000000060e085901c02179055604080517f18c2f4cf00000000000000000000000000000000000000000000000000000000815290516318c2f4cf91600480820192602092909190829003018186803b15801561018457600080fd5b505afa158015610198573d6000803e3d6000fd5b505050506040513d60208110156101ae57600080fd5b50517fffffffff0000000000000000000000000000000000000000000000000000000083811691161461024257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f696e636f727265637420696e7374616e63652074797065000000000000000000604482015290519081900360640190fd5b506003805460e09290921c740100000000000000000000000000000000000000000263ffffffff60a01b199092169190911790555050565b6119ef806200028a6000396000f3fe60806040523480156200001157600080fd5b5060043610620000f45760003560e01c8063a5e139041162000099578063cf5ba53f116200006f578063cf5ba53f14620003a3578063d35fdd79146200044f578063ebd348de1462000459578063fbc6d07f146200047957620000f4565b8063a5e139041462000305578063ae34325c146200030f578063b71f2e72146200032b57620000f4565b80635ed75de211620000cf5780635ed75de214620001755780636bf7198214620002235780638359e136146200025957620000f4565b806318c2f4cf14620000f9578063321c48f2146200013857806354ed633b146200016b575b600080fd5b6200010362000527565b604080517fffffffff000000000000000000000000000000000000000000000000000000009092168252519081900360200190f35b6200014262000548565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6200010362000564565b62000142600480360360408110156200018d57600080fd5b810190602081018135640100000000811115620001a957600080fd5b820183602082011115620001bc57600080fd5b80359060200191846001830284011164010000000083111715620001df57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550509135925062000585915050565b62000142600480360360208110156200023b57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16620005b1565b62000142600480360360208110156200027157600080fd5b8101906020810181356401000000008111156200028d57600080fd5b820183602082011115620002a057600080fd5b80359060200191846001830284011164010000000083111715620002c357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550620005dc945050505050565b62000142620005fb565b6200031962000617565b60408051918252519081900360200190f35b62000351600480360360408110156200034357600080fd5b50803590602001356200061d565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156200038f57818101518382015260200162000375565b505050509050019250505060405180910390f35b6200014260048036036020811015620003bb57600080fd5b810190602081018135640100000000811115620003d757600080fd5b820183602082011115620003ea57600080fd5b803590602001918460018302840111640100000000831117156200040d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550620007a6945050505050565b62000351620007cb565b62000142600480360360208110156200047157600080fd5b50356200083c565b62000142600480360360408110156200049157600080fd5b810190602081018135640100000000811115620004ad57600080fd5b820183602082011115620004c057600080fd5b80359060200191846001830284011164010000000083111715620004e357600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505091359250620008e4915050565b60035474010000000000000000000000000000000000000000900460e01b90565b60025473ffffffffffffffffffffffffffffffffffffffff1690565b60025474010000000000000000000000000000000000000000900460e01b90565b60006200059d6200059562000548565b848462000903565b9050620005ab818462000b7f565b92915050565b73ffffffffffffffffffffffffffffffffffffffff9081166000908152600160205260409020541690565b6000620005f3620005ec62000548565b8362000d75565b90505b919050565b60035473ffffffffffffffffffffffffffffffffffffffff1690565b60005490565b606081831062000679576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180620019406025913960400191505060405180910390fd5b600054821115620006eb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f656e6420696e646578206f7574206f662072616e676500000000000000000000604482015290519081900360640190fd5b60608383036040519080825280602002602001820160405280156200071a578160200160208202803883390190505b509050835b838110156200079e57600081815481106200073657fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682868303815181106200077057fe5b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526001016200071f565b509392505050565b6000620007bd620007b662000548565b8362000f81565b9050620005f6818362000b7f565b606060008054806020026020016040519081016040528092919081815260200182805480156200083257602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831162000806575b5050505050905090565b600080548210620008ae57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f696e646578206f7574206f662072616e67650000000000000000000000000000604482015290519081900360640190fd5b60008281548110620008bc57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1692915050565b6000620008fc620008f462000548565b8484620011a2565b9392505050565b600060606040518060200162000919906200152a565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820381018352601f90910116604081815273ffffffffffffffffffffffffffffffffffffffff881660208381019182528284019283528851606085015288518a948a94926080909101919085019080838360005b83811015620009a95781810151838201526020016200098f565b50505050905090810190601f168015620009d75780820380516001836020036101000a031916815260200191505b5093505050506040516020818303038152906040526040516020018083805190602001908083835b6020831062000a3e57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101620009ff565b51815160209384036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018019909216911617905285519190930192850191508083835b6020831062000ac457805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910162000a85565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040529050600062000b0a868686620011a2565b9050803b801562000b67576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001806200198f602c913960400191505060405180910390fd5b62000b74838684620013b2565b979650505050505050565b60008054600181810183557f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563909101805473ffffffffffffffffffffffffffffffffffffffff86167fffffffffffffffffffffffff00000000000000000000000000000000000000009182168117909255908352602091909152604090912080549091163317905562000c11620005fb565b604080517fbba83f6400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152336024830152600060448301819052925193169263bba83f649260648084019391929182900301818387803b15801562000c8e57600080fd5b505af115801562000ca3573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fab60131c1462939275d0fd3738e07ab853e22af6296cf75e71bbdf3a497791a2836040518080602001828103825283818151815260200191508051906020019080838360005b8381101562000d3657818101518382015260200162000d1c565b50505050905090810190601f16801562000d645780820380516001836020036101000a031916815260200191505b509250505060405180910390a35050565b600060606040518060200162000d8b906200152a565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820381018352601f90910116604081815273ffffffffffffffffffffffffffffffffffffffff8716602083810191825282840192835287516060850152875189948994926080909101919085019080838360005b8381101562000e1b57818101518382015260200162000e01565b50505050905090810190601f16801562000e495780820380516001836020036101000a031916815260200191505b5093505050506040516020818303038152906040526040516020018083805190602001908083835b6020831062000eb057805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910162000e71565b51815160209384036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018019909216911617905285519190930192850191508083835b6020831062000f3657805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910162000ef7565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905062000f788162001459565b95945050505050565b600060606040518060200162000f97906200152a565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820381018352601f90910116604081815273ffffffffffffffffffffffffffffffffffffffff8716602083810191825282840192835287516060850152875189948994926080909101919085019080838360005b83811015620010275781810151838201526020016200100d565b50505050905090810190601f168015620010555780820380516001836020036101000a031916815260200191505b5093505050506040516020818303038152906040526040516020018083805190602001908083835b60208310620010bc57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016200107d565b51815160209384036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018019909216911617905285519190930192850191508083835b602083106200114257805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910162001103565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040529050600080620011878362001459565b9150915062001198838383620013b2565b9695505050505050565b6000606060405180602001620011b8906200152a565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820381018352601f90910116604081815273ffffffffffffffffffffffffffffffffffffffff881660208381019182528284019283528851606085015288518a948a94926080909101919085019080838360005b83811015620012485781810151838201526020016200122e565b50505050905090810190601f168015620012765780820380516001836020036101000a031916815260200191505b5093505050506040516020818303038152906040526040516020018083805190602001908083835b60208310620012dd57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016200129e565b51815160209384036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018019909216911617905285519190930192850191508083835b602083106200136357805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910162001324565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040529050600081805190602001209050620011988185620014cb565b600083602001845184818334f5925082620013d1573d6000803e3d6000fd5b50508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614620008fc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018062001965602a913960400191505060405180910390fd5b80516020820120600090819081805b604080513360601b602080830191909152603480830186905283518084039091018152605490920190925280519101209450620014a68386620014cb565b935050823b80620014b757620014c3565b60019091019062001468565b505050915091565b604080517fff000000000000000000000000000000000000000000000000000000000000006020808301919091523060601b60218301526035820193909352605580820194909452815180820390940184526075019052815191012090565b610211806200172f83390190565b600380547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff87811691821790935560028054909216928616929092177fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000060e085901c02179055604080517f18c2f4cf00000000000000000000000000000000000000000000000000000000815290516318c2f4cf91600480820192602092909190829003018186803b1580156200161d57600080fd5b505afa15801562001632573d6000803e3d6000fd5b505050506040513d60208110156200164957600080fd5b50517fffffffff00000000000000000000000000000000000000000000000000000000838116911614620016de57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f696e636f727265637420696e7374616e63652074797065000000000000000000604482015290519081900360640190fd5b506003805460e09290921c74010000000000000000000000000000000000000000027fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff909216919091179055505056fe60806040526040516102113803806102118339818101604052604081101561002657600080fd5b81516020830180516040519294929383019291908464010000000082111561004d57600080fd5b90830190602082018581111561006257600080fd5b825164010000000081118282018810171561007c57600080fd5b82525081516020918201929091019080838360005b838110156100a9578181015183820152602001610091565b50505050905090810190601f1680156100d65780820380516001836020036101000a031916815260200191505b506040525050506000826001600160a01b0316826040518082805190602001908083835b602083106101195780518252601f1990920191602091820191016100fa565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114610179576040519150601f19603f3d011682016040523d82523d6000602084013e61017e565b606091505b5050905080610191573d6000803e3d6000fd5b604080517f363d3d373d3d3d363d73000000000000000000000000000000000000000000006020808301919091526001600160601b0319606087901b16602a8301527f5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000603e8301528251602d81840381018252604d9093019093528201f3fe7374617274496e646578206d757374206265206c657373207468616e20656e64496e646578617474656d70746564206465706c6f796d656e7420746f20756e65787065637465642061646472657373636f6e747261637420616c7265616479206465706c6f796564207769746820737570706c6965642073616c74a265627a7a72315820ae7a8c417705ef0f3ecba340eabd1037a6ecf733edeefbfc036c408ad3a2d51e64736f6c634300050b0032",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1C79 CODESIZE SUB DUP1 PUSH3 0x1C79 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x9 DUP2 MSTORE PUSH32 0x41677265656D656E740000000000000000000000000000000000000000000000 SWAP1 DUP5 ADD MSTORE SWAP1 SWAP2 PUSH1 0x0 SWAP1 PUSH32 0x58700D6EB0CEB31A131B85E7F5BB82F475D57B1CB5E97D359A52E46933BF4000 SWAP1 PUSH32 0x3D806D6700000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0xD3 SWAP1 DUP7 SWAP1 DUP7 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH2 0x1538 PUSH2 0xDD DUP3 SHL OR SWAP1 SHR JUMP JUMPDEST POP POP POP POP POP PUSH2 0x27A JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP4 SSTORE PUSH1 0x2 DUP1 SLOAD SWAP1 SWAP3 AND SWAP3 DUP7 AND SWAP3 SWAP1 SWAP3 OR PUSH4 0xFFFFFFFF PUSH1 0xA0 SHL NOT AND PUSH21 0x10000000000000000000000000000000000000000 PUSH1 0xE0 DUP6 SWAP1 SHR MUL OR SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH32 0x18C2F4CF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH4 0x18C2F4CF SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x184 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x198 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 DUP2 AND SWAP2 AND EQ PUSH2 0x242 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E636F727265637420696E7374616E63652074797065000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP PUSH1 0x3 DUP1 SLOAD PUSH1 0xE0 SWAP3 SWAP1 SWAP3 SHR PUSH21 0x10000000000000000000000000000000000000000 MUL PUSH4 0xFFFFFFFF PUSH1 0xA0 SHL NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 0x19EF DUP1 PUSH3 0x28A PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH3 0xF4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA5E13904 GT PUSH3 0x99 JUMPI DUP1 PUSH4 0xCF5BA53F GT PUSH3 0x6F JUMPI DUP1 PUSH4 0xCF5BA53F EQ PUSH3 0x3A3 JUMPI DUP1 PUSH4 0xD35FDD79 EQ PUSH3 0x44F JUMPI DUP1 PUSH4 0xEBD348DE EQ PUSH3 0x459 JUMPI DUP1 PUSH4 0xFBC6D07F EQ PUSH3 0x479 JUMPI PUSH3 0xF4 JUMP JUMPDEST DUP1 PUSH4 0xA5E13904 EQ PUSH3 0x305 JUMPI DUP1 PUSH4 0xAE34325C EQ PUSH3 0x30F JUMPI DUP1 PUSH4 0xB71F2E72 EQ PUSH3 0x32B JUMPI PUSH3 0xF4 JUMP JUMPDEST DUP1 PUSH4 0x5ED75DE2 GT PUSH3 0xCF JUMPI DUP1 PUSH4 0x5ED75DE2 EQ PUSH3 0x175 JUMPI DUP1 PUSH4 0x6BF71982 EQ PUSH3 0x223 JUMPI DUP1 PUSH4 0x8359E136 EQ PUSH3 0x259 JUMPI PUSH3 0xF4 JUMP JUMPDEST DUP1 PUSH4 0x18C2F4CF EQ PUSH3 0xF9 JUMPI DUP1 PUSH4 0x321C48F2 EQ PUSH3 0x138 JUMPI DUP1 PUSH4 0x54ED633B EQ PUSH3 0x16B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x103 PUSH3 0x527 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH3 0x142 PUSH3 0x548 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH3 0x103 PUSH3 0x564 JUMP JUMPDEST PUSH3 0x142 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH3 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 PUSH1 0x20 DUP2 ADD DUP2 CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH3 0x1A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH3 0x1BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH3 0x1DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 POP POP SWAP2 CALLDATALOAD SWAP3 POP PUSH3 0x585 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x142 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH3 0x23B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x5B1 JUMP JUMPDEST PUSH3 0x142 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH3 0x271 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 PUSH1 0x20 DUP2 ADD DUP2 CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH3 0x28D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH3 0x2A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH3 0x2C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 POP PUSH3 0x5DC SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH3 0x142 PUSH3 0x5FB JUMP JUMPDEST PUSH3 0x319 PUSH3 0x617 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH3 0x351 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH3 0x343 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH3 0x61D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 DUP2 ADD SWAP2 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x38F JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0x375 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH3 0x142 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH3 0x3BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 PUSH1 0x20 DUP2 ADD DUP2 CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH3 0x3D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH3 0x3EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH3 0x40D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 POP PUSH3 0x7A6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH3 0x351 PUSH3 0x7CB JUMP JUMPDEST PUSH3 0x142 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH3 0x471 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH3 0x83C JUMP JUMPDEST PUSH3 0x142 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH3 0x491 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 PUSH1 0x20 DUP2 ADD DUP2 CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH3 0x4AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH3 0x4C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH3 0x4E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 POP POP SWAP2 CALLDATALOAD SWAP3 POP PUSH3 0x8E4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x59D PUSH3 0x595 PUSH3 0x548 JUMP JUMPDEST DUP5 DUP5 PUSH3 0x903 JUMP JUMPDEST SWAP1 POP PUSH3 0x5AB DUP2 DUP5 PUSH3 0xB7F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x5F3 PUSH3 0x5EC PUSH3 0x548 JUMP JUMPDEST DUP4 PUSH3 0xD75 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 DUP4 LT PUSH3 0x679 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH3 0x1940 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD DUP3 GT ISZERO PUSH3 0x6EB JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x656E6420696E646578206F7574206F662072616E676500000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x60 DUP4 DUP4 SUB PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH3 0x71A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x79E JUMPI PUSH1 0x0 DUP2 DUP2 SLOAD DUP2 LT PUSH3 0x736 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 DUP7 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH3 0x770 JUMPI INVALID JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH3 0x71F JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x7BD PUSH3 0x7B6 PUSH3 0x548 JUMP JUMPDEST DUP4 PUSH3 0xF81 JUMP JUMPDEST SWAP1 POP PUSH3 0x5F6 DUP2 DUP4 PUSH3 0xB7F JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH3 0x832 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH3 0x806 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP3 LT PUSH3 0x8AE JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E646578206F7574206F662072616E67650000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 SLOAD DUP2 LT PUSH3 0x8BC JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x8FC PUSH3 0x8F4 PUSH3 0x548 JUMP JUMPDEST DUP5 DUP5 PUSH3 0x11A2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH3 0x919 SWAP1 PUSH3 0x152A JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP3 DUP3 SUB DUP2 ADD DUP4 MSTORE PUSH1 0x1F SWAP1 SWAP2 ADD AND PUSH1 0x40 DUP2 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND PUSH1 0x20 DUP4 DUP2 ADD SWAP2 DUP3 MSTORE DUP3 DUP5 ADD SWAP3 DUP4 MSTORE DUP9 MLOAD PUSH1 0x60 DUP6 ADD MSTORE DUP9 MLOAD DUP11 SWAP5 DUP11 SWAP5 SWAP3 PUSH1 0x80 SWAP1 SWAP2 ADD SWAP2 SWAP1 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x9A9 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0x98F JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH3 0x9D7 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH3 0xA3E JUMPI DUP1 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH3 0x9FF JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE DUP6 MLOAD SWAP2 SWAP1 SWAP4 ADD SWAP3 DUP6 ADD SWAP2 POP DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH3 0xAC4 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH3 0xA85 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH1 0x0 PUSH3 0xB0A DUP7 DUP7 DUP7 PUSH3 0x11A2 JUMP JUMPDEST SWAP1 POP DUP1 EXTCODESIZE DUP1 ISZERO PUSH3 0xB67 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2C DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH3 0x198F PUSH1 0x2C SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0xB74 DUP4 DUP7 DUP5 PUSH3 0x13B2 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP4 SSTORE PUSH32 0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP2 DUP3 AND DUP2 OR SWAP1 SWAP3 SSTORE SWAP1 DUP4 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 AND CALLER OR SWAP1 SSTORE PUSH3 0xC11 PUSH3 0x5FB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xBBA83F6400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0x44 DUP4 ADD DUP2 SWAP1 MSTORE SWAP3 MLOAD SWAP4 AND SWAP3 PUSH4 0xBBA83F64 SWAP3 PUSH1 0x64 DUP1 DUP5 ADD SWAP4 SWAP2 SWAP3 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xC8E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0xCA3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xAB60131C1462939275D0FD3738E07AB853E22AF6296CF75E71BBDF3A497791A2 DUP4 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0xD36 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0xD1C JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH3 0xD64 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH3 0xD8B SWAP1 PUSH3 0x152A JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP3 DUP3 SUB DUP2 ADD DUP4 MSTORE PUSH1 0x1F SWAP1 SWAP2 ADD AND PUSH1 0x40 DUP2 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH1 0x20 DUP4 DUP2 ADD SWAP2 DUP3 MSTORE DUP3 DUP5 ADD SWAP3 DUP4 MSTORE DUP8 MLOAD PUSH1 0x60 DUP6 ADD MSTORE DUP8 MLOAD DUP10 SWAP5 DUP10 SWAP5 SWAP3 PUSH1 0x80 SWAP1 SWAP2 ADD SWAP2 SWAP1 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0xE1B JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0xE01 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH3 0xE49 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH3 0xEB0 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH3 0xE71 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE DUP6 MLOAD SWAP2 SWAP1 SWAP4 ADD SWAP3 DUP6 ADD SWAP2 POP DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH3 0xF36 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH3 0xEF7 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH3 0xF78 DUP2 PUSH3 0x1459 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH3 0xF97 SWAP1 PUSH3 0x152A JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP3 DUP3 SUB DUP2 ADD DUP4 MSTORE PUSH1 0x1F SWAP1 SWAP2 ADD AND PUSH1 0x40 DUP2 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH1 0x20 DUP4 DUP2 ADD SWAP2 DUP3 MSTORE DUP3 DUP5 ADD SWAP3 DUP4 MSTORE DUP8 MLOAD PUSH1 0x60 DUP6 ADD MSTORE DUP8 MLOAD DUP10 SWAP5 DUP10 SWAP5 SWAP3 PUSH1 0x80 SWAP1 SWAP2 ADD SWAP2 SWAP1 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x1027 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0x100D JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH3 0x1055 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH3 0x10BC JUMPI DUP1 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH3 0x107D JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE DUP6 MLOAD SWAP2 SWAP1 SWAP4 ADD SWAP3 DUP6 ADD SWAP2 POP DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH3 0x1142 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH3 0x1103 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH1 0x0 DUP1 PUSH3 0x1187 DUP4 PUSH3 0x1459 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH3 0x1198 DUP4 DUP4 DUP4 PUSH3 0x13B2 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH3 0x11B8 SWAP1 PUSH3 0x152A JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP3 DUP3 SUB DUP2 ADD DUP4 MSTORE PUSH1 0x1F SWAP1 SWAP2 ADD AND PUSH1 0x40 DUP2 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND PUSH1 0x20 DUP4 DUP2 ADD SWAP2 DUP3 MSTORE DUP3 DUP5 ADD SWAP3 DUP4 MSTORE DUP9 MLOAD PUSH1 0x60 DUP6 ADD MSTORE DUP9 MLOAD DUP11 SWAP5 DUP11 SWAP5 SWAP3 PUSH1 0x80 SWAP1 SWAP2 ADD SWAP2 SWAP1 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x1248 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0x122E JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH3 0x1276 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH3 0x12DD JUMPI DUP1 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH3 0x129E JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE DUP6 MLOAD SWAP2 SWAP1 SWAP4 ADD SWAP3 DUP6 ADD SWAP2 POP DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH3 0x1363 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH3 0x1324 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH1 0x0 DUP2 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH3 0x1198 DUP2 DUP6 PUSH3 0x14CB JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x20 ADD DUP5 MLOAD DUP5 DUP2 DUP4 CALLVALUE CREATE2 SWAP3 POP DUP3 PUSH3 0x13D1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH3 0x8FC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH3 0x1965 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD KECCAK256 PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 DUP1 JUMPDEST PUSH1 0x40 DUP1 MLOAD CALLER PUSH1 0x60 SHL PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x34 DUP1 DUP4 ADD DUP7 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x54 SWAP1 SWAP3 ADD SWAP1 SWAP3 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP5 POP PUSH3 0x14A6 DUP4 DUP7 PUSH3 0x14CB JUMP JUMPDEST SWAP4 POP POP DUP3 EXTCODESIZE DUP1 PUSH3 0x14B7 JUMPI PUSH3 0x14C3 JUMP JUMPDEST PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH3 0x1468 JUMP JUMPDEST POP POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADDRESS PUSH1 0x60 SHL PUSH1 0x21 DUP4 ADD MSTORE PUSH1 0x35 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x55 DUP1 DUP3 ADD SWAP5 SWAP1 SWAP5 MSTORE DUP2 MLOAD DUP1 DUP3 SUB SWAP1 SWAP5 ADD DUP5 MSTORE PUSH1 0x75 ADD SWAP1 MSTORE DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x211 DUP1 PUSH3 0x172F DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP1 DUP2 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP4 SSTORE PUSH1 0x2 DUP1 SLOAD SWAP1 SWAP3 AND SWAP3 DUP7 AND SWAP3 SWAP1 SWAP3 OR PUSH32 0xFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH21 0x10000000000000000000000000000000000000000 PUSH1 0xE0 DUP6 SWAP1 SHR MUL OR SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH32 0x18C2F4CF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH4 0x18C2F4CF SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x161D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x1632 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH3 0x1649 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 DUP2 AND SWAP2 AND EQ PUSH3 0x16DE JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E636F727265637420696E7374616E63652074797065000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP PUSH1 0x3 DUP1 SLOAD PUSH1 0xE0 SWAP3 SWAP1 SWAP3 SHR PUSH21 0x10000000000000000000000000000000000000000 MUL PUSH32 0xFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP POP JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x211 CODESIZE SUB DUP1 PUSH2 0x211 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 DUP4 ADD DUP1 MLOAD PUSH1 0x40 MLOAD SWAP3 SWAP5 SWAP3 SWAP4 DUP4 ADD SWAP3 SWAP2 SWAP1 DUP5 PUSH5 0x100000000 DUP3 GT ISZERO PUSH2 0x4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0x20 DUP3 ADD DUP6 DUP2 GT ISZERO PUSH2 0x62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH5 0x100000000 DUP2 GT DUP3 DUP3 ADD DUP9 LT OR ISZERO PUSH2 0x7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MSTORE POP DUP2 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA9 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x91 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xD6 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP PUSH1 0x40 MSTORE POP POP POP PUSH1 0x0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x119 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0xFA JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x179 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x17E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x191 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x363D3D373D3D3D363D7300000000000000000000000000000000000000000000 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT PUSH1 0x60 DUP8 SWAP1 SHL AND PUSH1 0x2A DUP4 ADD MSTORE PUSH32 0x5AF43D82803E903D91602B57FD5BF30000000000000000000000000000000000 PUSH1 0x3E DUP4 ADD MSTORE DUP3 MLOAD PUSH1 0x2D DUP2 DUP5 SUB DUP2 ADD DUP3 MSTORE PUSH1 0x4D SWAP1 SWAP4 ADD SWAP1 SWAP4 MSTORE DUP3 ADD RETURN INVALID PUSH20 0x74617274496E646578206D757374206265206C65 PUSH20 0x73207468616E20656E64496E646578617474656D PUSH17 0x746564206465706C6F796D656E7420746F KECCAK256 PUSH22 0x6E65787065637465642061646472657373636F6E7472 PUSH2 0x6374 KECCAK256 PUSH2 0x6C72 PUSH6 0x616479206465 PUSH17 0x6C6F796564207769746820737570706C69 PUSH6 0x642073616C74 LOG2 PUSH6 0x627A7A723158 KECCAK256 0xae PUSH27 0x8C417705EF0F3ECBA340EABD1037A6ECF733EDEEFBFC036C408AD3 LOG2 0xd5 0x1e PUSH5 0x736F6C6343 STOP SDIV SIGNEXTEND STOP ORIGIN ",
				"sourceMap": "91:480:3:-;;;141:427;8:9:-1;5:2;;;30:1;27;20:12;5:2;141:427:3;;;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;141:427:3;;;;;;;;323:18;;;;;;;;;;;;;;;;141:427;;222:23;;313:29;;403:28;;478:83;;141:427;;;;313:29;;403:28;;478:19;;;;;:83;;:::i;:::-;141:427;;;;;91:480;;537:571:20;704:17;:36;;-1:-1:-1;;;;;;704:36:20;;;-1:-1:-1;;;;;704:36:20;;;;;;;;;780:17;:36;;;;;;;;;;;;-1:-1:-1;;;;854:28:20;;;;;;;;;;962:45;;;;;;;;:43;;:45;;;;;;;;;;;;;;;704:36;962:45;;;5:2:-1;;;;30:1;27;20:12;5:2;962:45:20;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;962:45:20;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;962:45:20;946:61;;;;;;;938:97;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1073:13:20;:28;;;;;;;;;-1:-1:-1;;;;1073:28:20;;;;;;;;;-1:-1:-1;;537:571:20:o;91:480:3:-;;;;;;;"
			}
		}
	},
	"sources": {
		"agreements/SimpleGriefing_Factory.sol": {
			"id": 3
		},
		"modules/Factory.sol": {
			"id": 20
		},
		"modules/Spawner.sol": {
			"id": 28
		},
		"modules/iRegistry.sol": {
			"id": 33
		},
		"agreements/SimpleGriefing.sol": {
			"id": 2
		},
		"helpers/openzeppelin-solidity/math/SafeMath.sol": {
			"id": 12
		},
		"helpers/openzeppelin-solidity/token/ERC20/IERC20.sol": {
			"id": 15
		},
		"modules/Countdown.sol": {
			"id": 17
		},
		"modules/Deadline.sol": {
			"id": 18
		},
		"modules/Griefing.sol": {
			"id": 21
		},
		"helpers/DecimalMath.sol": {
			"id": 4
		},
		"modules/Staking.sol": {
			"id": 29
		},
		"modules/BurnNMR.sol": {
			"id": 16
		},
		"modules/iNMR.sol": {
			"id": 32
		},
		"modules/EventMetadata.sol": {
			"id": 19
		},
		"modules/Operated.sol": {
			"id": 24
		},
		"modules/Template.sol": {
			"id": 30
		},
		"modules/iFactory.sol": {
			"id": 31
		}
	},
	"sourceCodes": {
		"agreements/SimpleGriefing_Factory.sol": "pragma solidity ^0.5.0;\n\nimport \"../modules/Factory.sol\";\nimport \"./SimpleGriefing.sol\";\n\n\ncontract SimpleGriefing_Factory is Factory {\n\n    constructor(address instanceRegistry, address templateContract) public {\n        SimpleGriefing template;\n        // set instance type\n        bytes4 instanceType = bytes4(keccak256(bytes('Agreement')));\n        // set initSelector\n        bytes4 initSelector = template.initialize.selector;\n        // initialize factory params\n        Factory._initialize(instanceRegistry, templateContract, instanceType, initSelector);\n    }\n\n}\n",
		"modules/Factory.sol": "pragma solidity ^0.5.0;\n\nimport \"./Spawner.sol\";\nimport \"./iRegistry.sol\";\n\n\ncontract Factory is Spawner {\n\n    address[] private _instances;\n    mapping (address => address) private _instanceCreator;\n\n    /* NOTE: The following items can be hardcoded as constant to save ~200 gas/create */\n    address private _templateContract;\n    bytes4 private _initSelector;\n    address private _instanceRegistry;\n    bytes4 private _instanceType;\n\n    event InstanceCreated(address indexed instance, address indexed creator, bytes callData);\n\n    function _initialize(address instanceRegistry, address templateContract, bytes4 instanceType, bytes4 initSelector) internal {\n        // set instance registry\n        _instanceRegistry = instanceRegistry;\n        // set logic contract\n        _templateContract = templateContract;\n        // set initSelector\n        _initSelector = initSelector;\n        // validate correct instance registry\n        require(instanceType == iRegistry(instanceRegistry).getInstanceType(), 'incorrect instance type');\n        // set instanceType\n        _instanceType = instanceType;\n    }\n\n    // IFactory methods\n\n    function create(bytes memory callData) public returns (address instance) {\n        // deploy new contract: initialize it & write minimal proxy to runtime.\n        instance = Spawner._spawn(getTemplate(), callData);\n\n        _createHelper(instance, callData);\n    }\n\n    function createSalty(bytes memory callData, bytes32 salt) public returns (address instance) {\n        // deploy new contract: initialize it & write minimal proxy to runtime.\n        instance = Spawner._spawnSalty(getTemplate(), callData, salt);\n\n        _createHelper(instance, callData);\n    }\n\n    function _createHelper(address instance, bytes memory callData) private {\n        // add the instance to the array\n        _instances.push(instance);\n        // set instance creator\n        _instanceCreator[instance] = msg.sender;\n        // add the instance to the instance registry\n        iRegistry(getInstanceRegistry()).register(instance, msg.sender, uint80(0));\n        // emit event\n        emit InstanceCreated(instance, msg.sender, callData);\n    }\n\n    function getSaltyInstance(\n        bytes memory callData,\n        bytes32 salt\n    ) public view returns (address target) {\n        return Spawner._computeTargetAddress(getTemplate(), callData, salt);\n    }\n\n    function getNextInstance(\n        bytes memory callData\n    ) public view returns (address target) {\n        return Spawner._getNextAddress(getTemplate(), callData);\n    }\n\n    function getInstanceCreator(address instance) public view returns (address creator) {\n        creator = _instanceCreator[instance];\n    }\n\n    function getInstanceType() public view returns (bytes4 instanceType) {\n        instanceType = _instanceType;\n    }\n\n    function getInitSelector() public view returns (bytes4 initSelector) {\n        initSelector = _initSelector;\n    }\n\n    function getInstanceRegistry() public view returns (address instanceRegistry) {\n        instanceRegistry = _instanceRegistry;\n    }\n\n    function getTemplate() public view returns (address template) {\n        template = _templateContract;\n    }\n\n    function getInstanceCount() public view returns (uint256 count) {\n        count = _instances.length;\n    }\n\n    function getInstance(uint256 index) public view returns (address instance) {\n        require(index < _instances.length, \"index out of range\");\n        instance = _instances[index];\n    }\n\n    function getInstances() public view returns (address[] memory instances) {\n        instances = _instances;\n    }\n\n    // Note: startIndex is inclusive, endIndex exclusive\n    function getPaginatedInstances(uint256 startIndex, uint256 endIndex) public view returns (address[] memory instances) {\n        require(startIndex < endIndex, \"startIndex must be less than endIndex\");\n        require(endIndex <= _instances.length, \"end index out of range\");\n\n        // initialize fixed size memory array\n        address[] memory range = new address[](endIndex - startIndex);\n\n        // Populate array with addresses in range\n        for (uint256 i = startIndex; i < endIndex; i++) {\n            range[i - startIndex] = _instances[i];\n        }\n\n        // return array of addresses\n        instances = range;\n    }\n\n}\n",
		"modules/Spawner.sol": "pragma solidity ^0.5.0;\n\n\n/**\n * @title Spawn\n * @author 0age\n * @notice This contract provides creation code that is used by Spawner in order\n * to initialize and deploy eip-1167 minimal proxies for a given logic contract.\n */\ncontract Spawn {\n  constructor(\n    address logicContract,\n    bytes memory initializationCalldata\n  ) public payable {\n    // delegatecall into the logic contract to perform initialization.\n    (bool ok, ) = logicContract.delegatecall(initializationCalldata);\n    if (!ok) {\n      // pass along failure message from delegatecall and revert.\n      assembly {\n        returndatacopy(0, 0, returndatasize)\n        revert(0, returndatasize)\n      }\n    }\n\n    // place eip-1167 runtime code in memory.\n    bytes memory runtimeCode = abi.encodePacked(\n      bytes10(0x363d3d373d3d3d363d73),\n      logicContract,\n      bytes15(0x5af43d82803e903d91602b57fd5bf3)\n    );\n\n    // return eip-1167 code to write it to spawned contract runtime.\n    assembly {\n      return(add(0x20, runtimeCode), 45) // eip-1167 runtime code, length\n    }\n  }\n}\n\n/**\n * @title Spawner\n * @author 0age\n * @notice This contract spawns and initializes eip-1167 minimal proxies that\n * point to existing logic contracts. The logic contracts need to have an\n * intitializer function that should only callable when no contract exists at\n * their current address (i.e. it is being `DELEGATECALL`ed from a constructor).\n */\ncontract Spawner {\n  /**\n   * @notice Internal function for spawning an eip-1167 minimal proxy using\n   * `CREATE2`.\n   * @param logicContract address The address of the logic contract.\n   * @param initializationCalldata bytes The calldata that will be supplied to\n   * the `DELEGATECALL` from the spawned contract to the logic contract during\n   * contract creation.\n   * @return The address of the newly-spawned contract.\n   */\n  function _spawn(\n    address logicContract,\n    bytes memory initializationCalldata\n  ) internal returns (address spawnedContract) {\n    // place creation code and constructor args of contract to spawn in memory.\n    bytes memory initCode = abi.encodePacked(\n      type(Spawn).creationCode,\n      abi.encode(logicContract, initializationCalldata)\n    );\n\n    // get salt to use during deployment using the supplied initialization code.\n    (bytes32 salt, address target) = _getSaltAndTarget(initCode);\n\n    // spawn the contract using `CREATE2`.\n    spawnedContract = _spawnCreate2(initCode, salt, target);\n  }\n\n  /**\n   * @notice Internal function for spawning an eip-1167 minimal proxy using\n   * `CREATE2`.\n   * @param logicContract address The address of the logic contract.\n   * @param initializationCalldata bytes The calldata that will be supplied to\n   * the `DELEGATECALL` from the spawned contract to the logic contract during\n   * contract creation.\n   * @param salt bytes32 A random salt\n   * @return The address of the newly-spawned contract.\n   */\n  function _spawnSalty(\n    address logicContract,\n    bytes memory initializationCalldata,\n    bytes32 salt\n  ) internal returns (address spawnedContract) {\n    // place creation code and constructor args of contract to spawn in memory.\n    bytes memory initCode = abi.encodePacked(\n      type(Spawn).creationCode,\n      abi.encode(logicContract, initializationCalldata)\n    );\n\n    address target = _computeTargetAddress(logicContract, initializationCalldata, salt);\n\n    uint256 codeSize;\n    assembly { codeSize := extcodesize(target) }\n    require(codeSize == 0, \"contract already deployed with supplied salt\");\n\n    // spawn the contract using `CREATE2`.\n    spawnedContract = _spawnCreate2(initCode, salt, target);\n  }\n\n  /**\n   * @notice Internal view function for finding the address of the next standard\n   * eip-1167 minimal proxy created using `CREATE2` with a given logic contract\n   * and initialization calldata payload.\n   * @param logicContract address The address of the logic contract.\n   * @param initializationCalldata bytes The calldata that will be supplied to\n   * the `DELEGATECALL` from the spawned contract to the logic contract during\n   * contract creation.\n   * @return The address of the next spawned minimal proxy contract with the\n   * given parameters.\n   */\n  function _getNextAddress(\n    address logicContract,\n    bytes memory initializationCalldata\n  ) internal view returns (address target) {\n    // place creation code and constructor args of contract to spawn in memory.\n    bytes memory initCode = abi.encodePacked(\n      type(Spawn).creationCode,\n      abi.encode(logicContract, initializationCalldata)\n    );\n\n    // get target address using the constructed initialization code.\n    (, target) = _getSaltAndTarget(initCode);\n  }\n\n  /**\n   * @notice Internal view function for finding the address of the next standard\n   * eip-1167 minimal proxy created using `CREATE2` with a given logic contract,\n   * salt, and initialization calldata payload.\n   * @param initCodeHash bytes32 The encoded hash of initCode\n   * @param salt bytes32 A random salt\n   * @return The address of the next spawned minimal proxy contract with the\n   * given parameters.\n   */\n  function _computeTargetAddress(\n    bytes32 initCodeHash,\n    bytes32 salt\n  ) internal view returns (address target) {\n    target = address(    // derive the target deployment address.\n      uint160(                   // downcast to match the address type.\n        uint256(                 // cast to uint to truncate upper digits.\n          keccak256(             // compute CREATE2 hash using 4 inputs.\n            abi.encodePacked(    // pack all inputs to the hash together.\n              bytes1(0xff),      // pass in the control character.\n              address(this),     // pass in the address of this contract.\n              salt,              // pass in the salt from above.\n              initCodeHash       // pass in hash of contract creation code.\n            )\n          )\n        )\n      )\n    );\n  }\n\n  /**\n   * @notice Internal view function for finding the address of the next standard\n   * eip-1167 minimal proxy created using `CREATE2` with a given logic contract\n   * and initialization calldata payload.\n   * @param logicContract address The address of the logic contract.\n   * @param initializationCalldata bytes The calldata that will be supplied to\n   * the `DELEGATECALL` from the spawned contract to the logic contract during\n   * contract creation.\n   * @param salt bytes32 A random salt\n   * @return The address of the next spawned minimal proxy contract with the\n   * given parameters.\n   */\n  function _computeTargetAddress(\n    address logicContract,\n    bytes memory initializationCalldata,\n    bytes32 salt\n  ) internal view returns (address target) {\n    // place creation code and constructor args of contract to spawn in memory.\n    bytes memory initCode = abi.encodePacked(\n      type(Spawn).creationCode,\n      abi.encode(logicContract, initializationCalldata)\n    );\n    // get the keccak256 hash of the init code for address derivation.\n    bytes32 initCodeHash = keccak256(initCode);\n\n    target = _computeTargetAddress(initCodeHash, salt);\n  }\n\n  /**\n   * @notice Private function for spawning a compact eip-1167 minimal proxy\n   * using `CREATE2`. Provides logic that is reused by internal functions. A\n   * salt will also be chosen based on the calling address and a computed nonce\n   * that prevents deployments to existing addresses.\n   * @param initCode bytes The contract creation code.\n   * @param salt bytes32 A random salt\n   * @param target address The expected address of the new contract\n   * @return The address of the newly-spawned contract.\n   */\n  function _spawnCreate2(\n    bytes memory initCode,\n    bytes32 salt,\n    address target\n  ) private returns (address spawnedContract) {\n    assembly {\n      let encoded_data := add(0x20, initCode) // load initialization code.\n      let encoded_size := mload(initCode)     // load the init code's length.\n      spawnedContract := create2(             // call `CREATE2` w/ 4 arguments.\n        callvalue,                            // forward any supplied endowment.\n        encoded_data,                         // pass in initialization code.\n        encoded_size,                         // pass in init code's length.\n        salt                                  // pass in the salt value.\n      )\n\n      // pass along failure message from failed contract deployment and revert.\n      if iszero(spawnedContract) {\n        returndatacopy(0, 0, returndatasize)\n        revert(0, returndatasize)\n      }\n    }\n\n    require(spawnedContract == target, \"attempted deployment to unexpected address\");\n  }\n\n  /**\n   * @notice Private function for determining the salt and the target deployment\n   * address for the next spawned contract (using create2) based on the contract\n   * creation code.\n   */\n  function _getSaltAndTarget(\n    bytes memory initCode\n  ) private view returns (bytes32 salt, address target) {\n    // get the keccak256 hash of the init code for address derivation.\n    bytes32 initCodeHash = keccak256(initCode);\n\n    // set the initial nonce to be provided when constructing the salt.\n    uint256 nonce = 0;\n\n    // declare variable for code size of derived address.\n    uint256 codeSize;\n\n    while (true) {\n      // derive `CREATE2` salt using `msg.sender` and nonce.\n      salt = keccak256(abi.encodePacked(msg.sender, nonce));\n\n      target = _computeTargetAddress(initCodeHash, salt);\n\n      // determine if a contract is already deployed to the target address.\n      assembly { codeSize := extcodesize(target) }\n\n      // exit the loop if no contract is deployed to the target address.\n      if (codeSize == 0) {\n        break;\n      }\n\n      // otherwise, increment the nonce and derive a new salt.\n      nonce++;\n    }\n  }\n}\n",
		"modules/iRegistry.sol": "pragma solidity ^0.5.0;\n\n\ninterface iRegistry {\n\n    enum FactoryStatus { Unregistered, Registered, Retired }\n\n    event FactoryAdded(address owner, address factory, uint256 factoryID, bytes extraData);\n    event FactoryRetired(address owner, address factory, uint256 factoryID);\n    event InstanceRegistered(address instance, uint256 instanceIndex, address indexed creator, address indexed factory, uint256 indexed factoryID);\n\n    // factory state functions\n\n    function addFactory(address factory, bytes calldata extraData ) external;\n    function retireFactory(address factory) external;\n\n    // factory view functions\n\n    function getFactoryCount() external view returns (uint256 count);\n    function getFactoryStatus(address factory) external view returns (FactoryStatus status);\n    function getFactoryID(address factory) external view returns (uint16 factoryID);\n    function getFactoryData(address factory) external view returns (bytes memory extraData);\n    function getFactoryAddress(uint16 factoryID) external view returns (address factory);\n    function getFactory(address factory) external view returns (FactoryStatus state, uint16 factoryID, bytes memory extraData);\n    function getFactories() external view returns (address[] memory factories);\n    function getPaginatedFactories(uint256 startIndex, uint256 endIndex) external view returns (address[] memory factories);\n\n    // instance state functions\n\n    function register(address instance, address creator, uint80 extraData) external;\n\n    // instance view functions\n\n    function getInstanceType() external view returns (bytes4 instanceType);\n    function getInstanceCount() external view returns (uint256 count);\n    function getInstance(uint256 index) external view returns (address instance);\n    function getInstances() external view returns (address[] memory instances);\n    function getPaginatedInstances(uint256 startIndex, uint256 endIndex) external view returns (address[] memory instances);\n}\n",
		"agreements/SimpleGriefing.sol": "pragma solidity ^0.5.0;\n\nimport \"../helpers/openzeppelin-solidity/math/SafeMath.sol\";\nimport \"../helpers/openzeppelin-solidity/token/ERC20/IERC20.sol\";\nimport \"../modules/Countdown.sol\";\nimport \"../modules/Griefing.sol\";\nimport \"../modules/EventMetadata.sol\";\nimport \"../modules/Operated.sol\";\nimport \"../modules/Template.sol\";\n\n/* Immediately engage with specific buyer\n * - Stake can be increased at any time.\n * - Counterparty can greif the staker at predefined ratio.\n *\n * NOTE:\n * - This top level contract should only perform access control and state transitions\n *\n */\ncontract SimpleGriefing is Griefing, EventMetadata, Operated, Template {\n\n    using SafeMath for uint256;\n\n    Data private _data;\n    struct Data {\n        address staker;\n        address counterparty;\n    }\n\n    event Initialized(address operator, address staker, address counterparty, uint256 ratio, Griefing.RatioType ratioType, bytes metadata);\n\n    function initialize(\n        address operator,\n        address staker,\n        address counterparty,\n        uint256 ratio,\n        Griefing.RatioType ratioType,\n        bytes memory metadata\n    ) public initializeTemplate() {\n        // set storage values\n        _data.staker = staker;\n        _data.counterparty = counterparty;\n\n        // set operator\n        if (operator != address(0)) {\n            Operated._setOperator(operator);\n            Operated._activateOperator();\n        }\n\n        // set griefing ratio\n        Griefing._setRatio(staker, ratio, ratioType);\n\n        // set metadata\n        if (metadata.length != 0) {\n            EventMetadata._setMetadata(metadata);\n        }\n\n        // log initialization params\n        emit Initialized(operator, staker, counterparty, ratio, ratioType, metadata);\n    }\n\n    // state functions\n\n    function setMetadata(bytes memory metadata) public {\n        // restrict access\n        require(isStaker(msg.sender) || Operated.isActiveOperator(msg.sender), \"only staker or active operator\");\n\n        // update metadata\n        EventMetadata._setMetadata(metadata);\n    }\n\n    function increaseStake(uint256 currentStake, uint256 amountToAdd) public {\n        // restrict access\n        require(isStaker(msg.sender) || Operated.isActiveOperator(msg.sender), \"only staker or active operator\");\n\n        // add stake\n        Staking._addStake(_data.staker, msg.sender, currentStake, amountToAdd);\n    }\n\n    function reward(uint256 currentStake, uint256 amountToAdd) public {\n        // restrict access\n        require(isCounterparty(msg.sender) || Operated.isActiveOperator(msg.sender), \"only counterparty or active operator\");\n\n        // add stake\n        Staking._addStake(_data.staker, msg.sender, currentStake, amountToAdd);\n    }\n\n    function punish(uint256 currentStake, uint256 punishment, bytes memory message) public returns (uint256 cost) {\n        // restrict access\n        require(isCounterparty(msg.sender) || Operated.isActiveOperator(msg.sender), \"only counterparty or active operator\");\n\n        // execute griefing\n        cost = Griefing._grief(msg.sender, _data.staker, currentStake, punishment, message);\n    }\n\n    function releaseStake(uint256 currentStake, uint256 amountToRelease) public {\n        // restrict access\n        require(isCounterparty(msg.sender) || Operated.isActiveOperator(msg.sender), \"only counterparty or active operator\");\n\n        // release stake back to the staker\n        Staking._takeStake(_data.staker, _data.staker, currentStake, amountToRelease);\n    }\n\n    function transferOperator(address operator) public {\n        // restrict access\n        require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n\n        // transfer operator\n        Operated._transferOperator(operator);\n    }\n\n    function renounceOperator() public {\n        // restrict access\n        require(Operated.isActiveOperator(msg.sender), \"only active operator\");\n\n        // transfer operator\n        Operated._renounceOperator();\n    }\n\n    // view functions\n\n    function isStaker(address caller) public view returns (bool validity) {\n        validity = (caller == _data.staker);\n    }\n\n    function isCounterparty(address caller) public view returns (bool validity) {\n        validity = (caller == _data.counterparty);\n    }\n}\n",
		"helpers/openzeppelin-solidity/math/SafeMath.sol": "pragma solidity ^0.5.0;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error.\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n",
		"helpers/openzeppelin-solidity/token/ERC20/IERC20.sol": "pragma solidity ^0.5.0;\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n",
		"modules/Countdown.sol": "pragma solidity ^0.5.0;\n\nimport \"../helpers/openzeppelin-solidity/math/SafeMath.sol\";\nimport \"./Deadline.sol\";\n\n\n/* Countdown timer\n */\ncontract Countdown is Deadline {\n\n    using SafeMath for uint256;\n\n    uint256 private _length;\n\n    event LengthSet(uint256 length);\n\n    // state functions\n\n    function _setLength(uint256 length) internal {\n        _length = length;\n        emit LengthSet(length);\n    }\n\n    function _start() internal returns (uint256 deadline) {\n        deadline = _length.add(now);\n        Deadline._setDeadline(deadline);\n    }\n\n    // view functions\n\n    function getLength() public view returns (uint256 length) {\n        length = _length;\n    }\n\n    // if Deadline._setDeadline or Countdown._setLength is not called,\n    // isOver will yield false\n    function isOver() public view returns (bool status) {\n        // when deadline not set,\n        // countdown has not started, hence not isOver\n        if (Deadline.getDeadline() == 0) {\n            status = false;\n        } else {\n            status = Deadline.isAfterDeadline();\n        }\n    }\n\n    // timeRemaining will default to 0 if _setDeadline is not called\n    // if the now exceeds deadline, just return 0 as the timeRemaining\n    function timeRemaining() public view returns (uint256 time) {\n        if (now >= Deadline.getDeadline()) {\n            time = 0;\n        } else {\n            time = Deadline.getDeadline().sub(now);\n        }\n    }\n\n}\n",
		"modules/Deadline.sol": "pragma solidity ^0.5.0;\n\n\n/* Deadline\n *\n */\ncontract Deadline {\n\n    uint256 private _deadline;\n\n    event DeadlineSet(uint256 deadline);\n\n    // state functions\n\n    function _setDeadline(uint256 deadline) internal {\n        _deadline = deadline;\n        emit DeadlineSet(deadline);\n    }\n\n    // view functions\n\n    function getDeadline() public view returns (uint256 deadline) {\n        deadline = _deadline;\n    }\n\n    // if the _deadline is not set yet, isAfterDeadline will return true\n    // due to now - 0 = now\n    function isAfterDeadline() public view returns (bool status) {\n        if (_deadline == 0) {\n            status = false;\n        } else {\n            status = (now >= _deadline);\n        }\n    }\n\n}\n",
		"modules/Griefing.sol": "pragma solidity ^0.5.0;\n\nimport \"../helpers/DecimalMath.sol\";\nimport \"./Staking.sol\";\n\n\ncontract Griefing is Staking {\n\n    enum RatioType { NaN, Inf, Dec }\n\n    mapping (address => GriefRatio) private _griefRatio;\n    struct GriefRatio {\n        uint256 ratio;\n        RatioType ratioType;\n   }\n\n    event RatioSet(address staker, uint256 ratio, RatioType ratioType);\n    event Griefed(address punisher, address staker, uint256 punishment, uint256 cost, bytes message);\n\n    uint256 internal constant e18 = uint256(10) ** uint256(18);\n\n    // state functions\n\n    function _setRatio(address staker, uint256 ratio, RatioType ratioType) internal {\n        if (ratioType == RatioType.NaN || ratioType == RatioType.Inf) {\n            require(ratio == 0, \"ratio must be 0 when ratioType is NaN or Inf\");\n        }\n\n        // set data in storage\n        _griefRatio[staker].ratio = ratio;\n        _griefRatio[staker].ratioType = ratioType;\n\n        // emit event\n        emit RatioSet(staker, ratio, ratioType);\n    }\n\n    function _grief(\n        address punisher,\n        address staker,\n        uint256 currentStake,\n        uint256 punishment,\n        bytes memory message\n    ) internal returns (uint256 cost) {\n\n        // prevent accidental double punish\n        // cannot be strict equality to prevent frontrunning\n        require(currentStake <= Staking.getStake(staker), \"current stake incorrect\");\n\n        // get grief data from storage\n        uint256 ratio = _griefRatio[staker].ratio;\n        RatioType ratioType = _griefRatio[staker].ratioType;\n\n        require(ratioType != RatioType.NaN, \"no punishment allowed\");\n\n        // calculate cost\n        // getCost also acts as a guard when _setRatio is not called before\n        cost = getCost(ratio, punishment, ratioType);\n\n        // burn the cost from the punisher's balance\n        BurnNMR._burnFrom(punisher, cost);\n\n        // burn the punishment from the target's stake\n        Staking._burnStake(staker, currentStake, punishment);\n\n        // emit event\n        emit Griefed(punisher, staker, punishment, cost, message);\n    }\n\n    // view functions\n\n    function getRatio(address staker) public view returns (uint256 ratio, RatioType ratioType) {\n        // get stake data from storage\n        ratio = _griefRatio[staker].ratio;\n        ratioType = _griefRatio[staker].ratioType;\n    }\n\n    // pure functions\n\n    function getCost(uint256 ratio, uint256 punishment, RatioType ratioType) public pure returns(uint256 cost) {\n        /*  Dec:  Cost multiplied by ratio interpreted as a decimal number with 18 decimals, e.g. 1 -> 1e18\n         *  Inf:  Punishment at no cost\n         *  NaN:  No Punishment */\n        if (ratioType == RatioType.Dec) {\n            return DecimalMath.mul(SafeMath.mul(punishment, e18), ratio) / e18;\n        }\n        if (ratioType == RatioType.Inf)\n            return 0;\n        if (ratioType == RatioType.NaN)\n            revert(\"ratioType cannot be RatioType.NaN\");\n    }\n\n    function getPunishment(uint256 ratio, uint256 cost, RatioType ratioType) public pure returns(uint256 punishment) {\n        /*  Dec: Ratio is a decimal number with 18 decimals\n         *  Inf:  Punishment at no cost\n         *  NaN:  No Punishment */\n        if (ratioType == RatioType.Dec) {\n            return DecimalMath.div(SafeMath.mul(cost, e18), ratio) / e18;\n        }\n        if (ratioType == RatioType.Inf)\n            revert(\"ratioType cannot be RatioType.Inf\");\n        if (ratioType == RatioType.NaN)\n            revert(\"ratioType cannot be RatioType.NaN\");\n    }\n\n}\n",
		"helpers/DecimalMath.sol": "pragma solidity ^0.5.0;\n\nimport \"./openzeppelin-solidity/math/SafeMath.sol\";\n\n/* @title DecimalMath\n * @dev taken from https://github.com/PolymathNetwork/polymath-core\n * @dev Apache v2 License\n */\nlibrary DecimalMath {\n    using SafeMath for uint256;\n\n    uint256 internal constant e18 = uint256(10) ** uint256(18);\n\n    /**\n     * @notice This function multiplies two decimals represented as (decimal * 10**DECIMALS)\n     * @return uint256 Result of multiplication represented as (decimal * 10**DECIMALS)\n     */\n    function mul(uint256 x, uint256 y) internal pure returns(uint256 z) {\n        z = SafeMath.add(SafeMath.mul(x, y), (e18) / 2) / (e18);\n    }\n\n    /**\n     * @notice This function divides two decimals represented as (decimal * 10**DECIMALS)\n     * @return uint256 Result of division represented as (decimal * 10**DECIMALS)\n     */\n    function div(uint256 x, uint256 y) internal pure returns(uint256 z) {\n        z = SafeMath.add(SafeMath.mul(x, (e18)), y / 2) / y;\n    }\n\n}\n",
		"modules/Staking.sol": "pragma solidity ^0.5.0;\n\nimport \"../helpers/openzeppelin-solidity/math/SafeMath.sol\";\nimport \"../helpers/openzeppelin-solidity/token/ERC20/IERC20.sol\";\nimport \"./BurnNMR.sol\";\n\n\ncontract Staking is BurnNMR {\n\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _stake;\n\n    event StakeAdded(address staker, address funder, uint256 amount, uint256 newStake);\n    event StakeTaken(address staker, address recipient, uint256 amount, uint256 newStake);\n    event StakeBurned(address staker, uint256 amount, uint256 newStake);\n\n    function _addStake(address staker, address funder, uint256 currentStake, uint256 amountToAdd) internal {\n        // require current stake amount matches expected amount\n        require(currentStake == _stake[staker], \"current stake incorrect\");\n\n        // require non-zero stake to add\n        require(amountToAdd > 0, \"no stake to add\");\n\n        // calculate new stake amount\n        uint256 newStake = currentStake.add(amountToAdd);\n\n        // set new stake to storage\n        _stake[staker] = newStake;\n\n        // transfer the stake amount\n        require(IERC20(BurnNMR.getToken()).transferFrom(funder, address(this), amountToAdd), \"token transfer failed\");\n\n        // emit event\n        emit StakeAdded(staker, funder, amountToAdd, newStake);\n    }\n\n    function _takeStake(address staker, address recipient, uint256 currentStake, uint256 amountToTake) internal {\n        // require current stake amount matches expected amount\n        require(currentStake == _stake[staker], \"current stake incorrect\");\n\n        // require non-zero stake to take\n        require(amountToTake > 0, \"no stake to take\");\n\n        // amountToTake has to be less than equal currentStake\n        require(amountToTake <= currentStake, \"cannot take more than currentStake\");\n\n        // calculate new stake amount\n        uint256 newStake = currentStake.sub(amountToTake);\n\n        // set new stake to storage\n        _stake[staker] = newStake;\n\n        // transfer the stake amount\n        require(IERC20(BurnNMR.getToken()).transfer(recipient, amountToTake), \"token transfer failed\");\n\n        // emit event\n        emit StakeTaken(staker, recipient, amountToTake, newStake);\n    }\n\n    function _takeFullStake(address staker, address recipient) internal returns (uint256 stake) {\n        // get stake from storage\n        stake = _stake[staker];\n\n        // take full stake\n        _takeStake(staker, recipient, stake, stake);\n    }\n\n    function _burnStake(address staker, uint256 currentStake, uint256 amountToBurn) internal {\n        // require current stake amount matches expected amount\n        require(currentStake == _stake[staker], \"current stake incorrect\");\n\n        // require non-zero stake to burn\n        require(amountToBurn > 0, \"no stake to burn\");\n\n        // amountToTake has to be less than equal currentStake\n        require(amountToBurn <= currentStake, \"cannot burn more than currentStake\");\n\n        // calculate new stake amount\n        uint256 newStake = currentStake.sub(amountToBurn);\n\n        // set new stake to storage\n        _stake[staker] = newStake;\n\n        // burn the stake amount\n        BurnNMR._burn(amountToBurn);\n\n        // emit event\n        emit StakeBurned(staker, amountToBurn, newStake);\n    }\n\n    function _burnFullStake(address staker) internal returns (uint256 stake) {\n        // get stake from storage\n        stake = _stake[staker];\n\n        // burn full stake\n        _burnStake(staker, stake, stake);\n    }\n\n    // view functions\n\n    function getStake(address staker) public view returns (uint256 stake) {\n        stake = _stake[staker];\n    }\n\n}\n",
		"modules/BurnNMR.sol": "pragma solidity ^0.5.0;\n\nimport \"./iNMR.sol\";\n\n/**\n * @title NMR token burning helper\n * @dev Allows for calling NMR burn functions using regular openzeppelin ERC20Burnable interface and revert on failure.\n */\ncontract BurnNMR {\n\n    // address of the token\n    address private constant _Token = address(0x1776e1F26f98b1A5dF9cD347953a26dd3Cb46671);\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param value The amount of token to be burned.\n     */\n    function _burn(uint256 value) internal {\n        require(iNMR(_Token).mint(value), \"nmr burn failed\");\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance.\n     * @param from address The account whose tokens will be burned.\n     * @param value uint256 The amount of token to be burned.\n     */\n    function _burnFrom(address from, uint256 value) internal {\n        require(iNMR(_Token).numeraiTransfer(from, value), \"nmr burnFrom failed\");\n    }\n\n    function getToken() public pure returns (address token) {\n        token = _Token;\n    }\n\n}\n",
		"modules/iNMR.sol": "pragma solidity ^0.5.0;\n\n\ncontract iNMR {\n\n    // ERC20\n    function totalSupply() external returns (uint256);\n    function balanceOf(address _owner) external returns (uint256);\n    function allowance(address _owner, address _spender) external returns (uint256);\n\n    function transfer(address _to, uint256 _value) external returns (bool ok);\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool ok);\n    function approve(address _spender, uint256 _value) external returns (bool ok);\n    function changeApproval(address _spender, uint256 _oldValue, uint256 _newValue) external returns (bool ok);\n\n    // burn\n    function mint(uint256 _value) external returns (bool ok);\n    // burnFrom\n    function numeraiTransfer(address _to, uint256 _value) external returns (bool ok);\n}\n",
		"modules/EventMetadata.sol": "pragma solidity ^0.5.0;\n\n\ncontract EventMetadata {\n\n    event MetadataSet(bytes metadata);\n\n    // state functions\n\n    function _setMetadata(bytes memory metadata) internal {\n        emit MetadataSet(metadata);\n    }\n}\n",
		"modules/Operated.sol": "pragma solidity ^0.5.0;\n\n\ncontract Operated {\n\n    address private _operator;\n    bool private _status;\n\n    event OperatorUpdated(address operator, bool status);\n\n    // state functions\n\n    function _setOperator(address operator) internal {\n        require(_operator != operator, \"cannot set same operator\");\n        _operator = operator;\n        emit OperatorUpdated(operator, hasActiveOperator());\n    }\n\n    function _transferOperator(address operator) internal {\n        // transferring operator-ship implies there was an operator set before this\n        require(_operator != address(0), \"operator not set\");\n        _setOperator(operator);\n    }\n\n    function _renounceOperator() internal {\n        require(hasActiveOperator(), \"only when operator active\");\n        _operator = address(0);\n        _status = false;\n        emit OperatorUpdated(address(0), false);\n    }\n\n    function _activateOperator() internal {\n        require(!hasActiveOperator(), \"only when operator not active\");\n        _status = true;\n        emit OperatorUpdated(_operator, true);\n    }\n\n    function _deactivateOperator() internal {\n        require(hasActiveOperator(), \"only when operator active\");\n        _status = false;\n        emit OperatorUpdated(_operator, false);\n    }\n\n    // view functions\n\n    function getOperator() public view returns (address operator) {\n        operator = _operator;\n    }\n\n    function isOperator(address caller) public view returns (bool ok) {\n        return (caller == getOperator());\n    }\n\n    function hasActiveOperator() public view returns (bool ok) {\n        return _status;\n    }\n\n    function isActiveOperator(address caller) public view returns (bool ok) {\n        return (isOperator(caller) && hasActiveOperator());\n    }\n\n}\n",
		"modules/Template.sol": "pragma solidity ^0.5.0;\n\nimport \"./iFactory.sol\";\n\n\ncontract Template {\n\n    address private _factory;\n\n    // modifiers\n\n    modifier initializeTemplate() {\n        // set factory\n        _factory = msg.sender;\n\n        // only allow function to be delegatecalled from within a constructor.\n        uint32 codeSize;\n        assembly { codeSize := extcodesize(address) }\n        require(codeSize == 0, \"must be called within contract constructor\");\n        _;\n    }\n\n    // view functions\n\n    function getCreator() public view returns (address creator) {\n        // iFactory(...) would revert if _factory address is not actually a factory contract\n        creator = iFactory(_factory).getInstanceCreator(address(this));\n    }\n\n    function isCreator(address caller) public view returns (bool ok) {\n        ok = (caller == getCreator());\n    }\n\n    function getFactory() public view returns (address factory) {\n        factory = _factory;\n    }\n\n}\n",
		"modules/iFactory.sol": "pragma solidity ^0.5.0;\n\n/* TODO: Update eip165 interface\n *  bytes4(keccak256('create(bytes)')) == 0xcf5ba53f\n *  bytes4(keccak256('getInstanceType()')) == 0x18c2f4cf\n *  bytes4(keccak256('getInstanceRegistry()')) == 0xa5e13904\n *  bytes4(keccak256('getImplementation()')) == 0xaaf10f42\n *\n *  => 0xcf5ba53f ^ 0x18c2f4cf ^ 0xa5e13904 ^ 0xaaf10f42 == 0xd88967b6\n */\n interface iFactory {\n\n     event InstanceCreated(address indexed instance, address indexed creator, string initABI, bytes initData);\n\n     function create(bytes calldata initData) external returns (address instance);\n     function createSalty(bytes calldata initData, bytes32 salt) external returns (address instance);\n     function getInitSelector() external view returns (bytes4 initSelector);\n     function getInstanceRegistry() external view returns (address instanceRegistry);\n     function getTemplate() external view returns (address template);\n     function getSaltyInstance(bytes calldata, bytes32 salt) external view returns (address instance);\n     function getNextInstance(bytes calldata) external view returns (address instance);\n\n     function getInstanceCreator(address instance) external view returns (address creator);\n     function getInstanceType() external view returns (bytes4 instanceType);\n     function getInstanceCount() external view returns (uint256 count);\n     function getInstance(uint256 index) external view returns (address instance);\n     function getInstances() external view returns (address[] memory instances);\n     function getPaginatedInstances(uint256 startIndex, uint256 endIndex) external view returns (address[] memory instances);\n }\n"
	},
	"sourceTreeHashHex": "0x8f0e9287d756ad5a3ec6481e47edd1523b329a5828966e5aded5786063759eaa",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.5.11+commit.c082d0b4.js",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 999999999
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"evm.bytecode.object"
					]
				}
			},
			"evmVersion": "constantinople",
			"remappings": []
		}
	},
	"networks": {}
}