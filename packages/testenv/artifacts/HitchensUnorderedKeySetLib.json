{
	"schemaVersion": "2.0.0",
	"contractName": "HitchensUnorderedKeySetLib",
	"compilerOutput": {
		"abi": [],
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820c9dd769c0a5e025fab029a109a691867e5fc4298ddaf5ee4d590d5fddc8dcdfc64736f6c634300050b0032",
				"opcodes": "PUSH1 0x55 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 0xc9 0xdd PUSH23 0x9C0A5E025FAB029A109A691867E5FC4298DDAF5EE4D590 0xd5 REVERT 0xdc DUP14 0xcd 0xfc PUSH5 0x736F6C6343 STOP SDIV SIGNEXTEND STOP ORIGIN ",
				"sourceMap": "26:1393:6:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24"
			}
		}
	},
	"sources": {
		"helpers/HitchensUnorderedKeySetLib.sol": {
			"id": 6
		}
	},
	"sourceCodes": {
		"helpers/HitchensUnorderedKeySetLib.sol": "pragma solidity ^0.5.1;\n\n\nlibrary HitchensUnorderedKeySetLib {\n\n    struct Set {\n        mapping(bytes32 => uint) keyPointers;\n        bytes32[] keyList;\n    }\n\n    function insert(Set storage self, bytes32 key) internal {\n        require(key != 0x0, \"UnorderedKeySet(100) - Key cannot be 0x0\");\n        require(!exists(self, key), \"UnorderedKeySet(101) - Key already exists in the set.\");\n        self.keyPointers[key] = self.keyList.push(key)-1;\n    }\n\n    function remove(Set storage self, bytes32 key) internal {\n        require(exists(self, key), \"UnorderedKeySet(102) - Key does not exist in the set.\");\n        bytes32 keyToMove = self.keyList[count(self)-1];\n        uint rowToReplace = self.keyPointers[key];\n        self.keyPointers[keyToMove] = rowToReplace;\n        self.keyList[rowToReplace] = keyToMove;\n        delete self.keyPointers[key];\n        self.keyList.length--;\n    }\n\n    function count(Set storage self) internal view returns(uint) {\n        return(self.keyList.length);\n    }\n\n    function exists(Set storage self, bytes32 key) internal view returns(bool) {\n        if(self.keyList.length == 0) return false;\n        return self.keyList[self.keyPointers[key]] == key;\n    }\n\n    function keyAtIndex(Set storage self, uint index) internal view returns(bytes32) {\n        return self.keyList[index];\n    }\n\n    function nukeSet(Set storage self) internal {\n        delete self.keyList;\n    }\n}\n"
	},
	"sourceTreeHashHex": "0xc83203b817cce3b277c75c1c280b92187535080dd4681ef572b3dca7cef74da8",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.5.11+commit.c082d0b4.js",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 999999999
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"evm.bytecode.object"
					]
				}
			},
			"evmVersion": "constantinople",
			"remappings": []
		}
	},
	"networks": {}
}