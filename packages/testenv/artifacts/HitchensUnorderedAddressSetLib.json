{
	"schemaVersion": "2.0.0",
	"contractName": "HitchensUnorderedAddressSetLib",
	"compilerOutput": {
		"abi": [],
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820c96bdb3ab96bde8b376089fe34ab7a69225aff64bb159cedb2d27b0fc237273b64736f6c634300050b0032",
				"opcodes": "PUSH1 0x55 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 0xc9 PUSH12 0xDB3AB96BDE8B376089FE34AB PUSH27 0x69225AFF64BB159CEDB2D27B0FC237273B64736F6C634300050B00 ORIGIN ",
				"sourceMap": "26:1428:5:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24"
			}
		}
	},
	"sources": {
		"helpers/HitchensUnorderedAddressSetLib.sol": {
			"id": 5
		}
	},
	"sourceCodes": {
		"helpers/HitchensUnorderedAddressSetLib.sol": "pragma solidity ^0.5.1;\n\n\nlibrary HitchensUnorderedAddressSetLib {\n\n    struct Set {\n        mapping(address => uint) keyPointers;\n        address[] keyList;\n    }\n\n    function insert(Set storage self, address key) internal {\n        require(key != address(0), \"UnorderedKeySet(100) - Key cannot be 0x0\");\n        require(!exists(self, key), \"UnorderedAddressSet(101) - Address (key) already exists in the set.\");\n        self.keyPointers[key] = self.keyList.push(key)-1;\n    }\n\n    function remove(Set storage self, address key) internal {\n        require(exists(self, key), \"UnorderedKeySet(102) - Address (key) does not exist in the set.\");\n        address keyToMove = self.keyList[count(self)-1];\n        uint rowToReplace = self.keyPointers[key];\n        self.keyPointers[keyToMove] = rowToReplace;\n        self.keyList[rowToReplace] = keyToMove;\n        delete self.keyPointers[key];\n        self.keyList.length--;\n    }\n\n    function count(Set storage self) internal view returns(uint) {\n        return(self.keyList.length);\n    }\n\n    function exists(Set storage self, address key) internal view returns(bool) {\n        if(self.keyList.length == 0) return false;\n        return self.keyList[self.keyPointers[key]] == key;\n    }\n\n    function keyAtIndex(Set storage self, uint index) internal view returns(address) {\n        return self.keyList[index];\n    }\n\n    function nukeSet(Set storage self) internal {\n        delete self.keyList;\n    }\n}\n"
	},
	"sourceTreeHashHex": "0x86a5f2715b384803b77d3e0dfda06694b44c49f3a15b741fc39c3f0586749704",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.5.11+commit.c082d0b4.js",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 999999999
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"evm.bytecode.object"
					]
				}
			},
			"evmVersion": "constantinople",
			"remappings": []
		}
	},
	"networks": {}
}